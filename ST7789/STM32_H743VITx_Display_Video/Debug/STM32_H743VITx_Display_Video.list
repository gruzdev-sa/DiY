
STM32_H743VITx_Display_Video.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007d44  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080114d4  080114d4  000214d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080114d8  080114d8  000214d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  080114dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001078  24000098  08011574  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001110  08011574  00031110  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
  9 .debug_info   000356dc  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005460  00000000  00000000  000657a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002591b  00000000  00000000  0006ac02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e90  00000000  00000000  00090520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00004de0  00000000  00000000  000913b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000393e7  00000000  00000000  00096190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028ba7  00000000  00000000  000cf577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001592aa  00000000  00000000  000f811e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002513c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033f8  00000000  00000000  0025141c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000098 	.word	0x24000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009778 	.word	0x08009778

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400009c 	.word	0x2400009c
 80002d4:	08009778 	.word	0x08009778

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <DrawBMPImageFile>:
static uint8_t header[BMP_HEADER_SIZE];
static BitMapFileHeader* BmpFileHaeder;
static BitMapInfoHeader* BmpFileInfo;

IMGRESULT DrawBMPImageFile(const char* fname, uint16_t x_pos, uint16_t y_pos)
{
 80002e8:	4603      	mov	r3, r0
  FRESULT res;
  UINT bytesRead;
  res = f_open(&img_file, fname, FA_READ);
 80002ea:	4849      	ldr	r0, [pc, #292]	; (8000410 <DrawBMPImageFile+0x128>)
{
 80002ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002f0:	460f      	mov	r7, r1
 80002f2:	b087      	sub	sp, #28
 80002f4:	4616      	mov	r6, r2
  res = f_open(&img_file, fname, FA_READ);
 80002f6:	4619      	mov	r1, r3
 80002f8:	2201      	movs	r2, #1
 80002fa:	f008 f995 	bl	8008628 <f_open>
  if (res != FR_OK){
 80002fe:	2800      	cmp	r0, #0
 8000300:	d16a      	bne.n	80003d8 <DrawBMPImageFile+0xf0>
    f_close(&img_file);
    return IMG_FIL_ERR;
  }

  res = f_read(&img_file, header, (UINT)BMP_HEADER_SIZE, &bytesRead);
 8000302:	4c44      	ldr	r4, [pc, #272]	; (8000414 <DrawBMPImageFile+0x12c>)
 8000304:	2222      	movs	r2, #34	; 0x22
 8000306:	4842      	ldr	r0, [pc, #264]	; (8000410 <DrawBMPImageFile+0x128>)
 8000308:	ab05      	add	r3, sp, #20
 800030a:	4621      	mov	r1, r4
 800030c:	f008 fb9a 	bl	8008a44 <f_read>
  if (res != FR_OK){
 8000310:	2800      	cmp	r0, #0
 8000312:	d161      	bne.n	80003d8 <DrawBMPImageFile+0xf0>
  }

  BmpFileHaeder = (void*)header;
  BmpFileInfo   = (void*)(&header[0x0E]);

  if ( BmpFileHaeder->bfType != 0x4D42 ){
 8000314:	8822      	ldrh	r2, [r4, #0]
 8000316:	f644 5342 	movw	r3, #19778	; 0x4d42
 800031a:	429a      	cmp	r2, r3
 800031c:	d16e      	bne.n	80003fc <DrawBMPImageFile+0x114>
    f_close(&img_file);
    return IMG_NOT_BMP;
  }

  //Проверка, подходит ли нам такой формат компрессии
  if((BmpFileInfo->biPlanes != 1) || (BmpFileInfo->biBitCount != 24) || (BmpFileInfo->biCompression != 0)){
 800031e:	8b63      	ldrh	r3, [r4, #26]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d162      	bne.n	80003ea <DrawBMPImageFile+0x102>
 8000324:	8ba3      	ldrh	r3, [r4, #28]
 8000326:	2b18      	cmp	r3, #24
 8000328:	d15f      	bne.n	80003ea <DrawBMPImageFile+0x102>
 800032a:	f8d4 301e 	ldr.w	r3, [r4, #30]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d15b      	bne.n	80003ea <DrawBMPImageFile+0x102>
  //сохраняем значения ширины и высоты изображения
  uint32_t imageWidth = BmpFileInfo->biWidth;
  uint32_t imageHeight = BmpFileInfo->biHeight;

  //передвинем указатель на начало битового поля
  res = f_lseek(&img_file, BmpFileHaeder->bfOffBits);//imageOffset);
 8000332:	f8d4 100a 	ldr.w	r1, [r4, #10]
 8000336:	4836      	ldr	r0, [pc, #216]	; (8000410 <DrawBMPImageFile+0x128>)
  uint32_t imageWidth = BmpFileInfo->biWidth;
 8000338:	f8d4 9012 	ldr.w	r9, [r4, #18]
  uint32_t imageHeight = BmpFileInfo->biHeight;
 800033c:	f8d4 4016 	ldr.w	r4, [r4, #22]
  res = f_lseek(&img_file, BmpFileHaeder->bfOffBits);//imageOffset);
 8000340:	f008 fd82 	bl	8008e48 <f_lseek>
  if(res != FR_OK){
 8000344:	4680      	mov	r8, r0
 8000346:	2800      	cmp	r0, #0
 8000348:	d146      	bne.n	80003d8 <DrawBMPImageFile+0xf0>

  //Массив байт для одной горизонтальной линии, для загрузки в дисплей
  static uint16_t PixBuff[240];

  /* Рисуем строки снизу вверх */
  for (uint32_t y = imageHeight+y_pos-1; y != y_pos-1; y--)
 800034a:	3c01      	subs	r4, #1
 800034c:	1e72      	subs	r2, r6, #1
 800034e:	4426      	add	r6, r4
 8000350:	42b2      	cmp	r2, r6
 8000352:	d03d      	beq.n	80003d0 <DrawBMPImageFile+0xe8>
  {
    res = f_read(&img_file, imageRow, (imageWidth * 3 + 3) & ~3, &bytesRead);
 8000354:	f109 0301 	add.w	r3, r9, #1
 8000358:	492f      	ldr	r1, [pc, #188]	; (8000418 <DrawBMPImageFile+0x130>)
 800035a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8000420 <DrawBMPImageFile+0x138>
 800035e:	4690      	mov	r8, r2
 8000360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    for (uint32_t x = 0; x < imageWidth; x++)
    {
      uint8_t b = imageRow[rowIdx++];
      uint8_t g = imageRow[rowIdx++];
      uint8_t r = imageRow[rowIdx++];
      PixBuff[x] = RGB565(r, g, b);
 8000364:	4c2d      	ldr	r4, [pc, #180]	; (800041c <DrawBMPImageFile+0x134>)
 8000366:	eb01 0549 	add.w	r5, r1, r9, lsl #1
    res = f_read(&img_file, imageRow, (imageWidth * 3 + 3) & ~3, &bytesRead);
 800036a:	9003      	str	r0, [sp, #12]
 800036c:	f023 0a03 	bic.w	sl, r3, #3
 8000370:	463b      	mov	r3, r7
 8000372:	464f      	mov	r7, r9
 8000374:	4699      	mov	r9, r3
 8000376:	ab05      	add	r3, sp, #20
 8000378:	4652      	mov	r2, sl
 800037a:	4659      	mov	r1, fp
 800037c:	4824      	ldr	r0, [pc, #144]	; (8000410 <DrawBMPImageFile+0x128>)
 800037e:	f008 fb61 	bl	8008a44 <f_read>
    if (res != FR_OK)
 8000382:	bb48      	cbnz	r0, 80003d8 <DrawBMPImageFile+0xf0>
    for (uint32_t x = 0; x < imageWidth; x++)
 8000384:	b1bf      	cbz	r7, 80003b6 <DrawBMPImageFile+0xce>
 8000386:	4a26      	ldr	r2, [pc, #152]	; (8000420 <DrawBMPImageFile+0x138>)
 8000388:	4923      	ldr	r1, [pc, #140]	; (8000418 <DrawBMPImageFile+0x130>)
      PixBuff[x] = RGB565(r, g, b);
 800038a:	f892 c001 	ldrb.w	ip, [r2, #1]
 800038e:	7890      	ldrb	r0, [r2, #2]
 8000390:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000394:	f812 3b03 	ldrb.w	r3, [r2], #3
 8000398:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 800039c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80003a0:	ea40 000c 	orr.w	r0, r0, ip
 80003a4:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3

      //свапаем пиксель
      uint16_t temp = PixBuff[x];
      PixBuff[x] = PixBuff[x] >> 8;
      PixBuff[x] |= (temp << 8);
 80003a8:	021b      	lsls	r3, r3, #8
 80003aa:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80003ae:	f821 3b02 	strh.w	r3, [r1], #2
    for (uint32_t x = 0; x < imageWidth; x++)
 80003b2:	42a9      	cmp	r1, r5
 80003b4:	d1e9      	bne.n	800038a <DrawBMPImageFile+0xa2>
    }
    // Рисуем полученную строку
    ST7789_DrawImage( x_pos, y, imageWidth, 1, PixBuff );
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <DrawBMPImageFile+0x130>)
 80003b8:	b2b1      	uxth	r1, r6
  for (uint32_t y = imageHeight+y_pos-1; y != y_pos-1; y--)
 80003ba:	3e01      	subs	r6, #1
    ST7789_DrawImage( x_pos, y, imageWidth, 1, PixBuff );
 80003bc:	b2ba      	uxth	r2, r7
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4648      	mov	r0, r9
 80003c2:	2301      	movs	r3, #1
 80003c4:	f005 f8ee 	bl	80055a4 <ST7789_DrawImage>
  for (uint32_t y = imageHeight+y_pos-1; y != y_pos-1; y--)
 80003c8:	45b0      	cmp	r8, r6
 80003ca:	d1d4      	bne.n	8000376 <DrawBMPImageFile+0x8e>
 80003cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
  }

  f_close(&img_file);
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <DrawBMPImageFile+0x128>)
 80003d2:	f008 fc6d 	bl	8008cb0 <f_close>
  return IMG_OK;
 80003d6:	e004      	b.n	80003e2 <DrawBMPImageFile+0xfa>
    f_close(&img_file);
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <DrawBMPImageFile+0x128>)
    return IMG_FIL_ERR;
 80003da:	f04f 0801 	mov.w	r8, #1
    f_close(&img_file);
 80003de:	f008 fc67 	bl	8008cb0 <f_close>
}
 80003e2:	4640      	mov	r0, r8
 80003e4:	b007      	add	sp, #28
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return IMG_UNKNOWN_FORMAT;
 80003ea:	f04f 0803 	mov.w	r8, #3
    f_close(&img_file);
 80003ee:	4808      	ldr	r0, [pc, #32]	; (8000410 <DrawBMPImageFile+0x128>)
 80003f0:	f008 fc5e 	bl	8008cb0 <f_close>
}
 80003f4:	4640      	mov	r0, r8
 80003f6:	b007      	add	sp, #28
 80003f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return IMG_NOT_BMP;
 80003fc:	f04f 0802 	mov.w	r8, #2
    f_close(&img_file);
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <DrawBMPImageFile+0x128>)
 8000402:	f008 fc55 	bl	8008cb0 <f_close>
}
 8000406:	4640      	mov	r0, r8
 8000408:	b007      	add	sp, #28
 800040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800040e:	bf00      	nop
 8000410:	240005d0 	.word	0x240005d0
 8000414:	24000294 	.word	0x24000294
 8000418:	240000b4 	.word	0x240000b4
 800041c:	fffff800 	.word	0xfffff800
 8000420:	240002b8 	.word	0x240002b8

08000424 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000424:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000426:	4b2f      	ldr	r3, [pc, #188]	; (80004e4 <MX_GPIO_Init+0xc0>)
{
 8000428:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_RST_Pin, GPIO_PIN_RESET);
 800042c:	f244 0103 	movw	r1, #16387	; 0x4003
 8000430:	482d      	ldr	r0, [pc, #180]	; (80004e8 <MX_GPIO_Init+0xc4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RST_Pin;
 8000432:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	920a      	str	r2, [sp, #40]	; 0x28
 8000436:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800043a:	e9cd 2208 	strd	r2, r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8000442:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000446:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800044a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800044e:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8000452:	9401      	str	r4, [sp, #4]
 8000454:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800045a:	f044 0402 	orr.w	r4, r4, #2
 800045e:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8000462:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8000466:	f004 0402 	and.w	r4, r4, #2
 800046a:	9402      	str	r4, [sp, #8]
 800046c:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8000472:	f044 0404 	orr.w	r4, r4, #4
 8000476:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800047a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800047e:	f004 0404 	and.w	r4, r4, #4
 8000482:	9403      	str	r4, [sp, #12]
 8000484:	9c03      	ldr	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800048a:	f044 0401 	orr.w	r4, r4, #1
 800048e:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8000492:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8000496:	f004 0401 	and.w	r4, r4, #1
 800049a:	9404      	str	r4, [sp, #16]
 800049c:	9c04      	ldr	r4, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 80004a2:	f044 0408 	orr.w	r4, r4, #8
 80004a6:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RST_Pin;
 80004aa:	f245 0403 	movw	r4, #20483	; 0x5003
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b2:	f003 0308 	and.w	r3, r3, #8
 80004b6:	9305      	str	r3, [sp, #20]
 80004b8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_RST_Pin, GPIO_PIN_RESET);
 80004ba:	f000 fdd9 	bl	8001070 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <MX_GPIO_Init+0xc4>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c6:	f000 fdd3 	bl	8001070 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RST_Pin;
 80004ca:	2200      	movs	r2, #0
 80004cc:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	a906      	add	r1, sp, #24
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Pin = SPI2_BLK_Pin|SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RST_Pin;
 80004d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80004d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f000 fcab 	bl	8000e34 <HAL_GPIO_Init>

}
 80004de:	b00d      	add	sp, #52	; 0x34
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop
 80004e4:	58024400 	.word	0x58024400
 80004e8:	58020400 	.word	0x58020400

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f0:	224c      	movs	r2, #76	; 0x4c
 80004f2:	2100      	movs	r1, #0
 80004f4:	a80a      	add	r0, sp, #40	; 0x28
 80004f6:	f009 f82b 	bl	8009550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	a802      	add	r0, sp, #8
 8000500:	f009 f826 	bl	8009550 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000504:	2002      	movs	r0, #2
 8000506:	f000 fdb7 	bl	8001078 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <SystemClock_Config+0xc4>)
 800050c:	2200      	movs	r2, #0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050e:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	6999      	ldr	r1, [r3, #24]
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xc8>)
 8000516:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800051a:	6199      	str	r1, [r3, #24]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000536:	6983      	ldr	r3, [r0, #24]
 8000538:	049b      	lsls	r3, r3, #18
 800053a:	d5fc      	bpl.n	8000536 <SystemClock_Config+0x4a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800053c:	4c1e      	ldr	r4, [pc, #120]	; (80005b8 <SystemClock_Config+0xcc>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000540:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000542:	2705      	movs	r7, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000544:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000546:	26c0      	movs	r6, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800054e:	f023 0303 	bic.w	r3, r3, #3
 8000552:	4313      	orrs	r3, r2
 8000554:	62a3      	str	r3, [r4, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000556:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055a:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800055c:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 5;
 800055e:	9715      	str	r7, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000560:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000562:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000564:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056a:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f000 fe2b 	bl	80011cc <HAL_RCC_OscConfig>
 8000576:	b108      	cbz	r0, 800057c <SystemClock_Config+0x90>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057a:	e7fe      	b.n	800057a <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	223f      	movs	r2, #63	; 0x3f
 800057e:	2303      	movs	r3, #3
 8000580:	2600      	movs	r6, #0
 8000582:	2708      	movs	r7, #8
 8000584:	2440      	movs	r4, #64	; 0x40
 8000586:	2540      	movs	r5, #64	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000588:	a802      	add	r0, sp, #8
 800058a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800059a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800059e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	f001 f9a9 	bl	80018f8 <HAL_RCC_ClockConfig>
 80005a6:	b108      	cbz	r0, 80005ac <SystemClock_Config+0xc0>
 80005a8:	b672      	cpsid	i
  while (1)
 80005aa:	e7fe      	b.n	80005aa <SystemClock_Config+0xbe>
}
 80005ac:	b01f      	add	sp, #124	; 0x7c
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	58024800 	.word	0x58024800
 80005b4:	58000400 	.word	0x58000400
 80005b8:	58024400 	.word	0x58024400

080005bc <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005bc:	4b9a      	ldr	r3, [pc, #616]	; (8000828 <main+0x26c>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 80005c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c8:	b086      	sub	sp, #24
 80005ca:	d111      	bne.n	80005f0 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005d0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005e6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005f0:	4a8d      	ldr	r2, [pc, #564]	; (8000828 <main+0x26c>)
 80005f2:	6953      	ldr	r3, [r2, #20]
 80005f4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80005f8:	d124      	bne.n	8000644 <main+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000602:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000606:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800060a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800060e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000612:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000614:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000618:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061a:	ea40 7183 	orr.w	r1, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800061e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000620:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000624:	1c59      	adds	r1, r3, #1
 8000626:	d1f8      	bne.n	800061a <main+0x5e>
    } while(sets-- != 0U);
 8000628:	3c20      	subs	r4, #32
 800062a:	f114 0f20 	cmn.w	r4, #32
 800062e:	d1f1      	bne.n	8000614 <main+0x58>
 8000630:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000634:	6953      	ldr	r3, [r2, #20]
 8000636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800063a:	6153      	str	r3, [r2, #20]
 800063c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000640:	f3bf 8f6f 	isb	sy
  ST7789_print( 50, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, utf8rus("STM32 TFT") );
 8000644:	2401      	movs	r4, #1
  HAL_Init();
 8000646:	f000 fb35 	bl	8000cb4 <HAL_Init>
  SystemClock_Config();
 800064a:	f7ff ff4f 	bl	80004ec <SystemClock_Config>
  ST7789_print( 50, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, utf8rus("STM32 TFT") );
 800064e:	4f77      	ldr	r7, [pc, #476]	; (800082c <main+0x270>)
  MX_GPIO_Init();
 8000650:	f7ff fee8 	bl	8000424 <MX_GPIO_Init>
  free( pText );
 8000654:	4e76      	ldr	r6, [pc, #472]	; (8000830 <main+0x274>)
  MX_SPI2_Init();
 8000656:	f000 f9a9 	bl	80009ac <MX_SPI2_Init>
  ST7789_print( 10, 160, RGB565(255, 0, 0) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, utf8rus("Классный дисплей !!!") );
 800065a:	4d76      	ldr	r5, [pc, #472]	; (8000834 <main+0x278>)
  MX_SDMMC1_SD_Init();
 800065c:	f000 f912 	bl	8000884 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000660:	f005 fbe0 	bl	8005e24 <MX_FATFS_Init>
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_0, GPIO_PIN_SET );
 8000664:	4622      	mov	r2, r4
 8000666:	4621      	mov	r1, r4
 8000668:	4873      	ldr	r0, [pc, #460]	; (8000838 <main+0x27c>)
 800066a:	f000 fd01 	bl	8001070 <HAL_GPIO_WritePin>
  ST7789_Init();
 800066e:	f004 fde3 	bl	8005238 <ST7789_Init>
  ST7789_rotation( 1 );
 8000672:	4620      	mov	r0, r4
 8000674:	f005 fb14 	bl	8005ca0 <ST7789_rotation>
  ST7789_FillScreen( RGB565(0, 10, 100) );
 8000678:	204c      	movs	r0, #76	; 0x4c
 800067a:	f005 f859 	bl	8005730 <ST7789_FillScreen>
  ST7789_print( 50, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, utf8rus("STM32 TFT") );
 800067e:	486f      	ldr	r0, [pc, #444]	; (800083c <main+0x280>)
 8000680:	f004 fd90 	bl	80051a4 <utf8rus>
 8000684:	234c      	movs	r3, #76	; 0x4c
 8000686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068a:	2114      	movs	r1, #20
 800068c:	9003      	str	r0, [sp, #12]
 800068e:	2032      	movs	r0, #50	; 0x32
 8000690:	9701      	str	r7, [sp, #4]
 8000692:	9402      	str	r4, [sp, #8]
 8000694:	9400      	str	r4, [sp, #0]
 8000696:	f005 fad1 	bl	8005c3c <ST7789_print>
  free( pText );
 800069a:	6830      	ldr	r0, [r6, #0]
 800069c:	f008 ff50 	bl	8009540 <free>
  ST7789_print( 10, 160, RGB565(255, 0, 0) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, utf8rus("Классный дисплей !!!") );
 80006a0:	4867      	ldr	r0, [pc, #412]	; (8000840 <main+0x284>)
 80006a2:	f004 fd7f 	bl	80051a4 <utf8rus>
 80006a6:	234c      	movs	r3, #76	; 0x4c
 80006a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006ac:	21a0      	movs	r1, #160	; 0xa0
 80006ae:	9003      	str	r0, [sp, #12]
 80006b0:	200a      	movs	r0, #10
 80006b2:	9402      	str	r4, [sp, #8]
 80006b4:	9400      	str	r4, [sp, #0]
 80006b6:	9501      	str	r5, [sp, #4]
 80006b8:	f005 fac0 	bl	8005c3c <ST7789_print>
  free( pText );
 80006bc:	6830      	ldr	r0, [r6, #0]
 80006be:	f008 ff3f 	bl	8009540 <free>
  ST7789_print( 8, 200, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_7x9, 2, utf8rus("ST7789 : 240x240") );
 80006c2:	4860      	ldr	r0, [pc, #384]	; (8000844 <main+0x288>)
 80006c4:	f004 fd6e 	bl	80051a4 <utf8rus>
 80006c8:	4f5f      	ldr	r7, [pc, #380]	; (8000848 <main+0x28c>)
 80006ca:	2102      	movs	r1, #2
 80006cc:	234c      	movs	r3, #76	; 0x4c
 80006ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80006d2:	9003      	str	r0, [sp, #12]
 80006d4:	9102      	str	r1, [sp, #8]
 80006d6:	2008      	movs	r0, #8
 80006d8:	21c8      	movs	r1, #200	; 0xc8
 80006da:	9400      	str	r4, [sp, #0]
 80006dc:	9701      	str	r7, [sp, #4]
 80006de:	f005 faad 	bl	8005c3c <ST7789_print>
  free( pText );
 80006e2:	6830      	ldr	r0, [r6, #0]
 80006e4:	f008 ff2c 	bl	8009540 <free>
  ST7789_DrawImage( 80, 65, 85, 80, logoRGB );
 80006e8:	2350      	movs	r3, #80	; 0x50
 80006ea:	4958      	ldr	r1, [pc, #352]	; (800084c <main+0x290>)
 80006ec:	2255      	movs	r2, #85	; 0x55
 80006ee:	4618      	mov	r0, r3
 80006f0:	9100      	str	r1, [sp, #0]
 80006f2:	2141      	movs	r1, #65	; 0x41
 80006f4:	f004 ff56 	bl	80055a4 <ST7789_DrawImage>
  ST7789_DrawLine(1, 238, 239, 238, RGB565(255, 255, 0));
 80006f8:	23ee      	movs	r3, #238	; 0xee
 80006fa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80006fe:	4620      	mov	r0, r4
 8000700:	4619      	mov	r1, r3
 8000702:	9200      	str	r2, [sp, #0]
 8000704:	22ef      	movs	r2, #239	; 0xef
 8000706:	f005 f893 	bl	8005830 <ST7789_DrawLine>
  HAL_Delay(2000);
 800070a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800070e:	f000 fb13 	bl	8000d38 <HAL_Delay>
  ST7789_Clear();
 8000712:	f005 f821 	bl	8005758 <ST7789_Clear>
  ST7789_print( 0, 0, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "Mount SD .. " );
 8000716:	2300      	movs	r3, #0
 8000718:	484d      	ldr	r0, [pc, #308]	; (8000850 <main+0x294>)
 800071a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071e:	4619      	mov	r1, r3
 8000720:	9400      	str	r4, [sp, #0]
 8000722:	9003      	str	r0, [sp, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800072a:	f005 fa87 	bl	8005c3c <ST7789_print>
  res = f_mount(&fatfs, SDPath, 1);
 800072e:	4622      	mov	r2, r4
 8000730:	4948      	ldr	r1, [pc, #288]	; (8000854 <main+0x298>)
 8000732:	4849      	ldr	r0, [pc, #292]	; (8000858 <main+0x29c>)
 8000734:	f007 ff30 	bl	8008598 <f_mount>
  if(res == FR_OK){
 8000738:	4603      	mov	r3, r0
 800073a:	2800      	cmp	r0, #0
 800073c:	d155      	bne.n	80007ea <main+0x22e>
    ST7789_print( 150, 0, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "OK" );
 800073e:	4f47      	ldr	r7, [pc, #284]	; (800085c <main+0x2a0>)
 8000740:	4601      	mov	r1, r0
 8000742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000746:	9005      	str	r0, [sp, #20]
 8000748:	9402      	str	r4, [sp, #8]
 800074a:	2096      	movs	r0, #150	; 0x96
 800074c:	9501      	str	r5, [sp, #4]
 800074e:	9400      	str	r4, [sp, #0]
 8000750:	9703      	str	r7, [sp, #12]
 8000752:	f005 fa73 	bl	8005c3c <ST7789_print>
  ST7789_print( 0, 20, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "Open dir:" );
 8000756:	f8df c120 	ldr.w	ip, [pc, #288]	; 8000878 <main+0x2bc>
 800075a:	9b05      	ldr	r3, [sp, #20]
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  ST7789_print( 150, 20, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, media_folder);
 8000760:	4e3f      	ldr	r6, [pc, #252]	; (8000860 <main+0x2a4>)
  ST7789_print( 0, 20, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "Open dir:" );
 8000762:	2114      	movs	r1, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f8cd c00c 	str.w	ip, [sp, #12]
 800076a:	9402      	str	r4, [sp, #8]
 800076c:	9501      	str	r5, [sp, #4]
 800076e:	9400      	str	r4, [sp, #0]
 8000770:	f005 fa64 	bl	8005c3c <ST7789_print>
  ST7789_print( 150, 20, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, media_folder);
 8000774:	9b05      	ldr	r3, [sp, #20]
 8000776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077a:	2114      	movs	r1, #20
 800077c:	2096      	movs	r0, #150	; 0x96
 800077e:	9400      	str	r4, [sp, #0]
 8000780:	9603      	str	r6, [sp, #12]
 8000782:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8000786:	f005 fa59 	bl	8005c3c <ST7789_print>
  res = f_chdir(media_folder);
 800078a:	4630      	mov	r0, r6
 800078c:	f008 fb20 	bl	8008dd0 <f_chdir>
  if(res == FR_OK){
 8000790:	2800      	cmp	r0, #0
 8000792:	d13b      	bne.n	800080c <main+0x250>
    ST7789_print( 0, 40, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "OK" );
 8000794:	4e33      	ldr	r6, [pc, #204]	; (8000864 <main+0x2a8>)
 8000796:	4603      	mov	r3, r0
 8000798:	9703      	str	r7, [sp, #12]
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	9400      	str	r4, [sp, #0]
        res = f_readdir(&DirInfo, &FileInfo);
 80007a0:	4637      	mov	r7, r6
      res = f_opendir(&DirInfo, "");
 80007a2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800087c <main+0x2c0>
    ST7789_print( 0, 40, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "OK" );
 80007a6:	2128      	movs	r1, #40	; 0x28
 80007a8:	e9cd 5401 	strd	r5, r4, [sp, #4]
      res = f_opendir(&DirInfo, "");
 80007ac:	4c2e      	ldr	r4, [pc, #184]	; (8000868 <main+0x2ac>)
    ST7789_print( 0, 40, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "OK" );
 80007ae:	f005 fa45 	bl	8005c3c <ST7789_print>
      res = f_opendir(&DirInfo, "");
 80007b2:	4641      	mov	r1, r8
 80007b4:	4620      	mov	r0, r4
        if((dot = strrchr(FileInfo.fname, '.')) == 0) //если нет точки в имени
 80007b6:	4d2d      	ldr	r5, [pc, #180]	; (800086c <main+0x2b0>)
      res = f_opendir(&DirInfo, "");
 80007b8:	f008 fd10 	bl	80091dc <f_opendir>
        res = f_readdir(&DirInfo, &FileInfo);
 80007bc:	4639      	mov	r1, r7
 80007be:	4620      	mov	r0, r4
 80007c0:	f008 fdc4 	bl	800934c <f_readdir>
        if (FileInfo.fname[0] == 0)// если нет файлов
 80007c4:	7db3      	ldrb	r3, [r6, #22]
        if((dot = strrchr(FileInfo.fname, '.')) == 0) //если нет точки в имени
 80007c6:	212e      	movs	r1, #46	; 0x2e
 80007c8:	4628      	mov	r0, r5
        if (FileInfo.fname[0] == 0)// если нет файлов
 80007ca:	b1db      	cbz	r3, 8000804 <main+0x248>
        if((dot = strrchr(FileInfo.fname, '.')) == 0) //если нет точки в имени
 80007cc:	f008 ffa3 	bl	8009716 <strrchr>
        if(strncmp(dot,".bmp",4) == 0)
 80007d0:	2204      	movs	r2, #4
 80007d2:	4927      	ldr	r1, [pc, #156]	; (8000870 <main+0x2b4>)
        if((dot = strrchr(FileInfo.fname, '.')) == 0) //если нет точки в имени
 80007d4:	b1b0      	cbz	r0, 8000804 <main+0x248>
        if(strncmp(dot,".bmp",4) == 0)
 80007d6:	f008 ff8c 	bl	80096f2 <strncmp>
 80007da:	4602      	mov	r2, r0
 80007dc:	2800      	cmp	r0, #0
 80007de:	d1ed      	bne.n	80007bc <main+0x200>
          DrawBMPImageFile(FileInfo.fname, 0, 0);
 80007e0:	4628      	mov	r0, r5
 80007e2:	4611      	mov	r1, r2
 80007e4:	f7ff fd80 	bl	80002e8 <DrawBMPImageFile>
 80007e8:	e7e8      	b.n	80007bc <main+0x200>
    ST7789_print( 150, 0, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "fail" );
 80007ea:	4e22      	ldr	r6, [pc, #136]	; (8000874 <main+0x2b8>)
 80007ec:	2300      	movs	r3, #0
 80007ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f2:	2096      	movs	r0, #150	; 0x96
 80007f4:	4619      	mov	r1, r3
 80007f6:	9402      	str	r4, [sp, #8]
 80007f8:	9501      	str	r5, [sp, #4]
 80007fa:	9400      	str	r4, [sp, #0]
 80007fc:	9603      	str	r6, [sp, #12]
 80007fe:	f005 fa1d 	bl	8005c3c <ST7789_print>
    while(1)
 8000802:	e7fe      	b.n	8000802 <main+0x246>
      f_closedir(&DirInfo);
 8000804:	4620      	mov	r0, r4
 8000806:	f008 fd6d 	bl	80092e4 <f_closedir>
      res = f_opendir(&DirInfo, "");
 800080a:	e7d2      	b.n	80007b2 <main+0x1f6>
 800080c:	9b05      	ldr	r3, [sp, #20]
    ST7789_print( 0, 40, RGB565(255, 255, 255) , RGB565(0, 0, 0) , 1, &Font_11x18, 1, "fail" );
 800080e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000812:	4e18      	ldr	r6, [pc, #96]	; (8000874 <main+0x2b8>)
 8000814:	2128      	movs	r1, #40	; 0x28
 8000816:	4618      	mov	r0, r3
 8000818:	9402      	str	r4, [sp, #8]
 800081a:	9501      	str	r5, [sp, #4]
 800081c:	9400      	str	r4, [sp, #0]
 800081e:	9603      	str	r6, [sp, #12]
 8000820:	f005 fa0c 	bl	8005c3c <ST7789_print>
    while(1)
 8000824:	e7fe      	b.n	8000824 <main+0x268>
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	24000020 	.word	0x24000020
 8000830:	2400058c 	.word	0x2400058c
 8000834:	24000018 	.word	0x24000018
 8000838:	58020400 	.word	0x58020400
 800083c:	08009790 	.word	0x08009790
 8000840:	0800979c 	.word	0x0800979c
 8000844:	080097c0 	.word	0x080097c0
 8000848:	24000028 	.word	0x24000028
 800084c:	08009804 	.word	0x08009804
 8000850:	080097d4 	.word	0x080097d4
 8000854:	24000c94 	.word	0x24000c94
 8000858:	2400094c 	.word	0x2400094c
 800085c:	080097e4 	.word	0x080097e4
 8000860:	24000000 	.word	0x24000000
 8000864:	24000834 	.word	0x24000834
 8000868:	24000800 	.word	0x24000800
 800086c:	2400084a 	.word	0x2400084a
 8000870:	080097fc 	.word	0x080097fc
 8000874:	080097f4 	.word	0x080097f4
 8000878:	080097e8 	.word	0x080097e8
 800087c:	080097e0 	.word	0x080097e0

08000880 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
  while (1)
 8000882:	e7fe      	b.n	8000882 <Error_Handler+0x2>

08000884 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000884:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000888:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800088c:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 1;
 8000890:	2101      	movs	r1, #1
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000892:	60dc      	str	r4, [r3, #12]
  hsd1.Instance = SDMMC1;
 8000894:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000896:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.ClockDiv = 1;
 800089a:	6159      	str	r1, [r3, #20]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800089c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800089e:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 80008a2:	4770      	bx	lr
 80008a4:	24000b84 	.word	0x24000b84
 80008a8:	52007000 	.word	0x52007000

080008ac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80008ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	2400      	movs	r4, #0
{
 80008b2:	b0ba      	sub	sp, #232	; 0xe8
 80008b4:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b6:	22bc      	movs	r2, #188	; 0xbc
 80008b8:	4621      	mov	r1, r4
 80008ba:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	9408      	str	r4, [sp, #32]
 80008be:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008c2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c6:	f008 fe43 	bl	8009550 <memset>
  if(sdHandle->Instance==SDMMC1)
 80008ca:	682a      	ldr	r2, [r5, #0]
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_SD_MspInit+0xf0>)
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d002      	beq.n	80008d8 <HAL_SD_MspInit+0x2c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80008d2:	b03a      	add	sp, #232	; 0xe8
 80008d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	2304      	movs	r3, #4
 80008dc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80008e0:	2710      	movs	r7, #16
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80008e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80008e6:	2502      	movs	r5, #2
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e8:	9412      	str	r4, [sp, #72]	; 0x48
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80008ea:	2402      	movs	r4, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80008ee:	911d      	str	r1, [sp, #116]	; 0x74
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80008f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80008f4:	2200      	movs	r2, #0
 80008f6:	2300      	movs	r3, #0
 80008f8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80008fc:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8000900:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000904:	f001 fa5a 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 8000908:	2800      	cmp	r0, #0
 800090a:	d144      	bne.n	8000996 <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <HAL_SD_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800090e:	2401      	movs	r4, #1
 8000910:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000912:	f04f 080c 	mov.w	r8, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000916:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800091a:	f44f 56f8 	mov.w	r6, #7936	; 0x1f00
 800091e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000922:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	481f      	ldr	r0, [pc, #124]	; (80009a4 <HAL_SD_MspInit+0xf8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000928:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800092c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000930:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800093c:	f042 0204 	orr.w	r2, r2, #4
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000948:	f002 0204 	and.w	r2, r2, #4
 800094c:	9202      	str	r2, [sp, #8]
 800094e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000954:	f042 0208 	orr.w	r2, r2, #8
 8000958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000960:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	9303      	str	r3, [sp, #12]
 800096a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800096c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000970:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f000 fa5e 	bl	8000e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000978:	2204      	movs	r2, #4
 800097a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	a904      	add	r1, sp, #16
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <HAL_SD_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000980:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000984:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000988:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f000 fa52 	bl	8000e34 <HAL_GPIO_Init>
}
 8000990:	b03a      	add	sp, #232	; 0xe8
 8000992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8000996:	f7ff ff73 	bl	8000880 <Error_Handler>
 800099a:	e7b7      	b.n	800090c <HAL_SD_MspInit+0x60>
 800099c:	52007000 	.word	0x52007000
 80009a0:	58024400 	.word	0x58024400
 80009a4:	58020800 	.word	0x58020800
 80009a8:	58020c00 	.word	0x58020c00

080009ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009ac:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009ae:	4816      	ldr	r0, [pc, #88]	; (8000a08 <MX_SPI2_Init+0x5c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi2.Instance = SPI2;
 80009b4:	4915      	ldr	r1, [pc, #84]	; (8000a0c <MX_SPI2_Init+0x60>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ba:	2507      	movs	r5, #7
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009bc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
  hspi2.Instance = SPI2;
 80009c0:	6001      	str	r1, [r0, #0]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009c2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c6:	6042      	str	r2, [r0, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009cc:	6083      	str	r3, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ce:	2300      	movs	r3, #0
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009d0:	e9c0 5403 	strd	r5, r4, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d4:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.CRCPolynomial = 0x0;
 80009e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e6:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ea:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ee:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009f2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f6:	f003 f949 	bl	8003c8c <HAL_SPI_Init>
 80009fa:	b900      	cbnz	r0, 80009fe <MX_SPI2_Init+0x52>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009fc:	bd38      	pop	{r3, r4, r5, pc}
 80009fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000a02:	f7ff bf3d 	b.w	8000880 <Error_Handler>
 8000a06:	bf00      	nop
 8000a08:	24000c00 	.word	0x24000c00
 8000a0c:	40003800 	.word	0x40003800

08000a10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2400      	movs	r4, #0
{
 8000a14:	b0b7      	sub	sp, #220	; 0xdc
 8000a16:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	22bc      	movs	r2, #188	; 0xbc
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	9406      	str	r4, [sp, #24]
 8000a20:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000a24:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f008 fd92 	bl	8009550 <memset>
  if(spiHandle->Instance==SPI2)
 8000a2c:	682a      	ldr	r2, [r5, #0]
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_SPI_MspInit+0x94>)
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d001      	beq.n	8000a38 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a34:	b037      	add	sp, #220	; 0xdc
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a3e:	941e      	str	r4, [sp, #120]	; 0x78
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000a40:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	f001 f9bb 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	bb48      	cbnz	r0, 8000a9c <HAL_SPI_MspInit+0x8c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4a:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a4c:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 8000a50:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	a902      	add	r1, sp, #8
 8000a58:	4814      	ldr	r0, [pc, #80]	; (8000aac <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a5a:	2703      	movs	r7, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a60:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000a64:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000a68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a6c:	9200      	str	r2, [sp, #0]
 8000a6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a74:	f042 0202 	orr.w	r2, r2, #2
 8000a78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a80:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a82:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000a90:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f000 f9ce 	bl	8000e34 <HAL_GPIO_Init>
}
 8000a98:	b037      	add	sp, #220	; 0xdc
 8000a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000a9c:	f7ff fef0 	bl	8000880 <Error_Handler>
 8000aa0:	e7d2      	b.n	8000a48 <HAL_SPI_MspInit+0x38>
 8000aa2:	bf00      	nop
 8000aa4:	40003800 	.word	0x40003800
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020400 	.word	0x58020400

08000ab0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_MspInit+0x20>)
{
 8000ab2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ab8:	f042 0202 	orr.w	r2, r2, #2
 8000abc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	b002      	add	sp, #8
 8000ace:	4770      	bx	lr
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler>
 8000ad6:	bf00      	nop

08000ad8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <HardFault_Handler>
 8000ada:	bf00      	nop

08000adc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler>
 8000ade:	bf00      	nop

08000ae0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <BusFault_Handler>
 8000ae2:	bf00      	nop

08000ae4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler>
 8000ae6:	bf00      	nop

08000ae8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <DebugMon_Handler>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <PendSV_Handler>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 b90e 	b.w	8000d14 <HAL_IncTick>

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <_sbrk+0x38>)
{
 8000afc:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <_sbrk+0x3c>)
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000b02:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 8000b06:	b12a      	cbz	r2, 8000b14 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b08:	4413      	add	r3, r2
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d808      	bhi.n	8000b20 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000b0e:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000b10:	6023      	str	r3, [r4, #0]
}
 8000b12:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <_sbrk+0x44>)
 8000b16:	4602      	mov	r2, r0
 8000b18:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d9f6      	bls.n	8000b0e <_sbrk+0x16>
    errno = ENOMEM;
 8000b20:	f008 fcdc 	bl	80094dc <__errno>
 8000b24:	230c      	movs	r3, #12
    return (void *)-1;
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000b2a:	6003      	str	r3, [r0, #0]
}
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	24000588 	.word	0x24000588
 8000b34:	24080000 	.word	0x24080000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	24001110 	.word	0x24001110

08000b40 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4929      	ldr	r1, [pc, #164]	; (8000be8 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000b4c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d805      	bhi.n	8000b68 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f023 030f 	bic.w	r3, r3, #15
 8000b62:	f043 0307 	orr.w	r3, r3, #7
 8000b66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b6a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8000b6e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8000b72:	f041 0101 	orr.w	r1, r1, #1
 8000b76:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000b78:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b80:	6803      	ldr	r3, [r0, #0]
 8000b82:	071b      	lsls	r3, r3, #28
 8000b84:	d505      	bpl.n	8000b92 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b86:	6803      	ldr	r3, [r0, #0]
 8000b88:	f023 030f 	bic.w	r3, r3, #15
 8000b8c:	f043 0307 	orr.w	r3, r3, #7
 8000b90:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <SystemInit+0xb0>)
 8000b94:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b96:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8000b98:	4c18      	ldr	r4, [pc, #96]	; (8000bfc <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8000b9a:	4819      	ldr	r0, [pc, #100]	; (8000c00 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8000b9c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000b9e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000ba0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000ba2:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000ba4:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000ba6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000baa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bae:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb2:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bb4:	4c13      	ldr	r4, [pc, #76]	; (8000c04 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000bb6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bba:	4913      	ldr	r1, [pc, #76]	; (8000c08 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000bbc:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000bbe:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	4019      	ands	r1, r3
 8000bc4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000bc8:	d202      	bcs.n	8000bd0 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <SystemInit+0xcc>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bd0:	490f      	ldr	r1, [pc, #60]	; (8000c10 <SystemInit+0xd0>)
 8000bd2:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SystemInit+0xa8>)
 8000bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bdc:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000bde:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be2:	609a      	str	r2, [r3, #8]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	52002000 	.word	0x52002000
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bf8:	01010280 	.word	0x01010280
 8000bfc:	02020200 	.word	0x02020200
 8000c00:	01ff0000 	.word	0x01ff0000
 8000c04:	5c001000 	.word	0x5c001000
 8000c08:	ffff0000 	.word	0xffff0000
 8000c0c:	51008108 	.word	0x51008108
 8000c10:	52004000 	.word	0x52004000

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c18:	f7ff ff92 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f008 fc51 	bl	80094e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fcb9 	bl	80005bc <main>
  bx  lr
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c54:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000c58:	080114dc 	.word	0x080114dc
  ldr r2, =_sbss
 8000c5c:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000c60:	24001110 	.word	0x24001110

08000c64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC3_IRQHandler>
	...

08000c68 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_InitTick+0x40>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b90b      	cbnz	r3, 8000c72 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c70:	4770      	bx	lr
{
 8000c72:	b510      	push	{r4, lr}
 8000c74:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_InitTick+0x44>)
 8000c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c80:	6810      	ldr	r0, [r2, #0]
 8000c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c86:	f000 f8bd 	bl	8000e04 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	2c0f      	cmp	r4, #15
 8000c8c:	d800      	bhi.n	8000c90 <HAL_InitTick+0x28>
 8000c8e:	b108      	cbz	r0, 8000c94 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000c90:	2001      	movs	r0, #1
}
 8000c92:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	4621      	mov	r1, r4
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f878 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_InitTick+0x48>)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	601c      	str	r4, [r3, #0]
}
 8000ca6:	bd10      	pop	{r4, pc}
 8000ca8:	24000010 	.word	0x24000010
 8000cac:	24000008 	.word	0x24000008
 8000cb0:	24000014 	.word	0x24000014

08000cb4 <HAL_Init>:
{
 8000cb4:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cb8:	4c12      	ldr	r4, [pc, #72]	; (8000d04 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	f000 f855 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cbe:	4d12      	ldr	r5, [pc, #72]	; (8000d08 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cc0:	f000 fd7a 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_Init+0x58>)
 8000cc6:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cca:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ccc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cce:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cd2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cd6:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cd8:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cda:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8000cde:	4c0c      	ldr	r4, [pc, #48]	; (8000d10 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ce0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ce4:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8000cea:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cec:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	f7ff ffbb 	bl	8000c68 <HAL_InitTick>
 8000cf2:	b110      	cbz	r0, 8000cfa <HAL_Init+0x46>
    return HAL_ERROR;
 8000cf4:	2401      	movs	r4, #1
}
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	4604      	mov	r4, r0
  HAL_MspInit();
 8000cfc:	f7ff fed8 	bl	8000ab0 <HAL_MspInit>
}
 8000d00:	4620      	mov	r0, r4
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	0800cd24 	.word	0x0800cd24
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	24000008 	.word	0x24000008

08000d14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x10>)
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_IncTick+0x14>)
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	440b      	add	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	24000c88 	.word	0x24000c88
 8000d28:	24000010 	.word	0x24000010

08000d2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <HAL_GetTick+0x8>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	24000c88 	.word	0x24000c88

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff fff6 	bl	8000d2c <HAL_GetTick>
 8000d40:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	1c63      	adds	r3, r4, #1
 8000d44:	d002      	beq.n	8000d4c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_Delay+0x20>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	1b43      	subs	r3, r0, r5
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	d3fa      	bcc.n	8000d4c <HAL_Delay+0x14>
  {
  }
}
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	24000010 	.word	0x24000010

08000d5c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <HAL_GetREVID+0x8>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
}
 8000d60:	0c00      	lsrs	r0, r0, #16
 8000d62:	4770      	bx	lr
 8000d64:	5c001000 	.word	0x5c001000

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000d7a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000d82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d84:	60cb      	str	r3, [r1, #12]
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	05fa0000 	.word	0x05fa0000

08000d90 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_NVIC_SetPriority+0x68>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	2d04      	cmp	r5, #4
 8000da2:	bf28      	it	cs
 8000da4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	2c06      	cmp	r4, #6
 8000da8:	d919      	bls.n	8000dde <HAL_NVIC_SetPriority+0x4e>
 8000daa:	3b03      	subs	r3, #3
 8000dac:	f04f 34ff 	mov.w	r4, #4294967295
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db6:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000dba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	fa04 f405 	lsl.w	r4, r4, r5
 8000dc0:	ea21 0104 	bic.w	r1, r1, r4
 8000dc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000dc8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	db0a      	blt.n	8000de4 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	0109      	lsls	r1, r1, #4
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_NVIC_SetPriority+0x6c>)
 8000dd2:	b2c9      	uxtb	r1, r1
 8000dd4:	4403      	add	r3, r0
 8000dd6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dda:	bc30      	pop	{r4, r5}
 8000ddc:	4770      	bx	lr
 8000dde:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de0:	4613      	mov	r3, r2
 8000de2:	e7e8      	b.n	8000db6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	f000 000f 	and.w	r0, r0, #15
 8000de8:	0109      	lsls	r1, r1, #4
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_NVIC_SetPriority+0x70>)
 8000dec:	b2c9      	uxtb	r1, r1
 8000dee:	4403      	add	r3, r0
 8000df0:	7619      	strb	r1, [r3, #24]
 8000df2:	bc30      	pop	{r4, r5}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ecfc 	.word	0xe000ecfc

08000e04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	3801      	subs	r0, #1
 8000e06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e0a:	d20d      	bcs.n	8000e28 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e10:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	25f0      	movs	r5, #240	; 0xf0
 8000e16:	4c06      	ldr	r4, [pc, #24]	; (8000e30 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e18:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000e24:	bc30      	pop	{r4, r5}
 8000e26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e38:	680e      	ldr	r6, [r1, #0]
{
 8000e3a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	f000 80d3 	beq.w	8000fe8 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8000e42:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001068 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e48:	f8df b220 	ldr.w	fp, [pc, #544]	; 800106c <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e4c:	46b1      	mov	r9, r6
 8000e4e:	e020      	b.n	8000e92 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e52:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e56:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e5a:	f04f 0e0f 	mov.w	lr, #15
 8000e5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e62:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e68:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e6e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e72:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e76:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e7a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000e80:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e82:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8000e86:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8000e88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e8a:	fa39 f203 	lsrs.w	r2, r9, r3
 8000e8e:	f000 80ab 	beq.w	8000fe8 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e92:	2201      	movs	r2, #1
 8000e94:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8000e96:	ea12 0809 	ands.w	r8, r2, r9
 8000e9a:	d0f5      	beq.n	8000e88 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	684c      	ldr	r4, [r1, #4]
 8000e9e:	005f      	lsls	r7, r3, #1
 8000ea0:	f024 0c10 	bic.w	ip, r4, #16
 8000ea4:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea8:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eaa:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	f200 809e 	bhi.w	8000fee <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8000eb6:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eba:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ebc:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ebe:	ea2e 0e05 	bic.w	lr, lr, r5
 8000ec2:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	68ce      	ldr	r6, [r1, #12]
 8000ec8:	40be      	lsls	r6, r7
 8000eca:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ece:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8000ed0:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ed4:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed8:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000ede:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ee0:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee2:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ee8:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	fa02 f207 	lsl.w	r2, r2, r7
 8000ef0:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8000ef4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	d0ab      	beq.n	8000e50 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8000ef8:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efa:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000efe:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f00:	fa02 f707 	lsl.w	r7, r2, r7
 8000f04:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000f06:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	00e6      	lsls	r6, r4, #3
 8000f0a:	d5bd      	bpl.n	8000e88 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8000f10:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	f046 0602 	orr.w	r6, r6, #2
 8000f1e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f22:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8000f28:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f2c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f30:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	f006 0602 	and.w	r6, r6, #2
 8000f38:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3a:	4e42      	ldr	r6, [pc, #264]	; (8001044 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f40:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f42:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f46:	d020      	beq.n	8000f8a <HAL_GPIO_Init+0x156>
 8000f48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f4c:	42b0      	cmp	r0, r6
 8000f4e:	d056      	beq.n	8000ffe <HAL_GPIO_Init+0x1ca>
 8000f50:	4e3d      	ldr	r6, [pc, #244]	; (8001048 <HAL_GPIO_Init+0x214>)
 8000f52:	42b0      	cmp	r0, r6
 8000f54:	d058      	beq.n	8001008 <HAL_GPIO_Init+0x1d4>
 8000f56:	4e3d      	ldr	r6, [pc, #244]	; (800104c <HAL_GPIO_Init+0x218>)
 8000f58:	42b0      	cmp	r0, r6
 8000f5a:	d04b      	beq.n	8000ff4 <HAL_GPIO_Init+0x1c0>
 8000f5c:	4e3c      	ldr	r6, [pc, #240]	; (8001050 <HAL_GPIO_Init+0x21c>)
 8000f5e:	42b0      	cmp	r0, r6
 8000f60:	d05c      	beq.n	800101c <HAL_GPIO_Init+0x1e8>
 8000f62:	4e3c      	ldr	r6, [pc, #240]	; (8001054 <HAL_GPIO_Init+0x220>)
 8000f64:	42b0      	cmp	r0, r6
 8000f66:	d05e      	beq.n	8001026 <HAL_GPIO_Init+0x1f2>
 8000f68:	4e3b      	ldr	r6, [pc, #236]	; (8001058 <HAL_GPIO_Init+0x224>)
 8000f6a:	42b0      	cmp	r0, r6
 8000f6c:	d051      	beq.n	8001012 <HAL_GPIO_Init+0x1de>
 8000f6e:	4e3b      	ldr	r6, [pc, #236]	; (800105c <HAL_GPIO_Init+0x228>)
 8000f70:	42b0      	cmp	r0, r6
 8000f72:	d05d      	beq.n	8001030 <HAL_GPIO_Init+0x1fc>
 8000f74:	4e3a      	ldr	r6, [pc, #232]	; (8001060 <HAL_GPIO_Init+0x22c>)
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	d05f      	beq.n	800103a <HAL_GPIO_Init+0x206>
 8000f7a:	4e3a      	ldr	r6, [pc, #232]	; (8001064 <HAL_GPIO_Init+0x230>)
 8000f7c:	42b0      	cmp	r0, r6
 8000f7e:	bf0c      	ite	eq
 8000f80:	2609      	moveq	r6, #9
 8000f82:	260a      	movne	r6, #10
 8000f84:	fa06 f202 	lsl.w	r2, r6, r2
 8000f88:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000f8c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8000f90:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f94:	03e5      	lsls	r5, r4, #15
    position++;
 8000f96:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8000f9a:	bf54      	ite	pl
 8000f9c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8000f9e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000fa2:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa6:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8000fa8:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000fb0:	bf54      	ite	pl
 8000fb2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fb4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb8:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8000fba:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000fbe:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8000fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000fc4:	bf54      	ite	pl
 8000fc6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fc8:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fcc:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8000fce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8000fd2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8000fd4:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8000fd6:	bf54      	ite	pl
 8000fd8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8000fda:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8000fde:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fe0:	fa39 f203 	lsrs.w	r2, r9, r3
 8000fe4:	f47f af55 	bne.w	8000e92 <HAL_GPIO_Init+0x5e>
  }
}
 8000fe8:	b005      	add	sp, #20
 8000fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fee:	40bd      	lsls	r5, r7
 8000ff0:	43ed      	mvns	r5, r5
 8000ff2:	e775      	b.n	8000ee0 <HAL_GPIO_Init+0xac>
 8000ff4:	2603      	movs	r6, #3
 8000ff6:	fa06 f202 	lsl.w	r2, r6, r2
 8000ffa:	4315      	orrs	r5, r2
 8000ffc:	e7c5      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8000ffe:	2601      	movs	r6, #1
 8001000:	fa06 f202 	lsl.w	r2, r6, r2
 8001004:	4315      	orrs	r5, r2
 8001006:	e7c0      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8001008:	2602      	movs	r6, #2
 800100a:	fa06 f202 	lsl.w	r2, r6, r2
 800100e:	4315      	orrs	r5, r2
 8001010:	e7bb      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8001012:	2606      	movs	r6, #6
 8001014:	fa06 f202 	lsl.w	r2, r6, r2
 8001018:	4315      	orrs	r5, r2
 800101a:	e7b6      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 800101c:	2604      	movs	r6, #4
 800101e:	fa06 f202 	lsl.w	r2, r6, r2
 8001022:	4315      	orrs	r5, r2
 8001024:	e7b1      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8001026:	2605      	movs	r6, #5
 8001028:	fa06 f202 	lsl.w	r2, r6, r2
 800102c:	4315      	orrs	r5, r2
 800102e:	e7ac      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8001030:	2607      	movs	r6, #7
 8001032:	fa06 f202 	lsl.w	r2, r6, r2
 8001036:	4315      	orrs	r5, r2
 8001038:	e7a7      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 800103a:	2608      	movs	r6, #8
 800103c:	fa06 f202 	lsl.w	r2, r6, r2
 8001040:	4315      	orrs	r5, r2
 8001042:	e7a2      	b.n	8000f8a <HAL_GPIO_Init+0x156>
 8001044:	58020000 	.word	0x58020000
 8001048:	58020800 	.word	0x58020800
 800104c:	58020c00 	.word	0x58020c00
 8001050:	58021000 	.word	0x58021000
 8001054:	58021400 	.word	0x58021400
 8001058:	58021800 	.word	0x58021800
 800105c:	58021c00 	.word	0x58021c00
 8001060:	58022000 	.word	0x58022000
 8001064:	58022400 	.word	0x58022400
 8001068:	58024400 	.word	0x58024400
 800106c:	58000080 	.word	0x58000080

08001070 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	b902      	cbnz	r2, 8001074 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001072:	0409      	lsls	r1, r1, #16
 8001074:	6181      	str	r1, [r0, #24]
  }
}
 8001076:	4770      	bx	lr

08001078 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001078:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_PWREx_ConfigSupply+0x48>)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	0752      	lsls	r2, r2, #29
 8001080:	d406      	bmi.n	8001090 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001088:	1a18      	subs	r0, r3, r0
 800108a:	bf18      	it	ne
 800108c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800108e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001090:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001092:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001094:	f022 0207 	bic.w	r2, r2, #7
 8001098:	4310      	orrs	r0, r2
 800109a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 800109c:	f7ff fe46 	bl	8000d2c <HAL_GetTick>
 80010a0:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010a2:	e005      	b.n	80010b0 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010a4:	f7ff fe42 	bl	8000d2c <HAL_GetTick>
 80010a8:	1b00      	subs	r0, r0, r4
 80010aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010ae:	d804      	bhi.n	80010ba <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010b0:	686b      	ldr	r3, [r5, #4]
 80010b2:	049b      	lsls	r3, r3, #18
 80010b4:	d5f6      	bpl.n	80010a4 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 80010b6:	2000      	movs	r0, #0
}
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
}
 80010bc:	bd38      	pop	{r3, r4, r5, pc}
 80010be:	bf00      	nop
 80010c0:	58024800 	.word	0x58024800

080010c4 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80010c6:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80010c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80010ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80010cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80010ce:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80010d2:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010d6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 80010d8:	d038      	beq.n	800114c <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010da:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80010de:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80010e2:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010e6:	fb01 f105 	mul.w	r1, r1, r5
 80010ea:	2a01      	cmp	r2, #1
 80010ec:	ee07 1a90 	vmov	s15, r1
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80010f4:	d002      	beq.n	80010fc <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80010f6:	2a02      	cmp	r2, #2
 80010f8:	d04e      	beq.n	8001198 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80010fa:	b34a      	cbz	r2, 8001150 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010fc:	ee07 0a90 	vmov	s15, r0
 8001100:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80011b8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8001104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800110e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80011bc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001116:	ee06 3a90 	vmov	s13, r3
 800111a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800111e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001122:	ee76 6a85 	vadd.f32	s13, s13, s10
 8001126:	eee7 6a25 	vfma.f32	s13, s14, s11
 800112a:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001136:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001148:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800114c:	bc30      	pop	{r4, r5}
 800114e:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	0692      	lsls	r2, r2, #26
 8001154:	d527      	bpl.n	80011a6 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001156:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001158:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800115e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001162:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800116c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800116e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80011bc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001176:	ee06 2a10 	vmov	s12, r2
 800117a:	ee06 3a90 	vmov	s13, r3
 800117e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8001182:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001186:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800118a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800118e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001192:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001196:	e7ca      	b.n	800112e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001198:	ee07 0a90 	vmov	s15, r0
 800119c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80011c4 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	e7b0      	b.n	8001108 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80011a6:	ee07 0a90 	vmov	s15, r0
 80011aa:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011c8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	e7a9      	b.n	8001108 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80011b4:	58024400 	.word	0x58024400
 80011b8:	4a742400 	.word	0x4a742400
 80011bc:	39000000 	.word	0x39000000
 80011c0:	03d09000 	.word	0x03d09000
 80011c4:	4bbebc20 	.word	0x4bbebc20
 80011c8:	4c742400 	.word	0x4c742400

080011cc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80011cc:	2800      	cmp	r0, #0
 80011ce:	f000 81f7 	beq.w	80015c0 <HAL_RCC_OscConfig+0x3f4>
{
 80011d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d4:	6803      	ldr	r3, [r0, #0]
 80011d6:	4604      	mov	r4, r0
 80011d8:	07d9      	lsls	r1, r3, #31
 80011da:	d52e      	bpl.n	800123a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011dc:	49b4      	ldr	r1, [pc, #720]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 80011de:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011e6:	2a10      	cmp	r2, #16
 80011e8:	f000 812c 	beq.w	8001444 <HAL_RCC_OscConfig+0x278>
 80011ec:	2a18      	cmp	r2, #24
 80011ee:	f000 8124 	beq.w	800143a <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	6863      	ldr	r3, [r4, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	f000 8167 	beq.w	80014ca <HAL_RCC_OscConfig+0x2fe>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 817f 	beq.w	8001500 <HAL_RCC_OscConfig+0x334>
 8001202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001206:	4baa      	ldr	r3, [pc, #680]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f000 8278 	beq.w	80016fe <HAL_RCC_OscConfig+0x532>
 800120e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800121a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800121c:	f7ff fd86 	bl	8000d2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001220:	4ea3      	ldr	r6, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8001222:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001224:	e005      	b.n	8001232 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff fd81 	bl	8000d2c <HAL_GetTick>
 800122a:	1b40      	subs	r0, r0, r5
 800122c:	2864      	cmp	r0, #100	; 0x64
 800122e:	f200 8165 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	039f      	lsls	r7, r3, #14
 8001236:	d5f6      	bpl.n	8001226 <HAL_RCC_OscConfig+0x5a>
 8001238:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	0799      	lsls	r1, r3, #30
 800123c:	d521      	bpl.n	8001282 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123e:	4a9c      	ldr	r2, [pc, #624]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001240:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001242:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001244:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8001248:	f040 80a8 	bne.w	800139c <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	4b98      	ldr	r3, [pc, #608]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	075b      	lsls	r3, r3, #29
 8001252:	d503      	bpl.n	800125c <HAL_RCC_OscConfig+0x90>
 8001254:	68e3      	ldr	r3, [r4, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80ed 	beq.w	8001436 <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	f7ff fd7e 	bl	8000d5c <HAL_GetREVID>
 8001260:	f241 0303 	movw	r3, #4099	; 0x1003
 8001264:	4298      	cmp	r0, r3
 8001266:	f200 8189 	bhi.w	800157c <HAL_RCC_OscConfig+0x3b0>
 800126a:	6922      	ldr	r2, [r4, #16]
 800126c:	2a40      	cmp	r2, #64	; 0x40
 800126e:	f000 824e 	beq.w	800170e <HAL_RCC_OscConfig+0x542>
 8001272:	498f      	ldr	r1, [pc, #572]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001274:	684b      	ldr	r3, [r1, #4]
 8001276:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800127a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001282:	06d9      	lsls	r1, r3, #27
 8001284:	d456      	bmi.n	8001334 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	071d      	lsls	r5, r3, #28
 8001288:	d517      	bpl.n	80012ba <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128a:	6963      	ldr	r3, [r4, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80b4 	beq.w	80013fa <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001294:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001296:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800129e:	f7ff fd45 	bl	8000d2c <HAL_GetTick>
 80012a2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012a4:	e005      	b.n	80012b2 <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fd41 	bl	8000d2c <HAL_GetTick>
 80012aa:	1b40      	subs	r0, r0, r5
 80012ac:	2802      	cmp	r0, #2
 80012ae:	f200 8125 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012b2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80012b4:	0798      	lsls	r0, r3, #30
 80012b6:	d5f6      	bpl.n	80012a6 <HAL_RCC_OscConfig+0xda>
 80012b8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ba:	069a      	lsls	r2, r3, #26
 80012bc:	d517      	bpl.n	80012ee <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8134 	beq.w	800152e <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 80012c8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ca:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 80012cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012d2:	f7ff fd2b 	bl	8000d2c <HAL_GetTick>
 80012d6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012d8:	e005      	b.n	80012e6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012da:	f7ff fd27 	bl	8000d2c <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	f200 810b 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012e6:	6833      	ldr	r3, [r6, #0]
 80012e8:	049f      	lsls	r7, r3, #18
 80012ea:	d5f6      	bpl.n	80012da <HAL_RCC_OscConfig+0x10e>
 80012ec:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ee:	0759      	lsls	r1, r3, #29
 80012f0:	f100 80b2 	bmi.w	8001458 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012f6:	b1d8      	cbz	r0, 8001330 <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80012f8:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001300:	2a18      	cmp	r2, #24
 8001302:	f000 81ce 	beq.w	80016a2 <HAL_RCC_OscConfig+0x4d6>
        __HAL_RCC_PLL_DISABLE();
 8001306:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800130a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800130c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001310:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001312:	f000 8161 	beq.w	80015d8 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 8001316:	f7ff fd09 	bl	8000d2c <HAL_GetTick>
 800131a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800131c:	e005      	b.n	800132a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fd05 	bl	8000d2c <HAL_GetTick>
 8001322:	1b00      	subs	r0, r0, r4
 8001324:	2802      	cmp	r0, #2
 8001326:	f200 80e9 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800132a:	682b      	ldr	r3, [r5, #0]
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	d4f6      	bmi.n	800131e <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 8001330:	2000      	movs	r0, #0
}
 8001332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001334:	4a5e      	ldr	r2, [pc, #376]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001336:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001338:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800133e:	2b08      	cmp	r3, #8
 8001340:	d072      	beq.n	8001428 <HAL_RCC_OscConfig+0x25c>
 8001342:	2b18      	cmp	r3, #24
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001346:	69e3      	ldr	r3, [r4, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8103 	beq.w	8001554 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 800134e:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001350:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001352:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8001354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001358:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800135a:	f7ff fce7 	bl	8000d2c <HAL_GetTick>
 800135e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001360:	e005      	b.n	800136e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001362:	f7ff fce3 	bl	8000d2c <HAL_GetTick>
 8001366:	1b40      	subs	r0, r0, r5
 8001368:	2802      	cmp	r0, #2
 800136a:	f200 80c7 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800136e:	6833      	ldr	r3, [r6, #0]
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	d5f6      	bpl.n	8001362 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001374:	f7ff fcf2 	bl	8000d5c <HAL_GetREVID>
 8001378:	f241 0303 	movw	r3, #4099	; 0x1003
 800137c:	4298      	cmp	r0, r3
 800137e:	f200 81e9 	bhi.w	8001754 <HAL_RCC_OscConfig+0x588>
 8001382:	6a22      	ldr	r2, [r4, #32]
 8001384:	6873      	ldr	r3, [r6, #4]
 8001386:	2a20      	cmp	r2, #32
 8001388:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	bf0c      	ite	eq
 800138e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001392:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001396:	6073      	str	r3, [r6, #4]
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	e774      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800139c:	2b18      	cmp	r3, #24
 800139e:	f000 810b 	beq.w	80015b8 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a2:	68e2      	ldr	r2, [r4, #12]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	f000 80f3 	beq.w	8001590 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013aa:	4941      	ldr	r1, [pc, #260]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 80013ac:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ae:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013b0:	f023 0319 	bic.w	r3, r3, #25
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcb8 	bl	8000d2c <HAL_GetTick>
 80013bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013be:	e005      	b.n	80013cc <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fcb4 	bl	8000d2c <HAL_GetTick>
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	2802      	cmp	r0, #2
 80013c8:	f200 8098 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013cc:	6833      	ldr	r3, [r6, #0]
 80013ce:	075f      	lsls	r7, r3, #29
 80013d0:	d5f6      	bpl.n	80013c0 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	f7ff fcc3 	bl	8000d5c <HAL_GetREVID>
 80013d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80013da:	4298      	cmp	r0, r3
 80013dc:	f200 81c3 	bhi.w	8001766 <HAL_RCC_OscConfig+0x59a>
 80013e0:	6922      	ldr	r2, [r4, #16]
 80013e2:	6873      	ldr	r3, [r6, #4]
 80013e4:	2a40      	cmp	r2, #64	; 0x40
 80013e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013ea:	bf0c      	ite	eq
 80013ec:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80013f0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80013f4:	6073      	str	r3, [r6, #4]
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	e743      	b.n	8001282 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 80013fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013fe:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001406:	f7ff fc91 	bl	8000d2c <HAL_GetTick>
 800140a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800140c:	e004      	b.n	8001418 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fc8d 	bl	8000d2c <HAL_GetTick>
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	2802      	cmp	r0, #2
 8001416:	d871      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001418:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800141a:	0799      	lsls	r1, r3, #30
 800141c:	d4f7      	bmi.n	800140e <HAL_RCC_OscConfig+0x242>
 800141e:	e74b      	b.n	80012b8 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	2a01      	cmp	r2, #1
 8001426:	d18e      	bne.n	8001346 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	05da      	lsls	r2, r3, #23
 800142e:	d552      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x30a>
 8001430:	69e3      	ldr	r3, [r4, #28]
 8001432:	2b80      	cmp	r3, #128	; 0x80
 8001434:	d04f      	beq.n	80014d6 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8001436:	2001      	movs	r0, #1
}
 8001438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800143a:	f001 0103 	and.w	r1, r1, #3
 800143e:	2902      	cmp	r1, #2
 8001440:	f47f aed7 	bne.w	80011f2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	0392      	lsls	r2, r2, #14
 800144a:	f57f aef6 	bpl.w	800123a <HAL_RCC_OscConfig+0x6e>
 800144e:	6862      	ldr	r2, [r4, #4]
 8001450:	2a00      	cmp	r2, #0
 8001452:	f47f aef2 	bne.w	800123a <HAL_RCC_OscConfig+0x6e>
 8001456:	e7ee      	b.n	8001436 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_RCC_OscConfig+0x2e8>)
 800145a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800145c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800145e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001462:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001464:	f7ff fc62 	bl	8000d2c <HAL_GetTick>
 8001468:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800146a:	e004      	b.n	8001476 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800146c:	f7ff fc5e 	bl	8000d2c <HAL_GetTick>
 8001470:	1b40      	subs	r0, r0, r5
 8001472:	2864      	cmp	r0, #100	; 0x64
 8001474:	d842      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001476:	6833      	ldr	r3, [r6, #0]
 8001478:	05da      	lsls	r2, r3, #23
 800147a:	d5f7      	bpl.n	800146c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	68a3      	ldr	r3, [r4, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	f000 817a 	beq.w	8001778 <HAL_RCC_OscConfig+0x5ac>
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 814b 	beq.w	8001720 <HAL_RCC_OscConfig+0x554>
 800148a:	2b05      	cmp	r3, #5
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 800148e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001490:	f000 8187 	beq.w	80017a2 <HAL_RCC_OscConfig+0x5d6>
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	671a      	str	r2, [r3, #112]	; 0x70
 800149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800149c:	f022 0204 	bic.w	r2, r2, #4
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc43 	bl	8000d2c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a6:	4e02      	ldr	r6, [pc, #8]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014ac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f6>
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc38 	bl	8000d2c <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	42b8      	cmp	r0, r7
 80014c0:	d81c      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80014c4:	079b      	lsls	r3, r3, #30
 80014c6:	d5f7      	bpl.n	80014b8 <HAL_RCC_OscConfig+0x2ec>
 80014c8:	e714      	b.n	80012f4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	4aae      	ldr	r2, [pc, #696]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 80014cc:	6813      	ldr	r3, [r2, #0]
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	e6a2      	b.n	800121c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014d6:	f7ff fc41 	bl	8000d5c <HAL_GetREVID>
 80014da:	f241 0303 	movw	r3, #4099	; 0x1003
 80014de:	4298      	cmp	r0, r3
 80014e0:	d870      	bhi.n	80015c4 <HAL_RCC_OscConfig+0x3f8>
 80014e2:	6a22      	ldr	r2, [r4, #32]
 80014e4:	2a20      	cmp	r2, #32
 80014e6:	f000 8153 	beq.w	8001790 <HAL_RCC_OscConfig+0x5c4>
 80014ea:	49a6      	ldr	r1, [pc, #664]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 80014ec:	684b      	ldr	r3, [r1, #4]
 80014ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014f2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	e6c4      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
}
 80014fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 8001502:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001504:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001506:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001512:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001514:	f7ff fc0a 	bl	8000d2c <HAL_GetTick>
 8001518:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800151a:	e004      	b.n	8001526 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc06 	bl	8000d2c <HAL_GetTick>
 8001520:	1b40      	subs	r0, r0, r5
 8001522:	2864      	cmp	r0, #100	; 0x64
 8001524:	d8ea      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001526:	6833      	ldr	r3, [r6, #0]
 8001528:	0398      	lsls	r0, r3, #14
 800152a:	d4f7      	bmi.n	800151c <HAL_RCC_OscConfig+0x350>
 800152c:	e684      	b.n	8001238 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 800152e:	4b95      	ldr	r3, [pc, #596]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 8001530:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001532:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8001534:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001538:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800153a:	f7ff fbf7 	bl	8000d2c <HAL_GetTick>
 800153e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001540:	e004      	b.n	800154c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001542:	f7ff fbf3 	bl	8000d2c <HAL_GetTick>
 8001546:	1b40      	subs	r0, r0, r5
 8001548:	2802      	cmp	r0, #2
 800154a:	d8d7      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800154c:	6833      	ldr	r3, [r6, #0]
 800154e:	0498      	lsls	r0, r3, #18
 8001550:	d4f7      	bmi.n	8001542 <HAL_RCC_OscConfig+0x376>
 8001552:	e6cb      	b.n	80012ec <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8001554:	4b8b      	ldr	r3, [pc, #556]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 8001556:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001558:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800155a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800155e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001560:	f7ff fbe4 	bl	8000d2c <HAL_GetTick>
 8001564:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001566:	e004      	b.n	8001572 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001568:	f7ff fbe0 	bl	8000d2c <HAL_GetTick>
 800156c:	1b40      	subs	r0, r0, r5
 800156e:	2802      	cmp	r0, #2
 8001570:	d8c4      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001572:	6833      	ldr	r3, [r6, #0]
 8001574:	05df      	lsls	r7, r3, #23
 8001576:	d4f7      	bmi.n	8001568 <HAL_RCC_OscConfig+0x39c>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	e684      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4a81      	ldr	r2, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 800157e:	6921      	ldr	r1, [r4, #16]
 8001580:	6853      	ldr	r3, [r2, #4]
 8001582:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001586:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	e678      	b.n	8001282 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 8001592:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001594:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800159c:	f7ff fbc6 	bl	8000d2c <HAL_GetTick>
 80015a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a2:	e004      	b.n	80015ae <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbc2 	bl	8000d2c <HAL_GetTick>
 80015a8:	1b40      	subs	r0, r0, r5
 80015aa:	2802      	cmp	r0, #2
 80015ac:	d8a6      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	0758      	lsls	r0, r3, #29
 80015b2:	d4f7      	bmi.n	80015a4 <HAL_RCC_OscConfig+0x3d8>
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	e664      	b.n	8001282 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015b8:	0792      	lsls	r2, r2, #30
 80015ba:	f47f aef2 	bne.w	80013a2 <HAL_RCC_OscConfig+0x1d6>
 80015be:	e645      	b.n	800124c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
}
 80015c2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015c4:	4a6f      	ldr	r2, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 80015c6:	6a21      	ldr	r1, [r4, #32]
 80015c8:	68d3      	ldr	r3, [r2, #12]
 80015ca:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80015ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80015d2:	60d3      	str	r3, [r2, #12]
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	e656      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80015d8:	f7ff fba8 	bl	8000d2c <HAL_GetTick>
 80015dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015de:	e004      	b.n	80015ea <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fba4 	bl	8000d2c <HAL_GetTick>
 80015e4:	1b80      	subs	r0, r0, r6
 80015e6:	2802      	cmp	r0, #2
 80015e8:	d888      	bhi.n	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	0199      	lsls	r1, r3, #6
 80015ee:	d4f7      	bmi.n	80015e0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x5bc>)
 80015f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015f6:	4013      	ands	r3, r2
 80015f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015fa:	4964      	ldr	r1, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fc:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015fe:	4e61      	ldr	r6, [pc, #388]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001604:	62ab      	str	r3, [r5, #40]	; 0x28
 8001606:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8001608:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800160c:	3f01      	subs	r7, #1
 800160e:	1e50      	subs	r0, r2, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001614:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001618:	025b      	lsls	r3, r3, #9
 800161a:	0400      	lsls	r0, r0, #16
 800161c:	3a01      	subs	r2, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001624:	0612      	lsls	r2, r2, #24
 8001626:	4303      	orrs	r3, r0
 8001628:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800162c:	433b      	orrs	r3, r7
 800162e:	4313      	orrs	r3, r2
 8001630:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001632:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800163a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800163c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800163e:	4011      	ands	r1, r2
 8001640:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001644:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001646:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001648:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800164a:	f023 030c 	bic.w	r3, r3, #12
 800164e:	4313      	orrs	r3, r2
 8001650:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001652:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001654:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001656:	f023 0302 	bic.w	r3, r3, #2
 800165a:	4313      	orrs	r3, r2
 800165c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800165e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001666:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800166e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001676:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001684:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001686:	f7ff fb51 	bl	8000d2c <HAL_GetTick>
 800168a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800168c:	e005      	b.n	800169a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fb4d 	bl	8000d2c <HAL_GetTick>
 8001692:	1b00      	subs	r0, r0, r4
 8001694:	2802      	cmp	r0, #2
 8001696:	f63f af31 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800169a:	6833      	ldr	r3, [r6, #0]
 800169c:	019a      	lsls	r2, r3, #6
 800169e:	d5f6      	bpl.n	800168e <HAL_RCC_OscConfig+0x4c2>
 80016a0:	e646      	b.n	8001330 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80016a6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a8:	f43f ae43 	beq.w	8001332 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016b2:	428b      	cmp	r3, r1
 80016b4:	f47f aebf 	bne.w	8001436 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016be:	429a      	cmp	r2, r3
 80016c0:	f47f aeb9 	bne.w	8001436 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016c6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80016ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f47f aeb2 	bne.w	8001436 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016d4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80016d8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	f47f aeab 	bne.w	8001436 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016e2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80016e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f47f aea4 	bne.w	8001436 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80016f0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80016f4:	3801      	subs	r0, #1
  return HAL_OK;
 80016f6:	1a28      	subs	r0, r5, r0
 80016f8:	bf18      	it	ne
 80016fa:	2001      	movne	r0, #1
}
 80016fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e586      	b.n	800121c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 8001710:	6853      	ldr	r3, [r2, #4]
 8001712:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6053      	str	r3, [r2, #4]
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	e5b0      	b.n	8001282 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001728:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	671a      	str	r2, [r3, #112]	; 0x70
 8001730:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001738:	f7ff faf8 	bl	8000d2c <HAL_GetTick>
 800173c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800173e:	e005      	b.n	800174c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff faf4 	bl	8000d2c <HAL_GetTick>
 8001744:	1b40      	subs	r0, r0, r5
 8001746:	42b8      	cmp	r0, r7
 8001748:	f63f aed8 	bhi.w	80014fc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800174c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800174e:	0798      	lsls	r0, r3, #30
 8001750:	d4f6      	bmi.n	8001740 <HAL_RCC_OscConfig+0x574>
 8001752:	e5cf      	b.n	80012f4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001754:	68f3      	ldr	r3, [r6, #12]
 8001756:	6a22      	ldr	r2, [r4, #32]
 8001758:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800175c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001760:	60f3      	str	r3, [r6, #12]
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	e58f      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	6873      	ldr	r3, [r6, #4]
 8001768:	6922      	ldr	r2, [r4, #16]
 800176a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800176e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001772:	6073      	str	r3, [r6, #4]
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	e584      	b.n	8001282 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	4a02      	ldr	r2, [pc, #8]	; (8001784 <HAL_RCC_OscConfig+0x5b8>)
 800177a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001782:	e68e      	b.n	80014a2 <HAL_RCC_OscConfig+0x2d6>
 8001784:	58024400 	.word	0x58024400
 8001788:	fffffc0c 	.word	0xfffffc0c
 800178c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001790:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_RCC_OscConfig+0x5e8>)
 8001792:	6853      	ldr	r3, [r2, #4]
 8001794:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800179c:	6053      	str	r3, [r2, #4]
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	e571      	b.n	8001286 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	f042 0204 	orr.w	r2, r2, #4
 80017a6:	671a      	str	r2, [r3, #112]	; 0x70
 80017a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	671a      	str	r2, [r3, #112]	; 0x70
 80017b0:	e677      	b.n	80014a2 <HAL_RCC_OscConfig+0x2d6>
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400

080017b8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b8:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x120>)
 80017ba:	6913      	ldr	r3, [r2, #16]
 80017bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x16>
 80017c4:	2b18      	cmp	r3, #24
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80017c8:	b11b      	cbz	r3, 80017d2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80017ca:	4844      	ldr	r0, [pc, #272]	; (80018dc <HAL_RCC_GetSysClockFreq+0x124>)
 80017cc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ce:	4844      	ldr	r0, [pc, #272]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x128>)
 80017d0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	0699      	lsls	r1, r3, #26
 80017d6:	d54a      	bpl.n	800186e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80017d8:	6813      	ldr	r3, [r2, #0]
 80017da:	4842      	ldr	r0, [pc, #264]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80017dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80017e0:	40d8      	lsrs	r0, r3
 80017e2:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80017e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80017e6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80017e8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80017ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 80017ec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80017f0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017f4:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 80017f6:	d038      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017f8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80017fc:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001800:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001804:	fb01 f105 	mul.w	r1, r1, r5
 8001808:	2b01      	cmp	r3, #1
 800180a:	ee07 1a90 	vmov	s15, r1
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8001812:	d002      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x62>
 8001814:	2b02      	cmp	r3, #2
 8001816:	d02c      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0xba>
 8001818:	b393      	cbz	r3, 8001880 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800181a:	ee07 0a90 	vmov	s15, r0
 800181e:	eddf 6a32 	vldr	s13, [pc, #200]	; 80018e8 <HAL_RCC_GetSysClockFreq+0x130>
 8001822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001826:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001828:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800182c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80018ec <HAL_RCC_GetSysClockFreq+0x134>
 8001830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001834:	ee06 3a90 	vmov	s13, r3
 8001838:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800183c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001840:	ee76 6a85 	vadd.f32	s13, s13, s10
 8001844:	eee7 6a25 	vfma.f32	s13, s14, s11
 8001848:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x120>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001854:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001866:	ee17 0a90 	vmov	r0, s15
}
 800186a:	bc30      	pop	{r4, r5}
 800186c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800186e:	481d      	ldr	r0, [pc, #116]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8001870:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001872:	ee07 0a90 	vmov	s15, r0
 8001876:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80018f0 <HAL_RCC_GetSysClockFreq+0x138>
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	e7d2      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	069b      	lsls	r3, r3, #26
 8001884:	d520      	bpl.n	80018c8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001886:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001888:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800188e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001892:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800189c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800189e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80018ec <HAL_RCC_GetSysClockFreq+0x134>
 80018a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a6:	ee06 1a10 	vmov	s12, r1
 80018aa:	ee06 3a90 	vmov	s13, r3
 80018ae:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80018b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80018b6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80018ba:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80018be:	eee7 6a05 	vfma.f32	s13, s14, s10
 80018c2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80018c6:	e7c1      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018c8:	ee07 0a90 	vmov	s15, r0
 80018cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 80018f4 <HAL_RCC_GetSysClockFreq+0x13c>
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	e7a7      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x6e>
 80018d6:	bf00      	nop
 80018d8:	58024400 	.word	0x58024400
 80018dc:	003d0900 	.word	0x003d0900
 80018e0:	017d7840 	.word	0x017d7840
 80018e4:	03d09000 	.word	0x03d09000
 80018e8:	4a742400 	.word	0x4a742400
 80018ec:	39000000 	.word	0x39000000
 80018f0:	4bbebc20 	.word	0x4bbebc20
 80018f4:	4c742400 	.word	0x4c742400

080018f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80018f8:	2800      	cmp	r0, #0
 80018fa:	f000 810e 	beq.w	8001b1a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fe:	4a8d      	ldr	r2, [pc, #564]	; (8001b34 <HAL_RCC_ClockConfig+0x23c>)
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	428b      	cmp	r3, r1
{
 8001908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f023 030f 	bic.w	r3, r3, #15
 8001918:	430b      	orrs	r3, r1
 800191a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	428b      	cmp	r3, r1
 8001924:	d002      	beq.n	800192c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001926:	2001      	movs	r0, #1
}
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	075f      	lsls	r7, r3, #29
 8001930:	d50b      	bpl.n	800194a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001932:	4981      	ldr	r1, [pc, #516]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001934:	6920      	ldr	r0, [r4, #16]
 8001936:	698a      	ldr	r2, [r1, #24]
 8001938:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800193c:	4290      	cmp	r0, r2
 800193e:	d904      	bls.n	800194a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001940:	698a      	ldr	r2, [r1, #24]
 8001942:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001946:	4302      	orrs	r2, r0
 8001948:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194a:	071e      	lsls	r6, r3, #28
 800194c:	d50b      	bpl.n	8001966 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800194e:	497a      	ldr	r1, [pc, #488]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001950:	6960      	ldr	r0, [r4, #20]
 8001952:	69ca      	ldr	r2, [r1, #28]
 8001954:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001958:	4290      	cmp	r0, r2
 800195a:	d904      	bls.n	8001966 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800195c:	69ca      	ldr	r2, [r1, #28]
 800195e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001962:	4302      	orrs	r2, r0
 8001964:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	06d8      	lsls	r0, r3, #27
 8001968:	d50b      	bpl.n	8001982 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800196a:	4973      	ldr	r1, [pc, #460]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 800196c:	69a0      	ldr	r0, [r4, #24]
 800196e:	69ca      	ldr	r2, [r1, #28]
 8001970:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001974:	4290      	cmp	r0, r2
 8001976:	d904      	bls.n	8001982 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001978:	69ca      	ldr	r2, [r1, #28]
 800197a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800197e:	4302      	orrs	r2, r0
 8001980:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001982:	0699      	lsls	r1, r3, #26
 8001984:	d50b      	bpl.n	800199e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001986:	496c      	ldr	r1, [pc, #432]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001988:	69e0      	ldr	r0, [r4, #28]
 800198a:	6a0a      	ldr	r2, [r1, #32]
 800198c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001990:	4290      	cmp	r0, r2
 8001992:	d904      	bls.n	800199e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001994:	6a0a      	ldr	r2, [r1, #32]
 8001996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800199a:	4302      	orrs	r2, r0
 800199c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199e:	079a      	lsls	r2, r3, #30
 80019a0:	f140 80ad 	bpl.w	8001afe <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019a4:	4864      	ldr	r0, [pc, #400]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 80019a6:	68e1      	ldr	r1, [r4, #12]
 80019a8:	6982      	ldr	r2, [r0, #24]
 80019aa:	f002 020f 	and.w	r2, r2, #15
 80019ae:	4291      	cmp	r1, r2
 80019b0:	d904      	bls.n	80019bc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	6982      	ldr	r2, [r0, #24]
 80019b4:	f022 020f 	bic.w	r2, r2, #15
 80019b8:	430a      	orrs	r2, r1
 80019ba:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019bc:	07d8      	lsls	r0, r3, #31
 80019be:	d531      	bpl.n	8001a24 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019c0:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 80019c2:	68a1      	ldr	r1, [r4, #8]
 80019c4:	6993      	ldr	r3, [r2, #24]
 80019c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	2902      	cmp	r1, #2
 80019d4:	f000 80a3 	beq.w	8001b1e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d8:	2903      	cmp	r1, #3
 80019da:	f000 809a 	beq.w	8001b12 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019de:	2901      	cmp	r1, #1
 80019e0:	f000 80a3 	beq.w	8001b2a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e4:	0758      	lsls	r0, r3, #29
 80019e6:	d59e      	bpl.n	8001926 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e8:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	f023 0307 	bic.w	r3, r3, #7
 80019f6:	430b      	orrs	r3, r1
 80019f8:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 80019fa:	f7ff f997 	bl	8000d2c <HAL_GetTick>
 80019fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	e005      	b.n	8001a0e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f993 	bl	8000d2c <HAL_GetTick>
 8001a06:	1b80      	subs	r0, r0, r6
 8001a08:	4540      	cmp	r0, r8
 8001a0a:	f200 808c 	bhi.w	8001b26 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6862      	ldr	r2, [r4, #4]
 8001a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a16:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001a1a:	d1f2      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	0799      	lsls	r1, r3, #30
 8001a20:	d506      	bpl.n	8001a30 <HAL_RCC_ClockConfig+0x138>
 8001a22:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a24:	4844      	ldr	r0, [pc, #272]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001a26:	6982      	ldr	r2, [r0, #24]
 8001a28:	f002 020f 	and.w	r2, r2, #15
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d86a      	bhi.n	8001b06 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4940      	ldr	r1, [pc, #256]	; (8001b34 <HAL_RCC_ClockConfig+0x23c>)
 8001a32:	680a      	ldr	r2, [r1, #0]
 8001a34:	f002 020f 	and.w	r2, r2, #15
 8001a38:	42aa      	cmp	r2, r5
 8001a3a:	d90a      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3c:	680a      	ldr	r2, [r1, #0]
 8001a3e:	f022 020f 	bic.w	r2, r2, #15
 8001a42:	432a      	orrs	r2, r5
 8001a44:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	680a      	ldr	r2, [r1, #0]
 8001a48:	f002 020f 	and.w	r2, r2, #15
 8001a4c:	42aa      	cmp	r2, r5
 8001a4e:	f47f af6a 	bne.w	8001926 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a52:	075a      	lsls	r2, r3, #29
 8001a54:	d50b      	bpl.n	8001a6e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a56:	4938      	ldr	r1, [pc, #224]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	6920      	ldr	r0, [r4, #16]
 8001a5a:	698a      	ldr	r2, [r1, #24]
 8001a5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001a60:	4290      	cmp	r0, r2
 8001a62:	d204      	bcs.n	8001a6e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a64:	698a      	ldr	r2, [r1, #24]
 8001a66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a6a:	4302      	orrs	r2, r0
 8001a6c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6e:	071f      	lsls	r7, r3, #28
 8001a70:	d50b      	bpl.n	8001a8a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a72:	4931      	ldr	r1, [pc, #196]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001a74:	6960      	ldr	r0, [r4, #20]
 8001a76:	69ca      	ldr	r2, [r1, #28]
 8001a78:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001a7c:	4290      	cmp	r0, r2
 8001a7e:	d204      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a80:	69ca      	ldr	r2, [r1, #28]
 8001a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a86:	4302      	orrs	r2, r0
 8001a88:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	06de      	lsls	r6, r3, #27
 8001a8c:	d50b      	bpl.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a8e:	492a      	ldr	r1, [pc, #168]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001a90:	69a0      	ldr	r0, [r4, #24]
 8001a92:	69ca      	ldr	r2, [r1, #28]
 8001a94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d204      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a9c:	69ca      	ldr	r2, [r1, #28]
 8001a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001aa2:	4302      	orrs	r2, r0
 8001aa4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aa6:	069d      	lsls	r5, r3, #26
 8001aa8:	d50b      	bpl.n	8001ac2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001aac:	69e1      	ldr	r1, [r4, #28]
 8001aae:	6a13      	ldr	r3, [r2, #32]
 8001ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab4:	4299      	cmp	r1, r3
 8001ab6:	d204      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ab8:	6a13      	ldr	r3, [r2, #32]
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ac2:	f7ff fe79 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	4602      	mov	r2, r0
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <HAL_RCC_ClockConfig+0x244>)
 8001acc:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ace:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ad0:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8001ad4:	4d1a      	ldr	r5, [pc, #104]	; (8001b40 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4c1a      	ldr	r4, [pc, #104]	; (8001b44 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001adc:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ade:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae0:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001ae4:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ae6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8001aea:	4d17      	ldr	r5, [pc, #92]	; (8001b48 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aec:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8001af2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001af4:	6023      	str	r3, [r4, #0]
}
 8001af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001afa:	f7ff b8b5 	b.w	8000c68 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	07da      	lsls	r2, r3, #31
 8001b00:	f53f af5e 	bmi.w	80019c0 <HAL_RCC_ClockConfig+0xc8>
 8001b04:	e794      	b.n	8001a30 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b06:	6982      	ldr	r2, [r0, #24]
 8001b08:	f022 020f 	bic.w	r2, r2, #15
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	6181      	str	r1, [r0, #24]
 8001b10:	e78e      	b.n	8001a30 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b12:	019f      	lsls	r7, r3, #6
 8001b14:	f53f af68 	bmi.w	80019e8 <HAL_RCC_ClockConfig+0xf0>
 8001b18:	e705      	b.n	8001926 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
}
 8001b1c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1e:	039b      	lsls	r3, r3, #14
 8001b20:	f53f af62 	bmi.w	80019e8 <HAL_RCC_ClockConfig+0xf0>
 8001b24:	e6ff      	b.n	8001926 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
 8001b28:	e6fe      	b.n	8001928 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2a:	05de      	lsls	r6, r3, #23
 8001b2c:	f53f af5c 	bmi.w	80019e8 <HAL_RCC_ClockConfig+0xf0>
 8001b30:	e6f9      	b.n	8001926 <HAL_RCC_ClockConfig+0x2e>
 8001b32:	bf00      	nop
 8001b34:	52002000 	.word	0x52002000
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	0800cd24 	.word	0x0800cd24
 8001b40:	24000014 	.word	0x24000014
 8001b44:	2400000c 	.word	0x2400000c
 8001b48:	24000008 	.word	0x24000008

08001b4c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b50:	6913      	ldr	r3, [r2, #16]
 8001b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d01a      	beq.n	8001b90 <HAL_RCC_GetHCLKFreq+0x44>
 8001b5a:	2b18      	cmp	r3, #24
 8001b5c:	d023      	beq.n	8001ba6 <HAL_RCC_GetHCLKFreq+0x5a>
 8001b5e:	b1cb      	cbz	r3, 8001b94 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8001b60:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x64>)
 8001b64:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8001b66:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b68:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001b6a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b6e:	4c13      	ldr	r4, [pc, #76]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x70>)
 8001b70:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b74:	4d12      	ldr	r5, [pc, #72]	; (8001bc0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001b76:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001b7a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b7e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001b82:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b86:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8001b8a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x78>)
 8001b92:	e7e6      	b.n	8001b62 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b94:	6813      	ldr	r3, [r2, #0]
 8001b96:	069b      	lsls	r3, r3, #26
 8001b98:	d508      	bpl.n	8001bac <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8001b9e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001ba2:	40d0      	lsrs	r0, r2
 8001ba4:	e7dd      	b.n	8001b62 <HAL_RCC_GetHCLKFreq+0x16>
 8001ba6:	f7ff fa8d 	bl	80010c4 <HAL_RCC_GetSysClockFreq.part.0>
 8001baa:	e7da      	b.n	8001b62 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001bac:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8001bae:	e7d8      	b.n	8001b62 <HAL_RCC_GetHCLKFreq+0x16>
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	003d0900 	.word	0x003d0900
 8001bb8:	0800cd24 	.word	0x0800cd24
 8001bbc:	2400000c 	.word	0x2400000c
 8001bc0:	24000008 	.word	0x24000008
 8001bc4:	017d7840 	.word	0x017d7840
 8001bc8:	03d09000 	.word	0x03d09000

08001bcc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001bcc:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <RCCEx_PLL2_Config+0xf0>)
{
 8001bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001bd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d069      	beq.n	8001cae <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	4606      	mov	r6, r0
 8001bde:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001be0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8001be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001be6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001be8:	f7ff f8a0 	bl	8000d2c <HAL_GetTick>
 8001bec:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001bee:	e004      	b.n	8001bfa <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001bf0:	f7ff f89c 	bl	8000d2c <HAL_GetTick>
 8001bf4:	1b43      	subs	r3, r0, r5
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d857      	bhi.n	8001caa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	011a      	lsls	r2, r3, #4
 8001bfe:	d4f7      	bmi.n	8001bf0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c02:	6832      	ldr	r2, [r6, #0]
 8001c04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001c08:	492d      	ldr	r1, [pc, #180]	; (8001cc0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001c0a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001c0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c10:	6875      	ldr	r5, [r6, #4]
 8001c12:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001c16:	3d01      	subs	r5, #1
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6932      	ldr	r2, [r6, #16]
 8001c1e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	0400      	lsls	r0, r0, #16
 8001c26:	3a01      	subs	r2, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001c2e:	0612      	lsls	r2, r2, #24
 8001c30:	4303      	orrs	r3, r0
 8001c32:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001c36:	432b      	orrs	r3, r5
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c3e:	6972      	ldr	r2, [r6, #20]
 8001c40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c44:	4313      	orrs	r3, r2
 8001c46:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c4a:	69b2      	ldr	r2, [r6, #24]
 8001c4c:	f023 0320 	bic.w	r3, r3, #32
 8001c50:	4313      	orrs	r3, r2
 8001c52:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c56:	f023 0310 	bic.w	r3, r3, #16
 8001c5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c5e:	69f3      	ldr	r3, [r6, #28]
 8001c60:	4011      	ands	r1, r2
 8001c62:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001c66:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001c72:	b1f7      	cbz	r7, 8001cb2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001c74:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001c76:	bf0c      	ite	eq
 8001c78:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001c7c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001c80:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <RCCEx_PLL2_Config+0xf0>)
 8001c84:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001c86:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8001c88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c8c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c8e:	f7ff f84d 	bl	8000d2c <HAL_GetTick>
 8001c92:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001c94:	e004      	b.n	8001ca0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c96:	f7ff f849 	bl	8000d2c <HAL_GetTick>
 8001c9a:	1b00      	subs	r0, r0, r4
 8001c9c:	2802      	cmp	r0, #2
 8001c9e:	d804      	bhi.n	8001caa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	d5f7      	bpl.n	8001c96 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8001ca6:	2000      	movs	r0, #0
}
 8001ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
}
 8001cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cb8:	e7e3      	b.n	8001c82 <RCCEx_PLL2_Config+0xb6>
 8001cba:	bf00      	nop
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	ffff0007 	.word	0xffff0007

08001cc4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <RCCEx_PLL3_Config+0xf0>)
{
 8001cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001cc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d069      	beq.n	8001da6 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	4606      	mov	r6, r0
 8001cd6:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001cd8:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ce0:	f7ff f824 	bl	8000d2c <HAL_GetTick>
 8001ce4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001ce6:	e004      	b.n	8001cf2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001ce8:	f7ff f820 	bl	8000d2c <HAL_GetTick>
 8001cec:	1b43      	subs	r3, r0, r5
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d857      	bhi.n	8001da2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	009a      	lsls	r2, r3, #2
 8001cf6:	d4f7      	bmi.n	8001ce8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001cf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cfa:	6832      	ldr	r2, [r6, #0]
 8001cfc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001d00:	492d      	ldr	r1, [pc, #180]	; (8001db8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001d02:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001d06:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d08:	6875      	ldr	r5, [r6, #4]
 8001d0a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001d0e:	3d01      	subs	r5, #1
 8001d10:	1e50      	subs	r0, r2, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6932      	ldr	r2, [r6, #16]
 8001d16:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	0400      	lsls	r0, r0, #16
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001d26:	0612      	lsls	r2, r2, #24
 8001d28:	4303      	orrs	r3, r0
 8001d2a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001d2e:	432b      	orrs	r3, r5
 8001d30:	4313      	orrs	r3, r2
 8001d32:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001d34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d36:	6972      	ldr	r2, [r6, #20]
 8001d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d42:	69b2      	ldr	r2, [r6, #24]
 8001d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d52:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001d54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d56:	69f3      	ldr	r3, [r6, #28]
 8001d58:	4011      	ands	r1, r2
 8001d5a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001d5e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001d6a:	b1f7      	cbz	r7, 8001daa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001d6c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001d6e:	bf0c      	ite	eq
 8001d70:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001d74:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001d78:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <RCCEx_PLL3_Config+0xf0>)
 8001d7c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001d7e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8001d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d86:	f7fe ffd1 	bl	8000d2c <HAL_GetTick>
 8001d8a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001d8c:	e004      	b.n	8001d98 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001d8e:	f7fe ffcd 	bl	8000d2c <HAL_GetTick>
 8001d92:	1b00      	subs	r0, r0, r4
 8001d94:	2802      	cmp	r0, #2
 8001d96:	d804      	bhi.n	8001da2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	d5f7      	bpl.n	8001d8e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8001d9e:	2000      	movs	r0, #0
}
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
}
 8001da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001da6:	2001      	movs	r0, #1
}
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001db0:	e7e3      	b.n	8001d7a <RCCEx_PLL3_Config+0xb6>
 8001db2:	bf00      	nop
 8001db4:	58024400 	.word	0x58024400
 8001db8:	ffff0007 	.word	0xffff0007

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
{
 8001dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc0:	6803      	ldr	r3, [r0, #0]
{
 8001dc2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8001dc8:	d01c      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001dca:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001dcc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001dd0:	f000 84ba 	beq.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8001dd4:	d823      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	f000 83dc 	beq.w	8002594 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8001ddc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001de0:	d120      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001de2:	2102      	movs	r1, #2
 8001de4:	3004      	adds	r0, #4
 8001de6:	f7ff fef1 	bl	8001bcc <RCCEx_PLL2_Config>
 8001dea:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001dec:	2e00      	cmp	r6, #0
 8001dee:	f040 849f 	bne.w	8002730 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8001df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001df4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001df6:	48ab      	ldr	r0, [pc, #684]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001df8:	2600      	movs	r6, #0
 8001dfa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001dfc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8001e00:	430a      	orrs	r2, r1
 8001e02:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e04:	05dd      	lsls	r5, r3, #23
 8001e06:	d511      	bpl.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e08:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e0a:	2a04      	cmp	r2, #4
 8001e0c:	f200 851c 	bhi.w	8002848 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8001e10:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001e14:	0476046f 	.word	0x0476046f
 8001e18:	02d40486 	.word	0x02d40486
 8001e1c:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e1e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001e22:	d0e8      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e24:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e26:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e2a:	d4ed      	bmi.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001e2e:	0598      	lsls	r0, r3, #22
 8001e30:	d51b      	bpl.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001e32:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e34:	2a80      	cmp	r2, #128	; 0x80
 8001e36:	f000 8453 	beq.w	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8001e3a:	f200 80ec 	bhi.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	f000 83a2 	beq.w	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8001e44:	2a40      	cmp	r2, #64	; 0x40
 8001e46:	f040 80ed 	bne.w	8002024 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	1d20      	adds	r0, r4, #4
 8001e4e:	f7ff febd 	bl	8001bcc <RCCEx_PLL2_Config>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	f040 8386 	bne.w	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001e5c:	4991      	ldr	r1, [pc, #580]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e60:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001e62:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8001e66:	4302      	orrs	r2, r0
 8001e68:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001e6a:	0559      	lsls	r1, r3, #21
 8001e6c:	d51f      	bpl.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001e6e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8001e72:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001e76:	f000 844a 	beq.w	800270e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8001e7a:	f200 80d6 	bhi.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	f000 837c 	beq.w	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8001e84:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001e88:	f040 80d7 	bne.w	800203a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	1d20      	adds	r0, r4, #4
 8001e90:	f7ff fe9c 	bl	8001bcc <RCCEx_PLL2_Config>
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e98:	2d00      	cmp	r5, #0
 8001e9a:	f040 8367 	bne.w	800256c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001e9e:	4981      	ldr	r1, [pc, #516]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ea0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8001ea4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001ea6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001eae:	051a      	lsls	r2, r3, #20
 8001eb0:	d51f      	bpl.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001eb2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8001eb6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001eba:	f000 843c 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8001ebe:	f200 80bf 	bhi.w	8002040 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	f000 836c 	beq.w	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8001ec8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001ecc:	f040 80c0 	bne.w	8002050 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	1d20      	adds	r0, r4, #4
 8001ed4:	f7ff fe7a 	bl	8001bcc <RCCEx_PLL2_Config>
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	f040 833f 	bne.w	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001ee2:	4970      	ldr	r1, [pc, #448]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ee4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8001ee8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001eea:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001ef2:	019f      	lsls	r7, r3, #6
 8001ef4:	d518      	bpl.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8001ef6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ef8:	2a20      	cmp	r2, #32
 8001efa:	f000 8392 	beq.w	8002622 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8001efe:	f200 80aa 	bhi.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8001f02:	b13a      	cbz	r2, 8001f14 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001f04:	2a10      	cmp	r2, #16
 8001f06:	f040 80a9 	bne.w	800205c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f0a:	4966      	ldr	r1, [pc, #408]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f0c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001f0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f12:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	f040 8366 	bne.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001f1a:	4962      	ldr	r1, [pc, #392]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f1e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001f20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001f24:	4302      	orrs	r2, r0
 8001f26:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001f28:	04d8      	lsls	r0, r3, #19
 8001f2a:	d51d      	bpl.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001f2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f32:	f000 83cd 	beq.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8001f36:	f200 8094 	bhi.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	f000 8318 	beq.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8001f40:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f44:	f040 8095 	bne.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	1d20      	adds	r0, r4, #4
 8001f4c:	f7ff fe3e 	bl	8001bcc <RCCEx_PLL2_Config>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001f54:	2d00      	cmp	r5, #0
 8001f56:	f040 8305 	bne.w	8002564 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001f5a:	4952      	ldr	r1, [pc, #328]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f5c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001f5e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001f60:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f64:	4302      	orrs	r2, r0
 8001f66:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001f68:	0499      	lsls	r1, r3, #18
 8001f6a:	d51a      	bpl.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001f6c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f6e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001f72:	f000 8398 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8001f76:	d87f      	bhi.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8001f78:	b14a      	cbz	r2, 8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8001f7a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001f7e:	f040 8083 	bne.w	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f82:	2101      	movs	r1, #1
 8001f84:	1d20      	adds	r0, r4, #4
 8001f86:	f7ff fe21 	bl	8001bcc <RCCEx_PLL2_Config>
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	f040 832b 	bne.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001f94:	4943      	ldr	r1, [pc, #268]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f96:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f98:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001f9a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001f9e:	4302      	orrs	r2, r0
 8001fa0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001fa2:	045a      	lsls	r2, r3, #17
 8001fa4:	d51b      	bpl.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001fa6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8001faa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001fae:	f000 834a 	beq.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8001fb2:	d86c      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8001fb4:	b142      	cbz	r2, 8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8001fb6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001fba:	d170      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	1d20      	adds	r0, r4, #4
 8001fc0:	f7ff fe04 	bl	8001bcc <RCCEx_PLL2_Config>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	f040 8302 	bne.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001fce:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fd0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8001fd4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8001fd6:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8001fda:	4302      	orrs	r2, r0
 8001fdc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fde:	041f      	lsls	r7, r3, #16
 8001fe0:	d50d      	bpl.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 8001fe2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001fe4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001fe8:	f000 834b 	beq.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8001fec:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001ff0:	f000 81f0 	beq.w	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	f000 81f3 	beq.w	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8001ffa:	2601      	movs	r6, #1
 8001ffc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001ffe:	01d8      	lsls	r0, r3, #7
 8002000:	d55c      	bpl.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8002002:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002004:	2a03      	cmp	r2, #3
 8002006:	f200 8425 	bhi.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 800200a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800200e:	0053      	.short	0x0053
 8002010:	004d0313 	.word	0x004d0313
 8002014:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 8002016:	2ac0      	cmp	r2, #192	; 0xc0
 8002018:	f43f af1d 	beq.w	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800201c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002020:	f43f af19 	beq.w	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002024:	2601      	movs	r6, #1
 8002026:	4635      	mov	r5, r6
 8002028:	e71f      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800202a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800202e:	f43f af33 	beq.w	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002032:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002036:	f43f af2f 	beq.w	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800203a:	2601      	movs	r6, #1
 800203c:	4635      	mov	r5, r6
 800203e:	e736      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002040:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8002044:	f43f af4a 	beq.w	8001edc <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002048:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800204c:	f43f af46 	beq.w	8001edc <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002050:	2601      	movs	r6, #1
 8002052:	4635      	mov	r5, r6
 8002054:	e74d      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8002056:	2a30      	cmp	r2, #48	; 0x30
 8002058:	f43f af5c 	beq.w	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800205c:	2601      	movs	r6, #1
 800205e:	4635      	mov	r5, r6
 8002060:	e762      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002062:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002066:	f43f af75 	beq.w	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800206a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800206e:	f43f af71 	beq.w	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002072:	2601      	movs	r6, #1
 8002074:	4635      	mov	r5, r6
 8002076:	e777      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002078:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800207c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002080:	d085      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002082:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002086:	d082      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002088:	2601      	movs	r6, #1
 800208a:	4635      	mov	r5, r6
 800208c:	e789      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800208e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8002092:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8002096:	d097      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002098:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800209c:	d094      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800209e:	2601      	movs	r6, #1
 80020a0:	4635      	mov	r5, r6
 80020a2:	e79c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x222>
 80020a4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80020a8:	2102      	movs	r1, #2
 80020aa:	1d20      	adds	r0, r4, #4
 80020ac:	f7ff fd8e 	bl	8001bcc <RCCEx_PLL2_Config>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	f000 828e 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80020ba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020bc:	0259      	lsls	r1, r3, #9
 80020be:	f100 8208 	bmi.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80020c2:	07df      	lsls	r7, r3, #31
 80020c4:	d539      	bpl.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80020c6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80020c8:	2a28      	cmp	r2, #40	; 0x28
 80020ca:	f200 8174 	bhi.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80020ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80020d2:	0030      	.short	0x0030
 80020d4:	01720172 	.word	0x01720172
 80020d8:	01720172 	.word	0x01720172
 80020dc:	01720172 	.word	0x01720172
 80020e0:	03580172 	.word	0x03580172
 80020e4:	01720172 	.word	0x01720172
 80020e8:	01720172 	.word	0x01720172
 80020ec:	01720172 	.word	0x01720172
 80020f0:	00290172 	.word	0x00290172
 80020f4:	01720172 	.word	0x01720172
 80020f8:	01720172 	.word	0x01720172
 80020fc:	01720172 	.word	0x01720172
 8002100:	00300172 	.word	0x00300172
 8002104:	01720172 	.word	0x01720172
 8002108:	01720172 	.word	0x01720172
 800210c:	01720172 	.word	0x01720172
 8002110:	00300172 	.word	0x00300172
 8002114:	01720172 	.word	0x01720172
 8002118:	01720172 	.word	0x01720172
 800211c:	01720172 	.word	0x01720172
 8002120:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002124:	2101      	movs	r1, #1
 8002126:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800212a:	f7ff fdcb 	bl	8001cc4 <RCCEx_PLL3_Config>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002132:	2d00      	cmp	r5, #0
 8002134:	f000 826b 	beq.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002138:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800213a:	0798      	lsls	r0, r3, #30
 800213c:	d516      	bpl.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800213e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002140:	2a05      	cmp	r2, #5
 8002142:	f200 8384 	bhi.w	800284e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8002146:	e8df f012 	tbh	[pc, r2, lsl #1]
 800214a:	000d      	.short	0x000d
 800214c:	00060308 	.word	0x00060308
 8002150:	000d000d 	.word	0x000d000d
 8002154:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002156:	2101      	movs	r1, #1
 8002158:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800215c:	f7ff fdb2 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002164:	2d00      	cmp	r5, #0
 8002166:	f000 822c 	beq.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800216a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800216c:	0759      	lsls	r1, r3, #29
 800216e:	d517      	bpl.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002170:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002174:	2a05      	cmp	r2, #5
 8002176:	f200 8370 	bhi.w	800285a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 800217a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800217e:	000d      	.short	0x000d
 8002180:	000602f8 	.word	0x000602f8
 8002184:	000d000d 	.word	0x000d000d
 8002188:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800218a:	2101      	movs	r1, #1
 800218c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002190:	f7ff fd98 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002198:	2d00      	cmp	r5, #0
 800219a:	f000 8209 	beq.w	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800219e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021a0:	069a      	lsls	r2, r3, #26
 80021a2:	d51d      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80021a4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80021a8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80021ac:	f000 8271 	beq.w	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80021b0:	f200 8121 	bhi.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 80021b4:	b14a      	cbz	r2, 80021ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80021b6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80021ba:	f040 8126 	bne.w	800240a <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021be:	2100      	movs	r1, #0
 80021c0:	1d20      	adds	r0, r4, #4
 80021c2:	f7ff fd03 	bl	8001bcc <RCCEx_PLL2_Config>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021ca:	2d00      	cmp	r5, #0
 80021cc:	f040 8213 	bne.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d0:	49b9      	ldr	r1, [pc, #740]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80021d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80021d6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021d8:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80021dc:	4302      	orrs	r2, r0
 80021de:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80021e0:	065f      	lsls	r7, r3, #25
 80021e2:	d51d      	bpl.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80021e4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80021e8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80021ec:	f000 823f 	beq.w	800266e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80021f0:	f200 8129 	bhi.w	8002446 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80021f4:	b14a      	cbz	r2, 800220a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80021f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80021fa:	f040 812e 	bne.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021fe:	2100      	movs	r1, #0
 8002200:	1d20      	adds	r0, r4, #4
 8002202:	f7ff fce3 	bl	8001bcc <RCCEx_PLL2_Config>
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800220a:	2d00      	cmp	r5, #0
 800220c:	f040 81ef 	bne.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002210:	49a9      	ldr	r1, [pc, #676]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002212:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002216:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002218:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800221c:	4302      	orrs	r2, r0
 800221e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002220:	0618      	lsls	r0, r3, #24
 8002222:	d51d      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002224:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8002228:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800222c:	f000 8215 	beq.w	800265a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8002230:	f200 80fc 	bhi.w	800242c <HAL_RCCEx_PeriphCLKConfig+0x670>
 8002234:	b14a      	cbz	r2, 800224a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002236:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800223a:	f040 8101 	bne.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800223e:	2100      	movs	r1, #0
 8002240:	1d20      	adds	r0, r4, #4
 8002242:	f7ff fcc3 	bl	8001bcc <RCCEx_PLL2_Config>
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800224a:	2d00      	cmp	r5, #0
 800224c:	f040 81d1 	bne.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002250:	4999      	ldr	r1, [pc, #612]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002252:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8002256:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002258:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800225c:	4302      	orrs	r2, r0
 800225e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002260:	0719      	lsls	r1, r3, #28
 8002262:	d50b      	bpl.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002264:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002268:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800226c:	f000 8225 	beq.w	80026ba <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002270:	4891      	ldr	r0, [pc, #580]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002272:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002274:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002278:	430a      	orrs	r2, r1
 800227a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800227c:	06da      	lsls	r2, r3, #27
 800227e:	d50b      	bpl.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002280:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002284:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002288:	f000 82b2 	beq.w	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800228c:	488a      	ldr	r0, [pc, #552]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800228e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002290:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002294:	430a      	orrs	r2, r1
 8002296:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002298:	031f      	lsls	r7, r3, #12
 800229a:	d50e      	bpl.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 800229c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80022a0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80022a4:	f000 80f2 	beq.w	800248c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80022a8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80022ac:	f000 80f5 	beq.w	800249a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80022b0:	2900      	cmp	r1, #0
 80022b2:	f000 828b 	beq.w	80027cc <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80022b6:	2601      	movs	r6, #1
 80022b8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ba:	0358      	lsls	r0, r3, #13
 80022bc:	d50f      	bpl.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 80022be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80022c2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80022c6:	f000 80cb 	beq.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80022ca:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80022ce:	f000 80ce 	beq.w	800246e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80022d2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80022d6:	f000 8282 	beq.w	80027de <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80022da:	2601      	movs	r6, #1
 80022dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80022de:	03d9      	lsls	r1, r3, #15
 80022e0:	d517      	bpl.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 80022e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	f000 825f 	beq.w	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80022ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80022ee:	f040 8132 	bne.w	8002556 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022f2:	2102      	movs	r1, #2
 80022f4:	1d20      	adds	r0, r4, #4
 80022f6:	f7ff fc69 	bl	8001bcc <RCCEx_PLL2_Config>
 80022fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	2d00      	cmp	r5, #0
 8002300:	f040 818d 	bne.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002304:	496c      	ldr	r1, [pc, #432]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002306:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002308:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800230a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800230e:	4302      	orrs	r2, r0
 8002310:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	f100 80d2 	bmi.w	80024bc <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002318:	039f      	lsls	r7, r3, #14
 800231a:	d43f      	bmi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800231c:	1e30      	subs	r0, r6, #0
 800231e:	bf18      	it	ne
 8002320:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002322:	02de      	lsls	r6, r3, #11
 8002324:	d506      	bpl.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002326:	4964      	ldr	r1, [pc, #400]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002328:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800232a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800232c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002330:	432a      	orrs	r2, r5
 8002332:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002334:	00dd      	lsls	r5, r3, #3
 8002336:	d507      	bpl.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002338:	495f      	ldr	r1, [pc, #380]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800233a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800233e:	690a      	ldr	r2, [r1, #16]
 8002340:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002344:	432a      	orrs	r2, r5
 8002346:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002348:	0299      	lsls	r1, r3, #10
 800234a:	d506      	bpl.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800234c:	495a      	ldr	r1, [pc, #360]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800234e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002350:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002352:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002356:	432a      	orrs	r2, r5
 8002358:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800235a:	005a      	lsls	r2, r3, #1
 800235c:	d509      	bpl.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800235e:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002360:	6911      	ldr	r1, [r2, #16]
 8002362:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002366:	6111      	str	r1, [r2, #16]
 8002368:	6911      	ldr	r1, [r2, #16]
 800236a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800236e:	4329      	orrs	r1, r5
 8002370:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002372:	2b00      	cmp	r3, #0
 8002374:	da06      	bge.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002376:	4950      	ldr	r1, [pc, #320]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002378:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800237a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002380:	432a      	orrs	r2, r5
 8002382:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	d507      	bpl.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800238a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800238e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002390:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002394:	430b      	orrs	r3, r1
 8002396:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800239c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800239e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80023a2:	f000 820a 	beq.w	80027ba <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80023a6:	d933      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80023a8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80023ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80023b0:	d030      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80023b2:	2001      	movs	r0, #1
 80023b4:	e7b5      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 80023b6:	2601      	movs	r6, #1
 80023b8:	4635      	mov	r5, r6
 80023ba:	e6be      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80023bc:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80023be:	2d00      	cmp	r5, #0
 80023c0:	f040 80cc 	bne.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c4:	493c      	ldr	r1, [pc, #240]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80023c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023c8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80023ca:	f022 0207 	bic.w	r2, r2, #7
 80023ce:	4302      	orrs	r2, r0
 80023d0:	650a      	str	r2, [r1, #80]	; 0x50
 80023d2:	e52c      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023d4:	2101      	movs	r1, #1
 80023d6:	1d20      	adds	r0, r4, #4
 80023d8:	f7ff fbf8 	bl	8001bcc <RCCEx_PLL2_Config>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	f040 80e3 	bne.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023e6:	4934      	ldr	r1, [pc, #208]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80023e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80023ea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80023ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f0:	4302      	orrs	r2, r0
 80023f2:	650a      	str	r2, [r1, #80]	; 0x50
 80023f4:	e603      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80023f6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80023fa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80023fe:	f43f aee4 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002402:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8002406:	f43f aee0 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800240a:	2601      	movs	r6, #1
 800240c:	4635      	mov	r5, r6
 800240e:	e6e7      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 8002410:	2a00      	cmp	r2, #0
 8002412:	d1ce      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 8002414:	2d00      	cmp	r5, #0
 8002416:	d1cc      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002418:	4d27      	ldr	r5, [pc, #156]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800241a:	1e30      	subs	r0, r6, #0
 800241c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800241e:	bf18      	it	ne
 8002420:	2001      	movne	r0, #1
 8002422:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002426:	430a      	orrs	r2, r1
 8002428:	656a      	str	r2, [r5, #84]	; 0x54
 800242a:	e77a      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800242c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002430:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002434:	f43f af09 	beq.w	800224a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002438:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800243c:	f43f af05 	beq.w	800224a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002440:	2601      	movs	r6, #1
 8002442:	4635      	mov	r5, r6
 8002444:	e70c      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002446:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800244a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800244e:	f43f aedc 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002452:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002456:	f43f aed8 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800245a:	2601      	movs	r6, #1
 800245c:	4635      	mov	r5, r6
 800245e:	e6df      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002460:	2101      	movs	r1, #1
 8002462:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002466:	f7ff fc2d 	bl	8001cc4 <RCCEx_PLL3_Config>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800246e:	2d00      	cmp	r5, #0
 8002470:	f040 80c8 	bne.w	8002604 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002474:	4910      	ldr	r1, [pc, #64]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002476:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800247a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800247c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002480:	4302      	orrs	r2, r0
 8002482:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002484:	03d9      	lsls	r1, r3, #15
 8002486:	f57f af44 	bpl.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800248a:	e72a      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800248c:	2102      	movs	r1, #2
 800248e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002492:	f7ff fc17 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800249a:	2d00      	cmp	r5, #0
 800249c:	f040 80ad 	bne.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a0:	4905      	ldr	r1, [pc, #20]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80024a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80024a6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80024a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80024ac:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024ae:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024b0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024b2:	f57f af14 	bpl.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x522>
 80024b6:	e702      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x502>
 80024b8:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80024bc:	2102      	movs	r1, #2
 80024be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024c2:	f7ff fbff 	bl	8001cc4 <RCCEx_PLL3_Config>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	2800      	cmp	r0, #0
 80024ca:	f43f af25 	beq.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 80024ce:	2601      	movs	r6, #1
 80024d0:	e722      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d2:	4bb3      	ldr	r3, [pc, #716]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80024d4:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d6:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80024de:	f7fe fc25 	bl	8000d2c <HAL_GetTick>
 80024e2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e4:	e005      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fc21 	bl	8000d2c <HAL_GetTick>
 80024ea:	1bc0      	subs	r0, r0, r7
 80024ec:	2864      	cmp	r0, #100	; 0x64
 80024ee:	f200 8152 	bhi.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f2:	f8d8 3000 	ldr.w	r3, [r8]
 80024f6:	05da      	lsls	r2, r3, #23
 80024f8:	d5f5      	bpl.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	f040 81a1 	bne.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002500:	4aa8      	ldr	r2, [pc, #672]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002502:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002506:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002508:	4059      	eors	r1, r3
 800250a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800250e:	d00b      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002510:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002514:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002518:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800251c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800251e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002520:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002524:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002526:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252c:	f000 816b 	beq.w	8002806 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002530:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002534:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002538:	f000 8179 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800253c:	4999      	ldr	r1, [pc, #612]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800253e:	690a      	ldr	r2, [r1, #16]
 8002540:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002544:	610a      	str	r2, [r1, #16]
 8002546:	4a97      	ldr	r2, [pc, #604]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800254e:	430b      	orrs	r3, r1
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	e5b5      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002556:	2601      	movs	r6, #1
 8002558:	4635      	mov	r5, r6
 800255a:	e6da      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800255c:	462e      	mov	r6, r5
 800255e:	e466      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002560:	462e      	mov	r6, r5
 8002562:	e4c6      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002564:	462e      	mov	r6, r5
 8002566:	e4ff      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002568:	462e      	mov	r6, r5
 800256a:	e47e      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800256c:	462e      	mov	r6, r5
 800256e:	e49e      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002570:	498c      	ldr	r1, [pc, #560]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002572:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002578:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800257a:	e4eb      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800257c:	4989      	ldr	r1, [pc, #548]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800257e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002580:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002584:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002586:	e487      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002588:	4986      	ldr	r1, [pc, #536]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800258a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800258c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002590:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002592:	e460      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4883      	ldr	r0, [pc, #524]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002596:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002598:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800259c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800259e:	e42a      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a0:	4980      	ldr	r1, [pc, #512]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80025a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80025a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025a8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80025aa:	e497      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x120>
 80025ac:	462e      	mov	r6, r5
 80025ae:	e526      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b0:	497c      	ldr	r1, [pc, #496]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80025b2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80025b6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80025b8:	f022 0207 	bic.w	r2, r2, #7
 80025bc:	4302      	orrs	r2, r0
 80025be:	658a      	str	r2, [r1, #88]	; 0x58
 80025c0:	e5ee      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80025c2:	4978      	ldr	r1, [pc, #480]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80025c4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80025c6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80025c8:	f022 0207 	bic.w	r2, r2, #7
 80025cc:	4302      	orrs	r2, r0
 80025ce:	654a      	str	r2, [r1, #84]	; 0x54
 80025d0:	e5cc      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80025d2:	462e      	mov	r6, r5
 80025d4:	e503      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80025d6:	4973      	ldr	r1, [pc, #460]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80025d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025da:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80025dc:	f022 0203 	bic.w	r2, r2, #3
 80025e0:	4302      	orrs	r2, r0
 80025e2:	64ca      	str	r2, [r1, #76]	; 0x4c
 80025e4:	e56a      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80025e6:	462e      	mov	r6, r5
 80025e8:	e49e      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025ea:	462e      	mov	r6, r5
 80025ec:	e4d9      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 80025ee:	462e      	mov	r6, r5
 80025f0:	e616      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80025f2:	462e      	mov	r6, r5
 80025f4:	e634      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80025f6:	462e      	mov	r6, r5
 80025f8:	e5f2      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025fa:	0358      	lsls	r0, r3, #13
 80025fc:	462e      	mov	r6, r5
 80025fe:	f57f ae6e 	bpl.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002602:	e65c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002604:	03d9      	lsls	r1, r3, #15
 8002606:	462e      	mov	r6, r5
 8002608:	f57f ae83 	bpl.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800260c:	e669      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800260e:	4965      	ldr	r1, [pc, #404]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002610:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002612:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002614:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002618:	4302      	orrs	r2, r0
 800261a:	654a      	str	r2, [r1, #84]	; 0x54
 800261c:	e58d      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800261e:	462e      	mov	r6, r5
 8002620:	e677      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002622:	2102      	movs	r1, #2
 8002624:	1d20      	adds	r0, r4, #4
 8002626:	f7ff fad1 	bl	8001bcc <RCCEx_PLL2_Config>
 800262a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	2d00      	cmp	r5, #0
 8002630:	d1d9      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8002632:	e472      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002634:	495b      	ldr	r1, [pc, #364]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002636:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002638:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800263c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800263e:	2d00      	cmp	r5, #0
 8002640:	f47f ad3b 	bne.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002644:	e7c7      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002646:	2101      	movs	r1, #1
 8002648:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800264c:	f7ff fb3a 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002650:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	2d00      	cmp	r5, #0
 8002656:	d1bc      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002658:	e4b9      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800265a:	2102      	movs	r1, #2
 800265c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002660:	f7ff fb30 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002664:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	2d00      	cmp	r5, #0
 800266a:	d1c2      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800266c:	e5f0      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800266e:	2102      	movs	r1, #2
 8002670:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002674:	f7ff fb26 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002678:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	2d00      	cmp	r5, #0
 800267e:	d1b6      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x832>
 8002680:	e5c6      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002682:	4948      	ldr	r1, [pc, #288]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002684:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002686:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800268a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800268c:	2d00      	cmp	r5, #0
 800268e:	d18d      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8002690:	e6a9      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002692:	2102      	movs	r1, #2
 8002694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002698:	f7ff fb14 	bl	8001cc4 <RCCEx_PLL3_Config>
 800269c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	2d00      	cmp	r5, #0
 80026a2:	d1a8      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80026a4:	e594      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026a6:	2101      	movs	r1, #1
 80026a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026ac:	f7ff fb0a 	bl	8001cc4 <RCCEx_PLL3_Config>
 80026b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	d198      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80026b8:	e46c      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80026ba:	2102      	movs	r1, #2
 80026bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026c0:	f7ff fb00 	bl	8001cc4 <RCCEx_PLL3_Config>
 80026c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026c8:	b100      	cbz	r0, 80026cc <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 80026ca:	2601      	movs	r6, #1
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	e5cf      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026d0:	2100      	movs	r1, #0
 80026d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026d6:	f7ff faf5 	bl	8001cc4 <RCCEx_PLL3_Config>
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	4605      	mov	r5, r0
      break;
 80026de:	e439      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026e0:	2100      	movs	r1, #0
 80026e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026e6:	f7ff faed 	bl	8001cc4 <RCCEx_PLL3_Config>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	4605      	mov	r5, r0
      break;
 80026ee:	f7ff bbb2 	b.w	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f2:	492c      	ldr	r1, [pc, #176]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 80026f4:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80026f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026fc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80026fe:	e65e      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002700:	2100      	movs	r1, #0
 8002702:	1d20      	adds	r0, r4, #4
 8002704:	f7ff fa62 	bl	8001bcc <RCCEx_PLL2_Config>
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	4605      	mov	r5, r0
      break;
 800270c:	e657      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800270e:	2100      	movs	r1, #0
 8002710:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002714:	f7ff fad6 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	4605      	mov	r5, r0
      break;
 800271c:	f7ff bbbc 	b.w	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002720:	2100      	movs	r1, #0
 8002722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002726:	f7ff facd 	bl	8001cc4 <RCCEx_PLL3_Config>
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	4605      	mov	r5, r0
      break;
 800272e:	e646      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x602>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f7ff bb67 	b.w	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002736:	2100      	movs	r1, #0
 8002738:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800273c:	f7ff fac2 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	4605      	mov	r5, r0
      break;
 8002744:	f7ff bbca 	b.w	8001edc <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002748:	2102      	movs	r1, #2
 800274a:	3024      	adds	r0, #36	; 0x24
 800274c:	f7ff faba 	bl	8001cc4 <RCCEx_PLL3_Config>
 8002750:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002752:	2e00      	cmp	r6, #0
 8002754:	f43f ab4d 	beq.w	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8002758:	e7ea      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800275a:	2101      	movs	r1, #1
 800275c:	1d20      	adds	r0, r4, #4
 800275e:	f7ff fa35 	bl	8001bcc <RCCEx_PLL2_Config>
 8002762:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	2d00      	cmp	r5, #0
 8002768:	f47f acff 	bne.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800276c:	e729      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800276e:	2101      	movs	r1, #1
 8002770:	1d20      	adds	r0, r4, #4
 8002772:	f7ff fa2b 	bl	8001bcc <RCCEx_PLL2_Config>
 8002776:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	2d00      	cmp	r5, #0
 800277c:	f47f ad0f 	bne.w	800219e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002780:	e716      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002782:	2101      	movs	r1, #1
 8002784:	1d20      	adds	r0, r4, #4
 8002786:	f7ff fa21 	bl	8001bcc <RCCEx_PLL2_Config>
 800278a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	2d00      	cmp	r5, #0
 8002790:	f47f acd2 	bne.w	8002138 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002794:	e73b      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 8002796:	2603      	movs	r6, #3
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	4635      	mov	r5, r6
 800279c:	e491      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800279e:	bf00      	nop
 80027a0:	58024800 	.word	0x58024800
 80027a4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a8:	492d      	ldr	r1, [pc, #180]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80027aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027b0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80027b2:	2d00      	cmp	r5, #0
 80027b4:	f47f af33 	bne.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x862>
 80027b8:	e5a4      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ba:	4829      	ldr	r0, [pc, #164]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80027bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80027be:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80027c2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80027c4:	2d00      	cmp	r5, #0
 80027c6:	f47f adf4 	bne.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80027ca:	e625      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027cc:	1d20      	adds	r0, r4, #4
 80027ce:	f7ff f9fd 	bl	8001bcc <RCCEx_PLL2_Config>
 80027d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	f47f af0f 	bne.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80027dc:	e660      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027de:	4920      	ldr	r1, [pc, #128]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80027e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027e6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80027e8:	2d00      	cmp	r5, #0
 80027ea:	f47f af0b 	bne.w	8002604 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80027ee:	e641      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80027f0:	2102      	movs	r1, #2
 80027f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027f6:	f7ff fa65 	bl	8001cc4 <RCCEx_PLL3_Config>
 80027fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80027fe:	b100      	cbz	r0, 8002802 <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 8002800:	2601      	movs	r6, #1
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	e542      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 8002806:	f7fe fa91 	bl	8000d2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002860 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002812:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002814:	e004      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe fa89 	bl	8000d2c <HAL_GetTick>
 800281a:	1bc0      	subs	r0, r0, r7
 800281c:	4548      	cmp	r0, r9
 800281e:	d8ba      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002820:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002824:	079b      	lsls	r3, r3, #30
 8002826:	d5f6      	bpl.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8002828:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800282c:	e680      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8002832:	6901      	ldr	r1, [r0, #16]
 8002834:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002838:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800283c:	430a      	orrs	r2, r1
 800283e:	6102      	str	r2, [r0, #16]
 8002840:	e681      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002842:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002844:	462e      	mov	r6, r5
 8002846:	e43c      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002848:	2601      	movs	r6, #1
 800284a:	f7ff baef 	b.w	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800284e:	2601      	movs	r6, #1
 8002850:	4635      	mov	r5, r6
 8002852:	e48b      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 8002854:	2601      	movs	r6, #1
 8002856:	4635      	mov	r5, r6
 8002858:	e430      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800285a:	2601      	movs	r6, #1
 800285c:	4635      	mov	r5, r6
 800285e:	e49f      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002860:	58024400 	.word	0x58024400
 8002864:	00ffffcf 	.word	0x00ffffcf

08002868 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002868:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800286a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800286c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800286e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002870:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8002872:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002876:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800287a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800287c:	d05c      	beq.n	8002938 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800287e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002882:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002886:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800288a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800288e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002890:	ee07 4a90 	vmov	s15, r4
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002898:	d003      	beq.n	80028a2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800289a:	2902      	cmp	r1, #2
 800289c:	d075      	beq.n	800298a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800289e:	2900      	cmp	r1, #0
 80028a0:	d04f      	beq.n	8002942 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028a2:	ee07 2a90 	vmov	s15, r2
 80028a6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80029ac <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80028b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80029b0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80028b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028bc:	ee06 3a90 	vmov	s13, r3
 80028c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80028c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80028c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80028cc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80028d0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80028d4:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80028d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80028e0:	ee07 3a10 	vmov	s14, r3
 80028e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80028e8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80028ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 80028ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80028fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028fc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002900:	ee07 3a10 	vmov	s14, r3
 8002904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002908:	ee37 7a06 	vadd.f32	s14, s14, s12
 800290c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002914:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002918:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800291a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002926:	ee77 7a86 	vadd.f32	s15, s15, s12
 800292a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002932:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002936:	4770      	bx	lr
 8002938:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800293a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800293e:	6082      	str	r2, [r0, #8]
}
 8002940:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	0689      	lsls	r1, r1, #26
 8002946:	d527      	bpl.n	8002998 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002948:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800294a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800294e:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002950:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002954:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800295e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002960:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80029b0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	ee06 2a10 	vmov	s12, r2
 800296c:	ee06 3a90 	vmov	s13, r3
 8002970:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002974:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002978:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800297c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002980:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002984:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002988:	e7a4      	b.n	80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800298a:	ee07 2a90 	vmov	s15, r2
 800298e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80029b8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	e78a      	b.n	80028ae <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002998:	ee07 2a90 	vmov	s15, r2
 800299c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80029bc <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	e783      	b.n	80028ae <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80029a6:	bf00      	nop
 80029a8:	58024400 	.word	0x58024400
 80029ac:	4a742400 	.word	0x4a742400
 80029b0:	39000000 	.word	0x39000000
 80029b4:	03d09000 	.word	0x03d09000
 80029b8:	4bbebc20 	.word	0x4bbebc20
 80029bc:	4c742400 	.word	0x4c742400

080029c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80029c2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029c6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80029c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80029ca:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029ce:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029d2:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80029d4:	d05c      	beq.n	8002a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029d6:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80029da:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029de:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029e2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80029e6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029e8:	ee07 4a90 	vmov	s15, r4
 80029ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80029f0:	d003      	beq.n	80029fa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80029f2:	2902      	cmp	r1, #2
 80029f4:	d075      	beq.n	8002ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80029f6:	2900      	cmp	r1, #0
 80029f8:	d04f      	beq.n	8002a9a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80029fa:	ee07 2a90 	vmov	s15, r2
 80029fe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002b04 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002a0c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002b08 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	ee06 3a90 	vmov	s13, r3
 8002a18:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002a1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002a24:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002a28:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a2c:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8002a2e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a34:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a38:	ee07 3a10 	vmov	s14, r3
 8002a3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002a40:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002a52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a54:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002a58:	ee07 3a10 	vmov	s14, r3
 8002a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a6c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002a70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a72:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a86:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002a8a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002a8e:	4770      	bx	lr
 8002a90:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002a92:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002a96:	6082      	str	r2, [r0, #8]
}
 8002a98:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	0689      	lsls	r1, r1, #26
 8002a9e:	d527      	bpl.n	8002af0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aa0:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002aa2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002aa8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ab6:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ab8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002b08 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	ee06 2a10 	vmov	s12, r2
 8002ac4:	ee06 3a90 	vmov	s13, r3
 8002ac8:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002acc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002ad0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002ad4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002ad8:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002adc:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002ae0:	e7a4      	b.n	8002a2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ae2:	ee07 2a90 	vmov	s15, r2
 8002ae6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002b10 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	e78a      	b.n	8002a06 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002af0:	ee07 2a90 	vmov	s15, r2
 8002af4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b14 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8002af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afc:	e783      	b.n	8002a06 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002afe:	bf00      	nop
 8002b00:	58024400 	.word	0x58024400
 8002b04:	4a742400 	.word	0x4a742400
 8002b08:	39000000 	.word	0x39000000
 8002b0c:	03d09000 	.word	0x03d09000
 8002b10:	4bbebc20 	.word	0x4bbebc20
 8002b14:	4c742400 	.word	0x4c742400

08002b18 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8002b1a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002b1e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002b20:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8002b22:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002b26:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b2a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b2e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002b32:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b36:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b3a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8002b3e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b40:	ee07 4a90 	vmov	s15, r4
 8002b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002b48:	d07e      	beq.n	8002c48 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8002b4a:	2902      	cmp	r1, #2
 8002b4c:	d075      	beq.n	8002c3a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d04f      	beq.n	8002bf2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b52:	ee07 2a90 	vmov	s15, r2
 8002b56:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002c5c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002b64:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002c60 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	ee06 3a90 	vmov	s13, r3
 8002b70:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002b74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b78:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002b7c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002b80:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002b84:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8002b86:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b8c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002b90:	ee07 3a10 	vmov	s14, r3
 8002b94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002b98:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002b9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba6:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8002baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002bb0:	ee07 3a10 	vmov	s14, r3
 8002bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8002bc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bde:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002be2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002be6:	4770      	bx	lr
 8002be8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002bea:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8002bee:	6082      	str	r2, [r0, #8]
}
 8002bf0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	0689      	lsls	r1, r1, #26
 8002bf6:	d5ac      	bpl.n	8002b52 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bf8:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bfa:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c00:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c04:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c0e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c10:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002c60 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	ee06 2a10 	vmov	s12, r2
 8002c1c:	ee06 3a90 	vmov	s13, r3
 8002c20:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002c24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c28:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002c2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002c30:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002c34:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002c38:	e7a4      	b.n	8002b84 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c3a:	ee07 2a90 	vmov	s15, r2
 8002c3e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c68 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	e78a      	b.n	8002b5e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c48:	ee07 2a90 	vmov	s15, r2
 8002c4c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002c6c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	e783      	b.n	8002b5e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	4c742400 	.word	0x4c742400
 8002c60:	39000000 	.word	0x39000000
 8002c64:	03d09000 	.word	0x03d09000
 8002c68:	4bbebc20 	.word	0x4bbebc20
 8002c6c:	4a742400 	.word	0x4a742400

08002c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002c70:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8002c74:	b500      	push	{lr}
 8002c76:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002c78:	d077      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002c7a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c7e:	d02e      	beq.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002c80:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002c84:	f000 80cf 	beq.w	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002c88:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002c8c:	f000 8080 	beq.w	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002c90:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002c94:	d05a      	beq.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002c96:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002c9a:	f000 8105 	beq.w	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002c9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002ca2:	f000 8110 	beq.w	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8002ca6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002caa:	f000 80e2 	beq.w	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8002cae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cb2:	d13a      	bne.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8002cb4:	4ba9      	ldr	r3, [pc, #676]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8002cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc0:	f000 808e 	beq.w	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc8:	f000 812e 	beq.w	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002ccc:	bb6b      	cbnz	r3, 8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cce:	4aa3      	ldr	r2, [pc, #652]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8002cd0:	4ba3      	ldr	r3, [pc, #652]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cd2:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8002cd4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002cd8:	bf18      	it	ne
 8002cda:	4618      	movne	r0, r3
 8002cdc:	e042      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002cde:	4a9f      	ldr	r2, [pc, #636]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002ce0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ce2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	f000 8098 	beq.w	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002cec:	d921      	bls.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8002cee:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf0:	d037      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d118      	bne.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002cf8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002cfa:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002d00:	0749      	lsls	r1, r1, #29
 8002d02:	d502      	bpl.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80ae 	beq.w	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8002d0a:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	05d0      	lsls	r0, r2, #23
 8002d10:	d503      	bpl.n	8002d1a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d16:	f000 80fb 	beq.w	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8002d1a:	4a90      	ldr	r2, [pc, #576]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	0391      	lsls	r1, r2, #14
 8002d20:	d503      	bpl.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d26:	f000 80bd 	beq.w	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8002d2a:	2000      	movs	r0, #0
}
 8002d2c:	b005      	add	sp, #20
 8002d2e:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04b      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d1f7      	bne.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002d3a:	6810      	ldr	r0, [r2, #0]
 8002d3c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002d40:	d010      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d42:	a801      	add	r0, sp, #4
 8002d44:	f7ff fd90 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002d48:	9801      	ldr	r0, [sp, #4]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002d4c:	4a83      	ldr	r2, [pc, #524]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002d4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002d50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8002d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d58:	d060      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002d5a:	d936      	bls.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8002d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d60:	d178      	bne.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d62:	4880      	ldr	r0, [pc, #512]	; (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8002d64:	b005      	add	sp, #20
 8002d66:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d8d9      	bhi.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002de1 	.word	0x08002de1
 8002d80:	08002e05 	.word	0x08002e05
 8002d84:	08002df1 	.word	0x08002df1
 8002d88:	08002d63 	.word	0x08002d63
 8002d8c:	08002ded 	.word	0x08002ded
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002d90:	4a72      	ldr	r2, [pc, #456]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002d92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d94:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d03e      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002d9e:	d937      	bls.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002da0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002da4:	d0dd      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002daa:	d1be      	bne.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002dac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002dae:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	d5a8      	bpl.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1a6      	bne.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002dbe:	486a      	ldr	r0, [pc, #424]	; (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002dc6:	40d8      	lsrs	r0, r3
 8002dc8:	e7cc      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d146      	bne.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002dce:	6810      	ldr	r0, [r2, #0]
 8002dd0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002dd4:	d0c6      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002dd6:	a801      	add	r0, sp, #4
 8002dd8:	f7ff fe9e 	bl	8002b18 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8002ddc:	9802      	ldr	r0, [sp, #8]
 8002dde:	e7c1      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002de0:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002de8:	d0bc      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002dea:	e7f4      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002dec:	4a5b      	ldr	r2, [pc, #364]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002dee:	e783      	b.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002df0:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002df8:	d0b4      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dfa:	a801      	add	r0, sp, #4
 8002dfc:	f7ff fde0 	bl	80029c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002e00:	9801      	ldr	r0, [sp, #4]
 8002e02:	e7af      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e04:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002e0c:	d0aa      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002e0e:	e798      	b.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0dc      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d08f      	beq.n	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8002e1a:	e786      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002e1c:	6810      	ldr	r0, [r2, #0]
 8002e1e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002e22:	d09f      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002e24:	e7e9      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002e26:	4a4d      	ldr	r2, [pc, #308]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8002e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e32:	d0f3      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002e34:	d806      	bhi.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0c9      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3e:	f43f af7c 	beq.w	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8002e42:	e772      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002e44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e48:	d08b      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e4e:	f43f af53 	beq.w	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8002e52:	e76a      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8002e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e58:	d0a8      	beq.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8002e5a:	e766      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	f43f af6b 	beq.w	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8002e64:	e761      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	483f      	ldr	r0, [pc, #252]	; (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002e6a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002e6e:	40d8      	lsrs	r0, r3
 8002e70:	e778      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8002e72:	4a3a      	ldr	r2, [pc, #232]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e74:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8002e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e7e:	d066      	beq.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002e80:	d82f      	bhi.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e86:	d04f      	beq.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d131      	bne.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002e96:	f43f af65 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e9a:	a801      	add	r0, sp, #4
 8002e9c:	f7ff fd90 	bl	80029c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8002ea0:	9802      	ldr	r0, [sp, #8]
 8002ea2:	e75f      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8002ea4:	482e      	ldr	r0, [pc, #184]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002ea6:	e75d      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002eaa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d02e      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8002eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eba:	f43f af77 	beq.w	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f af33 	bne.w	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002ec4:	e739      	b.n	8002d3a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8002eca:	03d2      	lsls	r2, r2, #15
 8002ecc:	d589      	bpl.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002ed4:	f43f af46 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ed8:	a801      	add	r0, sp, #4
 8002eda:	f7ff fcc5 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002ede:	9803      	ldr	r0, [sp, #12]
 8002ee0:	e740      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d02a      	beq.n	8002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8002ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eec:	f43f aeef 	beq.w	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002ef0:	e71b      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f47f af19 	bne.w	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002ef8:	f7fe fe28 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002efe:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	40d8      	lsrs	r0, r3
          break;
 8002f0e:	e729      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8002f10:	4817      	ldr	r0, [pc, #92]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002f12:	e727      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002f14:	6810      	ldr	r0, [r2, #0]
 8002f16:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002f1a:	f43f af23 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f1e:	a801      	add	r0, sp, #4
 8002f20:	f7ff fd4e 	bl	80029c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8002f24:	9803      	ldr	r0, [sp, #12]
 8002f26:	e71d      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002f30:	f43f af18 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f34:	a801      	add	r0, sp, #4
 8002f36:	f7ff fc97 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002f3a:	9802      	ldr	r0, [sp, #8]
 8002f3c:	e712      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8002f42:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8002f44:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8002f48:	bf18      	it	ne
 8002f4a:	4618      	movne	r0, r3
 8002f4c:	e70a      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f4e:	6810      	ldr	r0, [r2, #0]
 8002f50:	f010 0004 	ands.w	r0, r0, #4
 8002f54:	f43f af06 	beq.w	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002f58:	e730      	b.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	017d7840 	.word	0x017d7840
 8002f64:	00bb8000 	.word	0x00bb8000
 8002f68:	03d09000 	.word	0x03d09000
 8002f6c:	0800cd24 	.word	0x0800cd24
 8002f70:	003d0900 	.word	0x003d0900

08002f74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	4605      	mov	r5, r0
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f7e:	f7fd fed5 	bl	8000d2c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002f82:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8002f84:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002f86:	6828      	ldr	r0, [r5, #0]
 8002f88:	f000 ff84 	bl	8003e94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	b118      	cbz	r0, 8002f98 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8002f90:	4620      	mov	r0, r4
 8002f92:	b006      	add	sp, #24
 8002f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002f98:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002f9a:	6828      	ldr	r0, [r5, #0]
 8002f9c:	0409      	lsls	r1, r1, #16
 8002f9e:	f001 fcc5 	bl	800492c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d1f3      	bne.n	8002f90 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	2308      	movs	r3, #8
 8002fae:	2030      	movs	r0, #48	; 0x30
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	e9cd 2300 	strd	r2, r3, [sp]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fbe:	4669      	mov	r1, sp
 8002fc0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fc6:	f000 ff4f 	bl	8003e68 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002fca:	6828      	ldr	r0, [r5, #0]
 8002fcc:	f001 fe2e 	bl	8004c2c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1dc      	bne.n	8002f90 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8002fd6:	4682      	mov	sl, r0
 8002fd8:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8002fda:	f240 582a 	movw	r8, #1322	; 0x52a
 8002fde:	e004      	b.n	8002fea <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002fe0:	f7fd fea4 	bl	8000d2c <HAL_GetTick>
 8002fe4:	1b83      	subs	r3, r0, r6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	d024      	beq.n	8003034 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8002fea:	6828      	ldr	r0, [r5, #0]
 8002fec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fee:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8002ff4:	d10c      	bne.n	8003010 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8002ff6:	0319      	lsls	r1, r3, #12
 8002ff8:	d4f2      	bmi.n	8002fe0 <SD_FindSCR+0x6c>
 8002ffa:	2c00      	cmp	r4, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8002ffe:	f000 ff19 	bl	8003e34 <SDMMC_ReadFIFO>
 8003002:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8003004:	6828      	ldr	r0, [r5, #0]
      index++;
 8003006:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8003008:	f000 ff14 	bl	8003e34 <SDMMC_ReadFIFO>
 800300c:	4682      	mov	sl, r0
      index++;
 800300e:	e7e7      	b.n	8002fe0 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003010:	071a      	lsls	r2, r3, #28
 8003012:	d415      	bmi.n	8003040 <SD_FindSCR+0xcc>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003014:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003016:	079b      	lsls	r3, r3, #30
 8003018:	d40f      	bmi.n	800303a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800301a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800301c:	f014 0420 	ands.w	r4, r4, #32
 8003020:	d111      	bne.n	8003046 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003022:	fa9a f28a 	rev.w	r2, sl
 8003026:	fa99 f389 	rev.w	r3, r9
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <SD_FindSCR+0xd8>)
 800302c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800302e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8003032:	e7ad      	b.n	8002f90 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8003034:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003038:	e7aa      	b.n	8002f90 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800303a:	2402      	movs	r4, #2
 800303c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800303e:	e7a7      	b.n	8002f90 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003040:	2408      	movs	r4, #8
 8003042:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003044:	e7a4      	b.n	8002f90 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003046:	2420      	movs	r4, #32
 8003048:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800304a:	e7a1      	b.n	8002f90 <SD_FindSCR+0x1c>
 800304c:	18000f3a 	.word	0x18000f3a

08003050 <HAL_SD_ReadBlocks>:
{
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	460c      	mov	r4, r1
 8003056:	b087      	sub	sp, #28
 8003058:	4683      	mov	fp, r0
 800305a:	4691      	mov	r9, r2
 800305c:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800305e:	f7fd fe65 	bl	8000d2c <HAL_GetTick>
  if (NULL == pData)
 8003062:	2c00      	cmp	r4, #0
 8003064:	f000 8082 	beq.w	800316c <HAL_SD_ReadBlocks+0x11c>
  if (hsd->State == HAL_SD_STATE_READY)
 8003068:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	fa5f f883 	uxtb.w	r8, r3
 8003072:	d168      	bne.n	8003146 <HAL_SD_ReadBlocks+0xf6>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003074:	eb09 0306 	add.w	r3, r9, r6
 8003078:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800307c:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800307e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003080:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003084:	d87e      	bhi.n	8003184 <HAL_SD_ReadBlocks+0x134>
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003086:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    hsd->State = HAL_SD_STATE_BUSY;
 800308a:	2203      	movs	r2, #3
 800308c:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 800308e:	f8db 0000 	ldr.w	r0, [fp]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003092:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003094:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8003098:	f88b 2030 	strb.w	r2, [fp, #48]	; 0x30
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800309c:	f04f 0a02 	mov.w	sl, #2
    hsd->Instance->DCTRL = 0U;
 80030a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030a2:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80030a6:	f04f 0290 	mov.w	r2, #144	; 0x90
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030aa:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030ac:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030b0:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030b2:	4669      	mov	r1, sp
      add *= 512U;
 80030b4:	bf18      	it	ne
 80030b6:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80030ba:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80030bc:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030be:	e9cd a303 	strd	sl, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030c2:	f000 fed1 	bl	8003e68 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80030c6:	f8db 0000 	ldr.w	r0, [fp]
    if (NumberOfBlocks > 1U)
 80030ca:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80030cc:	68c3      	ldr	r3, [r0, #12]
 80030ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d2:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 80030d4:	d943      	bls.n	800315e <HAL_SD_ReadBlocks+0x10e>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030d6:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030d8:	f8cb a02c 	str.w	sl, [fp, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030dc:	f001 f822 	bl	8004124 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d159      	bne.n	8003198 <HAL_SD_ReadBlocks+0x148>
    dataremaining = config.DataLength;
 80030e4:	f8dd a004 	ldr.w	sl, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80030e8:	e006      	b.n	80030f8 <HAL_SD_ReadBlocks+0xa8>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80030ea:	f7fd fe1f 	bl	8000d2c <HAL_GetTick>
 80030ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030f0:	1b40      	subs	r0, r0, r5
 80030f2:	4298      	cmp	r0, r3
 80030f4:	f080 8083 	bcs.w	80031fe <HAL_SD_ReadBlocks+0x1ae>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80030f8:	f8db 0000 	ldr.w	r0, [fp]
 80030fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030fe:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8003102:	d159      	bne.n	80031b8 <HAL_SD_ReadBlocks+0x168>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8003104:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003106:	041a      	lsls	r2, r3, #16
 8003108:	d5ef      	bpl.n	80030ea <HAL_SD_ReadBlocks+0x9a>
 800310a:	f1ba 0f1f 	cmp.w	sl, #31
 800310e:	d9ec      	bls.n	80030ea <HAL_SD_ReadBlocks+0x9a>
 8003110:	1d27      	adds	r7, r4, #4
 8003112:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8003116:	e001      	b.n	800311c <HAL_SD_ReadBlocks+0xcc>
 8003118:	f8db 0000 	ldr.w	r0, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800311c:	f000 fe8a 	bl	8003e34 <SDMMC_ReadFIFO>
 8003120:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003122:	0a00      	lsrs	r0, r0, #8
 8003124:	3704      	adds	r7, #4
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003126:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800312a:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800312c:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800312e:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003132:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003136:	f807 2c05 	strb.w	r2, [r7, #-5]
        for (count = 0U; count < 8U; count++)
 800313a:	454f      	cmp	r7, r9
 800313c:	d1ec      	bne.n	8003118 <HAL_SD_ReadBlocks+0xc8>
 800313e:	3420      	adds	r4, #32
        dataremaining -= 32U;
 8003140:	f1aa 0a20 	sub.w	sl, sl, #32
 8003144:	e7d1      	b.n	80030ea <HAL_SD_ReadBlocks+0x9a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003146:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    return HAL_ERROR;
 800314a:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800314e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003152:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
}
 8003156:	4640      	mov	r0, r8
 8003158:	b007      	add	sp, #28
 800315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800315e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003160:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003162:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003166:	f000 ff39 	bl	8003fdc <SDMMC_CmdReadSingleBlock>
 800316a:	e7b9      	b.n	80030e0 <HAL_SD_ReadBlocks+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800316c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    return HAL_ERROR;
 8003170:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8003178:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800317a:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
}
 800317e:	b007      	add	sp, #28
 8003180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003184:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
}
 8003188:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800318a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318e:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
}
 8003192:	b007      	add	sp, #28
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003198:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 800319c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800319e:	4c39      	ldr	r4, [pc, #228]	; (8003284 <HAL_SD_ReadBlocks+0x234>)
          hsd->Context = SD_CONTEXT_NONE;
 80031a0:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031a2:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80031a4:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80031a8:	4318      	orrs	r0, r3
 80031aa:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80031ae:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80031b2:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
          return HAL_ERROR;
 80031b6:	e7ce      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80031b8:	68c3      	ldr	r3, [r0, #12]
 80031ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031be:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80031c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031c2:	05db      	lsls	r3, r3, #23
 80031c4:	d501      	bpl.n	80031ca <HAL_SD_ReadBlocks+0x17a>
 80031c6:	2e01      	cmp	r6, #1
 80031c8:	d82c      	bhi.n	8003224 <HAL_SD_ReadBlocks+0x1d4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80031ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031cc:	f013 0308 	ands.w	r3, r3, #8
 80031d0:	d141      	bne.n	8003256 <HAL_SD_ReadBlocks+0x206>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80031d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80031d4:	f012 0202 	ands.w	r2, r2, #2
 80031d8:	d12f      	bne.n	800323a <HAL_SD_ReadBlocks+0x1ea>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80031da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031dc:	f013 0320 	ands.w	r3, r3, #32
 80031e0:	d048      	beq.n	8003274 <HAL_SD_ReadBlocks+0x224>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 80031e4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031e6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031e8:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80031f4:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80031f8:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
      return HAL_ERROR;
 80031fc:	e7ab      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031fe:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State = HAL_SD_STATE_READY;
 8003202:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003204:	481f      	ldr	r0, [pc, #124]	; (8003284 <HAL_SD_ReadBlocks+0x234>)
        hsd->Context = SD_CONTEXT_NONE;
 8003206:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8003208:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800320c:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800320e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8003212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003216:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800321a:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800321e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
        return HAL_TIMEOUT;
 8003222:	e798      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8003224:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8003228:	2b03      	cmp	r3, #3
 800322a:	d0ce      	beq.n	80031ca <HAL_SD_ReadBlocks+0x17a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800322c:	f001 f966 	bl	80044fc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8003230:	2800      	cmp	r0, #0
 8003232:	d1b1      	bne.n	8003198 <HAL_SD_ReadBlocks+0x148>
 8003234:	f8db 0000 	ldr.w	r0, [fp]
 8003238:	e7c7      	b.n	80031ca <HAL_SD_ReadBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 800323c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800323e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003240:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 8003244:	f042 0202 	orr.w	r2, r2, #2
 8003248:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800324c:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8003250:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
      return HAL_ERROR;
 8003254:	e77f      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8003258:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800325a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800325c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800325e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8003262:	f043 0308 	orr.w	r3, r3, #8
 8003266:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800326a:	f88b 1030 	strb.w	r1, [fp, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800326e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
      return HAL_ERROR;
 8003272:	e770      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003274:	4904      	ldr	r1, [pc, #16]	; (8003288 <HAL_SD_ReadBlocks+0x238>)
    hsd->State = HAL_SD_STATE_READY;
 8003276:	2201      	movs	r2, #1
    return HAL_OK;
 8003278:	4698      	mov	r8, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800327a:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800327c:	f88b 2030 	strb.w	r2, [fp, #48]	; 0x30
    return HAL_OK;
 8003280:	e769      	b.n	8003156 <HAL_SD_ReadBlocks+0x106>
 8003282:	bf00      	nop
 8003284:	1fe00fff 	.word	0x1fe00fff
 8003288:	18000f3a 	.word	0x18000f3a

0800328c <HAL_SD_WriteBlocks>:
{
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	460d      	mov	r5, r1
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	4604      	mov	r4, r0
 8003296:	4692      	mov	sl, r2
 8003298:	461f      	mov	r7, r3
 800329a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800329e:	f7fd fd45 	bl	8000d2c <HAL_GetTick>
  if (NULL == pData)
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	d068      	beq.n	8003378 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 80032a6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	fa5f f983 	uxtb.w	r9, r3
 80032b0:	d152      	bne.n	8003358 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032b2:	eb0a 0307 	add.w	r3, sl, r7
 80032b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032b8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032ba:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032bc:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032be:	d865      	bhi.n	800338c <HAL_SD_WriteBlocks+0x100>
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_BUSY;
 80032c2:	2203      	movs	r2, #3
 80032c4:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80032c6:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032c8:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 80032ce:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80032d2:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80032d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032d8:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032dc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032de:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032e2:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80032e4:	a902      	add	r1, sp, #8
      add *= 512U;
 80032e6:	bf18      	it	ne
 80032e8:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80032f0:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80032f4:	f000 fdb8 	bl	8003e68 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80032f8:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 80032fa:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80032fc:	68c3      	ldr	r3, [r0, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8003304:	d932      	bls.n	800336c <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003306:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003308:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800330a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800330c:	f001 f852 	bl	80043b4 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003310:	2800      	cmp	r0, #0
 8003312:	d143      	bne.n	800339c <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8003314:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8003318:	e004      	b.n	8003324 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800331a:	f7fd fd07 	bl	8000d2c <HAL_GetTick>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	4540      	cmp	r0, r8
 8003322:	d267      	bcs.n	80033f4 <HAL_SD_WriteBlocks+0x168>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003328:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800332c:	d142      	bne.n	80033b4 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800332e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003330:	045a      	lsls	r2, r3, #17
 8003332:	d5f2      	bpl.n	800331a <HAL_SD_WriteBlocks+0x8e>
 8003334:	f1bb 0f1f 	cmp.w	fp, #31
 8003338:	d9ef      	bls.n	800331a <HAL_SD_WriteBlocks+0x8e>
 800333a:	f105 0a20 	add.w	sl, r5, #32
 800333e:	e000      	b.n	8003342 <HAL_SD_WriteBlocks+0xb6>
 8003340:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003346:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003348:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800334a:	f000 fd77 	bl	8003e3c <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800334e:	4555      	cmp	r5, sl
 8003350:	d1f6      	bne.n	8003340 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 8003352:	f1ab 0b20 	sub.w	fp, fp, #32
 8003356:	e7e0      	b.n	800331a <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003358:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800335a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800335e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003362:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003364:	4648      	mov	r0, r9
 8003366:	b009      	add	sp, #36	; 0x24
 8003368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800336c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800336e:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003370:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003372:	f000 ff7b 	bl	800426c <SDMMC_CmdWriteSingleBlock>
 8003376:	e7cb      	b.n	8003310 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003378:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800337a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800337e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8003382:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003384:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003386:	b009      	add	sp, #36	; 0x24
 8003388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800338c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800338e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003394:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003396:	b009      	add	sp, #36	; 0x24
 8003398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800339c:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800339e:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033a0:	4d2e      	ldr	r5, [pc, #184]	; (800345c <HAL_SD_WriteBlocks+0x1d0>)
          hsd->Context = SD_CONTEXT_NONE;
 80033a2:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033a4:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80033a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a8:	4318      	orrs	r0, r3
 80033aa:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80033ac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80033b0:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80033b2:	e7d7      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80033b4:	68c3      	ldr	r3, [r0, #12]
 80033b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ba:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	d501      	bpl.n	80033c6 <HAL_SD_WriteBlocks+0x13a>
 80033c2:	2f01      	cmp	r7, #1
 80033c4:	d823      	bhi.n	800340e <HAL_SD_WriteBlocks+0x182>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80033c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033c8:	f013 0308 	ands.w	r3, r3, #8
 80033cc:	d133      	bne.n	8003436 <HAL_SD_WriteBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80033ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80033d0:	f012 0202 	ands.w	r2, r2, #2
 80033d4:	d124      	bne.n	8003420 <HAL_SD_WriteBlocks+0x194>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80033d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033d8:	f013 0310 	ands.w	r3, r3, #16
 80033dc:	d037      	beq.n	800344e <HAL_SD_WriteBlocks+0x1c2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 80033e0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033e2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80033ec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80033f0:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 80033f2:	e7b7      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033f4:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80033f6:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033f8:	4818      	ldr	r0, [pc, #96]	; (800345c <HAL_SD_WriteBlocks+0x1d0>)
        hsd->Context = SD_CONTEXT_NONE;
 80033fa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80033fc:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003400:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003404:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8003406:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800340a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 800340c:	e7aa      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800340e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003410:	2b03      	cmp	r3, #3
 8003412:	d0d8      	beq.n	80033c6 <HAL_SD_WriteBlocks+0x13a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003414:	f001 f872 	bl	80044fc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8003418:	2800      	cmp	r0, #0
 800341a:	d1bf      	bne.n	800339c <HAL_SD_WriteBlocks+0x110>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	e7d2      	b.n	80033c6 <HAL_SD_WriteBlocks+0x13a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 8003422:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003424:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003426:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003428:	f042 0202 	orr.w	r2, r2, #2
 800342c:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800342e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8003432:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8003434:	e796      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 8003438:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800343a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800343c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800343e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8003446:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800344a:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800344c:	e78a      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800344e:	4904      	ldr	r1, [pc, #16]	; (8003460 <HAL_SD_WriteBlocks+0x1d4>)
    hsd->State = HAL_SD_STATE_READY;
 8003450:	2201      	movs	r2, #1
    return HAL_OK;
 8003452:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003454:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003456:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800345a:	e783      	b.n	8003364 <HAL_SD_WriteBlocks+0xd8>
 800345c:	1fe00fff 	.word	0x1fe00fff
 8003460:	18000f3a 	.word	0x18000f3a

08003464 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003464:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8003466:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003468:	0f90      	lsrs	r0, r2, #30
{
 800346a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800346c:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800346e:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003472:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003476:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800347a:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800347e:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003480:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003482:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003484:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003486:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003488:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800348a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800348c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800348e:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003490:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003494:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003498:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800349c:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800349e:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034a2:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034a4:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80034a8:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80034aa:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034ac:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034ae:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034b0:	734c      	strb	r4, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80034b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d16e      	bne.n	8003596 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034b8:	f640 74fc 	movw	r4, #4092	; 0xffc
 80034bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034be:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 80034c0:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034c4:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034c8:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034cc:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034d0:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034d4:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034d8:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034dc:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034de:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034e2:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034e6:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034ea:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034ec:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034ee:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034f0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034f2:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034f4:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034f6:	f004 0407 	and.w	r4, r4, #7
 80034fa:	3402      	adds	r4, #2
 80034fc:	40a2      	lsls	r2, r4
 80034fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003500:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8003502:	655e      	str	r6, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003504:	f004 040f 	and.w	r4, r4, #15
 8003508:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800350a:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800350c:	64dd      	str	r5, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800350e:	fb02 f204 	mul.w	r2, r2, r4
 8003512:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003514:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003518:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800351c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 8003520:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003522:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8003524:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003526:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8003528:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800352a:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800352c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352e:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003530:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003534:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003538:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800353c:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800353e:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003542:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003544:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003548:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800354a:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800354e:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003550:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003554:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003558:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 800355c:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003560:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003564:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003568:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800356c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003570:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003574:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003578:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800357c:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003580:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003584:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003588:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800358c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003590:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003596:	2801      	cmp	r0, #1
 8003598:	d110      	bne.n	80035bc <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800359a:	0412      	lsls	r2, r2, #16
 800359c:	6e58      	ldr	r0, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 800359e:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035a2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80035a6:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80035aa:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035ac:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80035ae:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035b0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035b2:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035b4:	0292      	lsls	r2, r2, #10
 80035b6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035ba:	e7ab      	b.n	8003514 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035bc:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80035be:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035c0:	4c04      	ldr	r4, [pc, #16]	; (80035d4 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 80035c2:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035c4:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80035ce:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	1fe00fff 	.word	0x1fe00fff

080035d8 <HAL_SD_InitCard>:
{
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80035da:	2200      	movs	r2, #0
{
 80035dc:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80035de:	2300      	movs	r3, #0
{
 80035e0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80035e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80035e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80035ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80035ee:	f7ff fb3f 	bl	8002c70 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80035f2:	b940      	cbnz	r0, 8003606 <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 80035f4:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80035f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 80035fa:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80035fe:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003600:	4630      	mov	r0, r6
 8003602:	b015      	add	sp, #84	; 0x54
 8003604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8003606:	0a06      	lsrs	r6, r0, #8
 8003608:	4a7f      	ldr	r2, [pc, #508]	; (8003808 <HAL_SD_InitCard+0x230>)
 800360a:	4605      	mov	r5, r0
  (void)SDMMC_Init(hsd->Instance, Init);
 800360c:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800360e:	fba2 2606 	umull	r2, r6, r2, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8003612:	9807      	ldr	r0, [sp, #28]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8003614:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8003616:	4631      	mov	r1, r6
 8003618:	9608      	str	r6, [sp, #32]
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800361a:	0076      	lsls	r6, r6, #1
  (void)SDMMC_Init(hsd->Instance, Init);
 800361c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	f000 fbec 	bl	8003e00 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	f000 fc0d 	bl	8003e48 <SDMMC_PowerState_ON>
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800362e:	4877      	ldr	r0, [pc, #476]	; (800380c <HAL_SD_InitCard+0x234>)
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8003630:	fbb5 f6f6 	udiv	r6, r5, r6
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8003634:	fbb0 f0f6 	udiv	r0, r0, r6
 8003638:	3001      	adds	r0, #1
 800363a:	f7fd fb7d 	bl	8000d38 <HAL_Delay>
  __IO uint32_t count = 0U;
 800363e:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003640:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8003642:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003644:	f001 f908 	bl	8004858 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003648:	4605      	mov	r5, r0
 800364a:	b960      	cbnz	r0, 8003666 <HAL_SD_InitCard+0x8e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	f001 f92f 	bl	80048b0 <SDMMC_CmdOperCond>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003652:	b988      	cbnz	r0, 8003678 <HAL_SD_InitCard+0xa0>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003654:	2301      	movs	r3, #1
 8003656:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003658:	2100      	movs	r1, #0
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	f001 f966 	bl	800492c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003660:	b1a0      	cbz	r0, 800368c <HAL_SD_InitCard+0xb4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003662:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8003666:	2601      	movs	r6, #1
 8003668:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800366c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800366e:	4305      	orrs	r5, r0
}
 8003670:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8003672:	6365      	str	r5, [r4, #52]	; 0x34
}
 8003674:	b015      	add	sp, #84	; 0x54
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003678:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	f001 f8ec 	bl	8004858 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003680:	4605      	mov	r5, r0
 8003682:	2800      	cmp	r0, #0
 8003684:	d1ef      	bne.n	8003666 <HAL_SD_InitCard+0x8e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8003686:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d0e5      	beq.n	8003658 <HAL_SD_InitCard+0x80>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8003692:	42b3      	cmp	r3, r6
 8003694:	f200 80b0 	bhi.w	80037f8 <HAL_SD_InitCard+0x220>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8003698:	4f5d      	ldr	r7, [pc, #372]	; (8003810 <HAL_SD_InitCard+0x238>)
 800369a:	e011      	b.n	80036c0 <HAL_SD_InitCard+0xe8>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	f001 f9e9 	bl	8004a74 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80036a2:	4601      	mov	r1, r0
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1dc      	bne.n	8003662 <HAL_SD_InitCard+0x8a>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	f000 fbd9 	bl	8003e60 <SDMMC_GetResponse>
    count++;
 80036ae:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036b0:	2800      	cmp	r0, #0
    count++;
 80036b2:	f103 0301 	add.w	r3, r3, #1
 80036b6:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	db0a      	blt.n	80036d2 <HAL_SD_InitCard+0xfa>
 80036bc:	42b3      	cmp	r3, r6
 80036be:	d808      	bhi.n	80036d2 <HAL_SD_InitCard+0xfa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036c0:	2100      	movs	r1, #0
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	f001 f932 	bl	800492c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80036c8:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 80036ca:	4605      	mov	r5, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d0e5      	beq.n	800369c <HAL_SD_InitCard+0xc4>
 80036d0:	e7c9      	b.n	8003666 <HAL_SD_InitCard+0x8e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80036d2:	9a03      	ldr	r2, [sp, #12]
 80036d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80036d8:	429a      	cmp	r2, r3
 80036da:	f200 8091 	bhi.w	8003800 <HAL_SD_InitCard+0x228>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036de:	0043      	lsls	r3, r0, #1
 80036e0:	d501      	bpl.n	80036e6 <HAL_SD_InitCard+0x10e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036e2:	2301      	movs	r3, #1
 80036e4:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 1U;
 80036e6:	2301      	movs	r3, #1
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80036e8:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80036ea:	f8ad 300a 	strh.w	r3, [sp, #10]
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80036ee:	f000 fbb3 	bl	8003e58 <SDMMC_GetPowerState>
 80036f2:	b348      	cbz	r0, 8003748 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80036f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d131      	bne.n	800375e <HAL_SD_InitCard+0x186>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80036fa:	2104      	movs	r1, #4
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	f000 fbaf 	bl	8003e60 <SDMMC_GetResponse>
 8003702:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003704:	a909      	add	r1, sp, #36	; 0x24
 8003706:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003708:	0d1b      	lsrs	r3, r3, #20
 800370a:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800370c:	f7ff feaa 	bl	8003464 <HAL_SD_GetCardCSD>
 8003710:	4606      	mov	r6, r0
 8003712:	2800      	cmp	r0, #0
 8003714:	d16d      	bne.n	80037f2 <HAL_SD_InitCard+0x21a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003716:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	0409      	lsls	r1, r1, #16
 800371c:	f000 fff8 	bl	8004710 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003720:	b9a0      	cbnz	r0, 800374c <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	f000 fbb4 	bl	8003e94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800372c:	2800      	cmp	r0, #0
 800372e:	f43f af67 	beq.w	8003600 <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003732:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8003734:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003736:	4937      	ldr	r1, [pc, #220]	; (8003814 <HAL_SD_InitCard+0x23c>)
    return HAL_ERROR;
 8003738:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800373a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800373c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800373e:	4318      	orrs	r0, r3
 8003740:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8003742:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_ERROR;
 8003746:	e75b      	b.n	8003600 <HAL_SD_InitCard+0x28>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003748:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800374c:	2601      	movs	r6, #1
 800374e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8003752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003754:	4308      	orrs	r0, r1
 8003756:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003758:	4630      	mov	r0, r6
 800375a:	b015      	add	sp, #84	; 0x54
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	f001 fb0a 	bl	8004d78 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003764:	2800      	cmp	r0, #0
 8003766:	d1f1      	bne.n	800374c <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003768:	4601      	mov	r1, r0
 800376a:	6820      	ldr	r0, [r4, #0]
 800376c:	f000 fb78 	bl	8003e60 <SDMMC_GetResponse>
 8003770:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003772:	2104      	movs	r1, #4
 8003774:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003776:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003778:	f000 fb72 	bl	8003e60 <SDMMC_GetResponse>
 800377c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800377e:	2108      	movs	r1, #8
 8003780:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003782:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003784:	f000 fb6c 	bl	8003e60 <SDMMC_GetResponse>
 8003788:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800378a:	210c      	movs	r1, #12
 800378c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800378e:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003790:	f000 fb66 	bl	8003e60 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8003794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003796:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8003798:	2b03      	cmp	r3, #3
 800379a:	d0ae      	beq.n	80036fa <HAL_SD_InitCard+0x122>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800379c:	f10d 010a 	add.w	r1, sp, #10
 80037a0:	6820      	ldr	r0, [r4, #0]
 80037a2:	f001 fb5f 	bl	8004e64 <SDMMC_CmdSetRelAdd>
    if (errorstate != HAL_SD_ERROR_NONE)
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d1d0      	bne.n	800374c <HAL_SD_InitCard+0x174>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80037aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d0a4      	beq.n	80036fa <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 80037b0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037b4:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80037b6:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037b8:	0409      	lsls	r1, r1, #16
 80037ba:	f001 fb19 	bl	8004df0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 80037be:	2800      	cmp	r0, #0
 80037c0:	d1c4      	bne.n	800374c <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037c2:	4601      	mov	r1, r0
 80037c4:	6820      	ldr	r0, [r4, #0]
 80037c6:	f000 fb4b 	bl	8003e60 <SDMMC_GetResponse>
 80037ca:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037cc:	2104      	movs	r1, #4
 80037ce:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037d0:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037d2:	f000 fb45 	bl	8003e60 <SDMMC_GetResponse>
 80037d6:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80037d8:	2108      	movs	r1, #8
 80037da:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037dc:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80037de:	f000 fb3f 	bl	8003e60 <SDMMC_GetResponse>
 80037e2:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80037e4:	210c      	movs	r1, #12
 80037e6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80037e8:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80037ea:	f000 fb39 	bl	8003e60 <SDMMC_GetResponse>
 80037ee:	66a0      	str	r0, [r4, #104]	; 0x68
 80037f0:	e783      	b.n	80036fa <HAL_SD_InitCard+0x122>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80037f6:	e7a9      	b.n	800374c <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	42b3      	cmp	r3, r6
 80037fc:	f67f af73 	bls.w	80036e6 <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003800:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003804:	e72f      	b.n	8003666 <HAL_SD_InitCard+0x8e>
 8003806:	bf00      	nop
 8003808:	014f8b59 	.word	0x014f8b59
 800380c:	00012110 	.word	0x00012110
 8003810:	c1100000 	.word	0xc1100000
 8003814:	1fe00fff 	.word	0x1fe00fff

08003818 <HAL_SD_GetCardStatus>:
{
 8003818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800381c:	4604      	mov	r4, r0
 800381e:	b097      	sub	sp, #92	; 0x5c
 8003820:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8003822:	f7fd fa83 	bl	8000d2c <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003826:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8003828:	4606      	mov	r6, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	f000 fb18 	bl	8003e60 <SDMMC_GetResponse>
 8003830:	0182      	lsls	r2, r0, #6
 8003832:	d45b      	bmi.n	80038ec <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	f000 fb2c 	bl	8003e94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800383c:	4603      	mov	r3, r0
 800383e:	b1e0      	cbz	r0, 800387a <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8003840:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003842:	6362      	str	r2, [r4, #52]	; 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 8003844:	6820      	ldr	r0, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003846:	4a5a      	ldr	r2, [pc, #360]	; (80039b0 <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 8003848:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800384a:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800384c:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800384e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003850:	4313      	orrs	r3, r2
 8003852:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8003854:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800385c:	f000 fb1a 	bl	8003e94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003860:	b138      	cbz	r0, 8003872 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8003862:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 8003868:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800386a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800386c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800386e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8003872:	4630      	mov	r0, r6
 8003874:	b017      	add	sp, #92	; 0x5c
 8003876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800387a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	0409      	lsls	r1, r1, #16
 8003880:	f001 f854 	bl	800492c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003884:	4603      	mov	r3, r0
 8003886:	2800      	cmp	r0, #0
 8003888:	d1da      	bne.n	8003840 <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800388a:	f04f 32ff 	mov.w	r2, #4294967295
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	2060      	movs	r0, #96	; 0x60
 8003892:	2102      	movs	r1, #2
 8003894:	e9cd 2300 	strd	r2, r3, [sp]
 8003898:	2301      	movs	r3, #1
 800389a:	2200      	movs	r2, #0
 800389c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80038a0:	4669      	mov	r1, sp
 80038a2:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80038a8:	f000 fade 	bl	8003e68 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	f001 fbd3 	bl	8005058 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 80038b2:	4603      	mov	r3, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1c3      	bne.n	8003840 <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 80038b8:	af06      	add	r7, sp, #24
 80038ba:	e004      	b.n	80038c6 <HAL_SD_GetCardStatus+0xae>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80038bc:	f7fd fa36 	bl	8000d2c <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	3001      	adds	r0, #1
 80038c4:	d016      	beq.n	80038f4 <HAL_SD_GetCardStatus+0xdc>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80038c6:	6820      	ldr	r0, [r4, #0]
 80038c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038ca:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80038ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80038d0:	d113      	bne.n	80038fa <HAL_SD_GetCardStatus+0xe2>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	d5f2      	bpl.n	80038bc <HAL_SD_GetCardStatus+0xa4>
 80038d6:	f107 0820 	add.w	r8, r7, #32
 80038da:	e000      	b.n	80038de <HAL_SD_GetCardStatus+0xc6>
 80038dc:	6820      	ldr	r0, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80038de:	f000 faa9 	bl	8003e34 <SDMMC_ReadFIFO>
 80038e2:	f847 0b04 	str.w	r0, [r7], #4
      for (count = 0U; count < 8U; count++)
 80038e6:	4547      	cmp	r7, r8
 80038e8:	d1f8      	bne.n	80038dc <HAL_SD_GetCardStatus+0xc4>
 80038ea:	e7e7      	b.n	80038bc <HAL_SD_GetCardStatus+0xa4>
  if (errorstate != HAL_SD_ERROR_NONE)
 80038ec:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038f2:	e7a8      	b.n	8003846 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 80038f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038f8:	e7a4      	b.n	8003844 <HAL_SD_GetCardStatus+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80038fa:	0719      	lsls	r1, r3, #28
 80038fc:	d451      	bmi.n	80039a2 <HAL_SD_GetCardStatus+0x18a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80038fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003900:	079a      	lsls	r2, r3, #30
 8003902:	d450      	bmi.n	80039a6 <HAL_SD_GetCardStatus+0x18e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003904:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003906:	069b      	lsls	r3, r3, #26
 8003908:	d50a      	bpl.n	8003920 <HAL_SD_GetCardStatus+0x108>
 800390a:	e04e      	b.n	80039aa <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800390c:	f000 fa92 	bl	8003e34 <SDMMC_ReadFIFO>
 8003910:	f847 0b04 	str.w	r0, [r7], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003914:	f7fd fa0a 	bl	8000d2c <HAL_GetTick>
 8003918:	1b80      	subs	r0, r0, r6
 800391a:	3001      	adds	r0, #1
 800391c:	d0ea      	beq.n	80038f4 <HAL_SD_GetCardStatus+0xdc>
 800391e:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8003920:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003922:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8003926:	d1f1      	bne.n	800390c <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8003928:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	461e      	mov	r6, r3
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800392c:	9908      	ldr	r1, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800392e:	0a3a      	lsrs	r2, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8003930:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8003934:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003938:	9b09      	ldr	r3, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800393a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800393e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003942:	fa5f f983 	uxtb.w	r9, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8003946:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800394a:	4f1a      	ldr	r7, [pc, #104]	; (80039b4 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800394c:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003950:	6387      	str	r7, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8003952:	b292      	uxth	r2, r2
 8003954:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003956:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800395a:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800395e:	ba3f      	rev	r7, r7
 8003960:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8003964:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8003966:	fa5f fe81 	uxtb.w	lr, r1
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800396a:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800396c:	f3c1 5203 	ubfx	r2, r1, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8003970:	f3c1 2707 	ubfx	r7, r1, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8003974:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8003978:	f3c3 1103 	ubfx	r1, r3, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800397c:	f3c3 2e85 	ubfx	lr, r3, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8003980:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8003982:	f3c3 2701 	ubfx	r7, r3, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8003986:	72aa      	strb	r2, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8003988:	f003 030f 	and.w	r3, r3, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800398c:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8003990:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8003994:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8003998:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800399a:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800399c:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800399e:	74aa      	strb	r2, [r5, #18]
 80039a0:	e75a      	b.n	8003858 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039a2:	2308      	movs	r3, #8
 80039a4:	e74f      	b.n	8003846 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039a6:	2302      	movs	r3, #2
 80039a8:	e74d      	b.n	8003846 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e74b      	b.n	8003846 <HAL_SD_GetCardStatus+0x2e>
 80039ae:	bf00      	nop
 80039b0:	1fe00fff 	.word	0x1fe00fff
 80039b4:	18000f3a 	.word	0x18000f3a

080039b8 <HAL_SD_GetCardInfo>:
{
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	2000      	movs	r0, #0
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80039be:	e9d3 ec0e 	ldrd	lr, ip, [r3, #56]	; 0x38
 80039c2:	e9d3 7610 	ldrd	r7, r6, [r3, #64]	; 0x40
 80039c6:	e9d3 5412 	ldrd	r5, r4, [r3, #72]	; 0x48
 80039ca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80039ce:	e9c1 ec00 	strd	lr, ip, [r1]
 80039d2:	e9c1 7602 	strd	r7, r6, [r1, #8]
 80039d6:	e9c1 5404 	strd	r5, r4, [r1, #16]
 80039da:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039e0 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80039e0:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 80039e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039e4:	4293      	cmp	r3, r2
{
 80039e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e8:	4604      	mov	r4, r0
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80039ee:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80039f2:	d034      	beq.n	8003a5e <HAL_SD_ConfigWideBusOperation+0x7e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80039f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80039f8:	d031      	beq.n	8003a5e <HAL_SD_ConfigWideBusOperation+0x7e>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80039fa:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80039fe:	f000 8084 	beq.w	8003b0a <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003a02:	2900      	cmp	r1, #0
 8003a04:	d062      	beq.n	8003acc <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a10:	bb63      	cbnz	r3, 8003a6c <HAL_SD_ConfigWideBusOperation+0x8c>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003a12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003a16:	f7ff f92b 	bl	8002c70 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d03c      	beq.n	8003a98 <HAL_SD_ConfigWideBusOperation+0xb8>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_SD_ConfigWideBusOperation+0x1ac>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a20:	6867      	ldr	r7, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8003a22:	fba3 2300 	umull	r2, r3, r3, r0
 8003a26:	6962      	ldr	r2, [r4, #20]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a28:	68a6      	ldr	r6, [r4, #8]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a2a:	6921      	ldr	r1, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8003a2c:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.BusWide             = WideMode;
 8003a30:	9504      	str	r5, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8003a32:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a36:	9105      	str	r1, [sp, #20]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a38:	e9cd 7602 	strd	r7, r6, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8003a3c:	d239      	bcs.n	8003ab2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8003a3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a44:	d035      	beq.n	8003ab2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8003a46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003a4a:	d07e      	beq.n	8003b4a <HAL_SD_ConfigWideBusOperation+0x16a>
        if (hsd->Init.ClockDiv == 0U)
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	f040 808a 	bne.w	8003b66 <HAL_SD_ConfigWideBusOperation+0x186>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8003a52:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <HAL_SD_ConfigWideBusOperation+0x1b0>)
 8003a54:	4298      	cmp	r0, r3
 8003a56:	f240 8093 	bls.w	8003b80 <HAL_SD_ConfigWideBusOperation+0x1a0>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8003a5a:	9506      	str	r5, [sp, #24]
 8003a5c:	e02a      	b.n	8003ab4 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0d2      	beq.n	8003a12 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a6c:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8003a6e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a70:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <HAL_SD_ConfigWideBusOperation+0x1b4>)
 8003a72:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a78:	f000 fa0c 	bl	8003e94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003a7c:	b130      	cbz	r0, 8003a8c <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a7e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8003a80:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a82:	4a44      	ldr	r2, [pc, #272]	; (8003b94 <HAL_SD_ConfigWideBusOperation+0x1b4>)
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a88:	4318      	orrs	r0, r3
 8003a8a:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
}
 8003a8e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003a90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8003a94:	b009      	add	sp, #36	; 0x24
 8003a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8003a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8003a9a:	2501      	movs	r5, #1
 8003a9c:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8003a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aa2:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8003aa4:	e7e6      	b.n	8003a74 <HAL_SD_ConfigWideBusOperation+0x94>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8003aa6:	0051      	lsls	r1, r2, #1
 8003aa8:	4d3b      	ldr	r5, [pc, #236]	; (8003b98 <HAL_SD_ConfigWideBusOperation+0x1b8>)
 8003aaa:	fbb0 f0f1 	udiv	r0, r0, r1
 8003aae:	42a8      	cmp	r0, r5
 8003ab0:	d850      	bhi.n	8003b54 <HAL_SD_ConfigWideBusOperation+0x174>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8003ab2:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 8003ab4:	9906      	ldr	r1, [sp, #24]
 8003ab6:	ab02      	add	r3, sp, #8
 8003ab8:	9805      	ldr	r0, [sp, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8003abc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	f000 f99c 	bl	8003e00 <SDMMC_Init>
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	e7d3      	b.n	8003a74 <HAL_SD_ConfigWideBusOperation+0x94>
  uint32_t scr[2U] = {0UL, 0UL};
 8003acc:	2200      	movs	r2, #0
 8003ace:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ad0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ad6:	f000 f9c3 	bl	8003e60 <SDMMC_GetResponse>
 8003ada:	0182      	lsls	r2, r0, #6
 8003adc:	d43d      	bmi.n	8003b5a <HAL_SD_ConfigWideBusOperation+0x17a>
  errorstate = SD_FindSCR(hsd, scr);
 8003ade:	a902      	add	r1, sp, #8
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f7ff fa47 	bl	8002f74 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003ae6:	b960      	cbnz	r0, 8003b02 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	03db      	lsls	r3, r3, #15
 8003aec:	d545      	bpl.n	8003b7a <HAL_SD_ConfigWideBusOperation+0x19a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003aee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	0409      	lsls	r1, r1, #16
 8003af4:	f000 ff1a 	bl	800492c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003af8:	b918      	cbnz	r0, 8003b02 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003afa:	4601      	mov	r1, r0
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	f000 fff1 	bl	8004ae4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8003b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b04:	4308      	orrs	r0, r1
 8003b06:	6360      	str	r0, [r4, #52]	; 0x34
 8003b08:	e7ad      	b.n	8003a66 <HAL_SD_ConfigWideBusOperation+0x86>
  uint32_t scr[2U] = {0UL, 0UL};
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b0e:	2100      	movs	r1, #0
 8003b10:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003b12:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b16:	f000 f9a3 	bl	8003e60 <SDMMC_GetResponse>
 8003b1a:	0180      	lsls	r0, r0, #6
 8003b1c:	d420      	bmi.n	8003b60 <HAL_SD_ConfigWideBusOperation+0x180>
  errorstate = SD_FindSCR(hsd, scr);
 8003b1e:	a902      	add	r1, sp, #8
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff fa27 	bl	8002f74 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003b26:	b960      	cbnz	r0, 8003b42 <HAL_SD_ConfigWideBusOperation+0x162>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	0359      	lsls	r1, r3, #13
 8003b2c:	d52b      	bpl.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x1a6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	0409      	lsls	r1, r1, #16
 8003b34:	f000 fefa 	bl	800492c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8003b38:	b918      	cbnz	r0, 8003b42 <HAL_SD_ConfigWideBusOperation+0x162>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	6820      	ldr	r0, [r4, #0]
 8003b3e:	f000 ffd1 	bl	8004ae4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8003b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b44:	4318      	orrs	r0, r3
 8003b46:	6360      	str	r0, [r4, #52]	; 0x34
 8003b48:	e78d      	b.n	8003a66 <HAL_SD_ConfigWideBusOperation+0x86>
        if (hsd->Init.ClockDiv == 0U)
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d1ab      	bne.n	8003aa6 <HAL_SD_ConfigWideBusOperation+0xc6>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_SD_ConfigWideBusOperation+0x1b8>)
 8003b50:	4290      	cmp	r0, r2
 8003b52:	d915      	bls.n	8003b80 <HAL_SD_ConfigWideBusOperation+0x1a0>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8003b54:	0e5b      	lsrs	r3, r3, #25
 8003b56:	9306      	str	r3, [sp, #24]
 8003b58:	e7ac      	b.n	8003ab4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b5e:	e7d0      	b.n	8003b02 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b64:	e7ed      	b.n	8003b42 <HAL_SD_ConfigWideBusOperation+0x162>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8003b66:	0051      	lsls	r1, r2, #1
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_SD_ConfigWideBusOperation+0x1b0>)
 8003b6a:	fbb0 f0f1 	udiv	r0, r0, r1
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	bf94      	ite	ls
 8003b72:	4610      	movls	r0, r2
 8003b74:	4628      	movhi	r0, r5
 8003b76:	9006      	str	r0, [sp, #24]
 8003b78:	e79c      	b.n	8003ab4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b7a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003b7e:	e7c0      	b.n	8003b02 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8003b80:	2300      	movs	r3, #0
 8003b82:	9306      	str	r3, [sp, #24]
 8003b84:	e796      	b.n	8003ab4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b86:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003b8a:	e7da      	b.n	8003b42 <HAL_SD_ConfigWideBusOperation+0x162>
 8003b8c:	55e63b89 	.word	0x55e63b89
 8003b90:	017d7840 	.word	0x017d7840
 8003b94:	1fe00fff 	.word	0x1fe00fff
 8003b98:	02faf080 	.word	0x02faf080

08003b9c <HAL_SD_Init>:
{
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b087      	sub	sp, #28
  if (hsd == NULL)
 8003ba0:	b168      	cbz	r0, 8003bbe <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 8003ba2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d03e      	beq.n	8003c2e <HAL_SD_Init+0x92>
  hsd->State = HAL_SD_STATE_BUSY;
 8003bb0:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003bb2:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8003bb4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003bb8:	f7ff fd0e 	bl	80035d8 <HAL_SD_InitCard>
 8003bbc:	b118      	cbz	r0, 8003bc6 <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 8003bbe:	2601      	movs	r6, #1
}
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	b007      	add	sp, #28
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003bc6:	a901      	add	r1, sp, #4
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fe25 	bl	8003818 <HAL_SD_GetCardStatus>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1f5      	bne.n	8003bbe <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003bd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 8003bd4:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003bd8:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003bda:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8003bde:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003be0:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003be2:	d028      	beq.n	8003c36 <HAL_SD_Init+0x9a>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8003be4:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003be6:	68e1      	ldr	r1, [r4, #12]
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7ff fef9 	bl	80039e0 <HAL_SD_ConfigWideBusOperation>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d1e4      	bne.n	8003bbe <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 8003bf4:	f7fd f89a 	bl	8000d2c <HAL_GetTick>
 8003bf8:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003bfa:	e00c      	b.n	8003c16 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f000 f92e 	bl	8003e60 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c04:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003c08:	2804      	cmp	r0, #4
 8003c0a:	d01c      	beq.n	8003c46 <HAL_SD_Init+0xaa>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003c0c:	f7fd f88e 	bl	8000d2c <HAL_GetTick>
 8003c10:	1bc3      	subs	r3, r0, r7
 8003c12:	3301      	adds	r3, #1
 8003c14:	d01d      	beq.n	8003c52 <HAL_SD_Init+0xb6>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	0409      	lsls	r1, r1, #16
 8003c1c:	f001 f978 	bl	8004f10 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003c20:	4605      	mov	r5, r0
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d0ea      	beq.n	8003bfc <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 8003c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c28:	4301      	orrs	r1, r0
 8003c2a:	6361      	str	r1, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c2c:	e7ee      	b.n	8003c0c <HAL_SD_Init+0x70>
    hsd->Lock = HAL_UNLOCKED;
 8003c2e:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 8003c30:	f7fc fe3c 	bl	80008ac <HAL_SD_MspInit>
 8003c34:	e7bc      	b.n	8003bb0 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003c36:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003c38:	bf14      	ite	ne
 8003c3a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8003c3e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003c42:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c44:	e7cf      	b.n	8003be6 <HAL_SD_Init+0x4a>
  hsd->State = HAL_SD_STATE_READY;
 8003c46:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c48:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c4a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8003c4c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 8003c50:	e7b6      	b.n	8003bc0 <HAL_SD_Init+0x24>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8003c56:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8003c58:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003c5a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8003c5c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8003c60:	e7ae      	b.n	8003bc0 <HAL_SD_Init+0x24>
 8003c62:	bf00      	nop

08003c64 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c64:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 8003c66:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c68:	0409      	lsls	r1, r1, #16
{
 8003c6a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f001 f94f 	bl	8004f10 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003c72:	4601      	mov	r1, r0
 8003c74:	b120      	cbz	r0, 8003c80 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8003c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c78:	2000      	movs	r0, #0
 8003c7a:	4319      	orrs	r1, r3
 8003c7c:	6361      	str	r1, [r4, #52]	; 0x34
}
 8003c7e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	f000 f8ed 	bl	8003e60 <SDMMC_GetResponse>
  if (errorstate != HAL_SD_ERROR_NONE)
 8003c86:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8003c8a:	bd10      	pop	{r4, pc}

08003c8c <HAL_SPI_Init>:
  uint32_t crc_length = 0UL;
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	f000 80ad 	beq.w	8003dec <HAL_SPI_Init+0x160>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003c92:	6801      	ldr	r1, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c94:	2200      	movs	r2, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003c96:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_SPI_Init+0x16c>)
 8003c98:	4299      	cmp	r1, r3
{
 8003c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca0:	6282      	str	r2, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003ca2:	d017      	beq.n	8003cd4 <HAL_SPI_Init+0x48>
 8003ca4:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003ca8:	4299      	cmp	r1, r3
 8003caa:	d013      	beq.n	8003cd4 <HAL_SPI_Init+0x48>
 8003cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb0:	68c7      	ldr	r7, [r0, #12]
 8003cb2:	4299      	cmp	r1, r3
 8003cb4:	f000 8092 	beq.w	8003ddc <HAL_SPI_Init+0x150>
 8003cb8:	2f0f      	cmp	r7, #15
 8003cba:	d808      	bhi.n	8003cce <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003cbc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003cbe:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003cc2:	0972      	lsrs	r2, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 8003cc4:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8003cc6:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d916      	bls.n	8003cfc <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8003cce:	2001      	movs	r0, #1
}
 8003cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003cd4:	68e7      	ldr	r7, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003cd6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8003cd8:	f107 0308 	add.w	r3, r7, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003cdc:	4846      	ldr	r0, [pc, #280]	; (8003df8 <HAL_SPI_Init+0x16c>)
 8003cde:	4a47      	ldr	r2, [pc, #284]	; (8003dfc <HAL_SPI_Init+0x170>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003ce0:	0975      	lsrs	r5, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 8003ce2:	08db      	lsrs	r3, r3, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003ce4:	4291      	cmp	r1, r2
 8003ce6:	bf18      	it	ne
 8003ce8:	4281      	cmpne	r1, r0
  return data_size * fifo_threashold;
 8003cea:	fb05 3303 	mla	r3, r5, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003cee:	d003      	beq.n	8003cf8 <HAL_SPI_Init+0x6c>
 8003cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cf4:	4291      	cmp	r1, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_SPI_Init+0x70>
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d8e8      	bhi.n	8003cce <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8003d00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05f      	beq.n	8003dc8 <HAL_SPI_Init+0x13c>
 8003d08:	2500      	movs	r5, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d0a:	2202      	movs	r2, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d0c:	69a3      	ldr	r3, [r4, #24]
 8003d0e:	6860      	ldr	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d10:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8003d18:	680a      	ldr	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d1a:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	600a      	str	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d24:	d043      	beq.n	8003dae <HAL_SPI_Init+0x122>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d26:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d28:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003d2c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d2e:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d30:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8003d34:	4332      	orrs	r2, r6
 8003d36:	6926      	ldr	r6, [r4, #16]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d38:	431d      	orrs	r5, r3
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d3a:	6963      	ldr	r3, [r4, #20]
 8003d3c:	4332      	orrs	r2, r6
 8003d3e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d40:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d42:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003d44:	4313      	orrs	r3, r2
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d46:	608d      	str	r5, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003d48:	ea43 0208 	orr.w	r2, r3, r8
 8003d4c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003d4e:	ea42 0307 	orr.w	r3, r2, r7
 8003d52:	68a2      	ldr	r2, [r4, #8]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	4333      	orrs	r3, r6
 8003d58:	432b      	orrs	r3, r5
 8003d5a:	4303      	orrs	r3, r0
 8003d5c:	ea43 030c 	orr.w	r3, r3, ip
 8003d60:	60cb      	str	r3, [r1, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003d62:	b9b8      	cbnz	r0, 8003d94 <HAL_SPI_Init+0x108>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003d64:	688b      	ldr	r3, [r1, #8]
 8003d66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d6e:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003d70:	688b      	ldr	r3, [r1, #8]
 8003d72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7a:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d7c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	650b      	str	r3, [r1, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d84:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003d86:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d88:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d94:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	650b      	str	r3, [r1, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003d9c:	0243      	lsls	r3, r0, #9
 8003d9e:	d5f1      	bpl.n	8003d84 <HAL_SPI_Init+0xf8>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003da0:	68cb      	ldr	r3, [r1, #12]
 8003da2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
 8003dac:	e7ea      	b.n	8003d84 <HAL_SPI_Init+0xf8>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003dae:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8003db2:	d01d      	beq.n	8003df0 <HAL_SPI_Init+0x164>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d1b6      	bne.n	8003d26 <HAL_SPI_Init+0x9a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003db8:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8003dbc:	d1b3      	bne.n	8003d26 <HAL_SPI_Init+0x9a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003dbe:	680a      	ldr	r2, [r1, #0]
 8003dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dc4:	600a      	str	r2, [r1, #0]
 8003dc6:	e7ae      	b.n	8003d26 <HAL_SPI_Init+0x9a>
    HAL_SPI_MspInit(hspi);
 8003dc8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003dca:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8003dce:	f7fc fe1f 	bl	8000a10 <HAL_SPI_MspInit>
 8003dd2:	6821      	ldr	r1, [r4, #0]
 8003dd4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003dd6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003dd8:	68e7      	ldr	r7, [r4, #12]
 8003dda:	e796      	b.n	8003d0a <HAL_SPI_Init+0x7e>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003ddc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8003dde:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003de2:	0972      	lsrs	r2, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 8003de4:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8003de6:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003dea:	e785      	b.n	8003cf8 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003df0:	f1bc 0f00 	cmp.w	ip, #0
 8003df4:	d0e3      	beq.n	8003dbe <HAL_SPI_Init+0x132>
 8003df6:	e796      	b.n	8003d26 <HAL_SPI_Init+0x9a>
 8003df8:	40013000 	.word	0x40013000
 8003dfc:	40003800 	.word	0x40003800

08003e00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003e00:	b084      	sub	sp, #16
 8003e02:	b470      	push	{r4, r5, r6}
 8003e04:	ae04      	add	r6, sp, #16
 8003e06:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
             Init.ClockPowerSave      | \
             Init.BusWide             | \
 8003e08:	9c07      	ldr	r4, [sp, #28]

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);

  return HAL_OK;
}
 8003e0a:	2000      	movs	r0, #0
{
 8003e0c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8003e10:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003e12:	686e      	ldr	r6, [r5, #4]
             Init.ClockPowerSave      | \
 8003e14:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 8003e18:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8003e1a:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      | \
 8003e1c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003e1e:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <SDMMC_Init+0x30>)
             Init.BusWide             | \
 8003e20:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003e22:	4032      	ands	r2, r6
             Init.HardwareFlowControl | \
 8003e24:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003e26:	4313      	orrs	r3, r2
 8003e28:	606b      	str	r3, [r5, #4]
}
 8003e2a:	bc70      	pop	{r4, r5, r6}
 8003e2c:	b004      	add	sp, #16
 8003e2e:	4770      	bx	lr
 8003e30:	ffc02c00 	.word	0xffc02c00

08003e34 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8003e34:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop

08003e3c <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8003e3c:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8003e3e:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8003e40:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8003e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003e46:	4770      	bx	lr

08003e48 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8003e48:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8003e4a:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	f042 0203 	orr.w	r2, r2, #3
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003e58:	6800      	ldr	r0, [r0, #0]
}
 8003e5a:	f000 0003 	and.w	r0, r0, #3
 8003e5e:	4770      	bx	lr

08003e60 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003e60:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8003e62:	5840      	ldr	r0, [r0, r1]
}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8003e68:	b430      	push	{r4, r5}
 8003e6a:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003e6c:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 8003e6e:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8003e70:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8003e74:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8003e76:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003e78:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   | \
 8003e7a:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8003e7c:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   | \
 8003e7e:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8003e80:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e82:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
 8003e84:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e86:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 8003e8a:	430b      	orrs	r3, r1
}
 8003e8c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <SDMMC_CmdBlockLength+0x130>)
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003e9a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003e9c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003e9e:	f241 1410 	movw	r4, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003ea2:	4d49      	ldr	r5, [pc, #292]	; (8003fc8 <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003ea4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003ea6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003eaa:	4948      	ldr	r1, [pc, #288]	; (8003fcc <SDMMC_CmdBlockLength+0x138>)
 8003eac:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003eae:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003eb0:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003eb6:	430c      	orrs	r4, r1
 8003eb8:	60c4      	str	r4, [r0, #12]

  do
  {
    if (count-- == 0U)
 8003eba:	b14b      	cbz	r3, 8003ed0 <SDMMC_CmdBlockLength+0x3c>
 8003ebc:	1e5a      	subs	r2, r3, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8003ebe:	4944      	ldr	r1, [pc, #272]	; (8003fd0 <SDMMC_CmdBlockLength+0x13c>)
    sta_reg = SDMMCx->STA;
 8003ec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003ec2:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8003ec4:	420b      	tst	r3, r1
 8003ec6:	d001      	beq.n	8003ecc <SDMMC_CmdBlockLength+0x38>
 8003ec8:	049c      	lsls	r4, r3, #18
 8003eca:	d506      	bpl.n	8003eda <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8003ecc:	1c55      	adds	r5, r2, #1
 8003ece:	d1f7      	bne.n	8003ec0 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bc30      	pop	{r4, r5}
 8003ed8:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003eda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003edc:	075b      	lsls	r3, r3, #29
 8003ede:	d43d      	bmi.n	8003f5c <SDMMC_CmdBlockLength+0xc8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003ee0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ee2:	f013 0301 	ands.w	r3, r3, #1
 8003ee6:	d134      	bne.n	8003f52 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003ee8:	4b3a      	ldr	r3, [pc, #232]	; (8003fd4 <SDMMC_CmdBlockLength+0x140>)
 8003eea:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003eec:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d131      	bne.n	8003f58 <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003ef4:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <SDMMC_CmdBlockLength+0x144>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ea      	beq.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	db2f      	blt.n	8003f62 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f02:	0055      	lsls	r5, r2, #1
 8003f04:	d430      	bmi.n	8003f68 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f06:	0094      	lsls	r4, r2, #2
 8003f08:	d430      	bmi.n	8003f6c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f0a:	00d0      	lsls	r0, r2, #3
 8003f0c:	d430      	bmi.n	8003f70 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f0e:	0111      	lsls	r1, r2, #4
 8003f10:	d431      	bmi.n	8003f76 <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f12:	0155      	lsls	r5, r2, #5
 8003f14:	d432      	bmi.n	8003f7c <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f16:	01d4      	lsls	r4, r2, #7
 8003f18:	d433      	bmi.n	8003f82 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f1a:	0210      	lsls	r0, r2, #8
 8003f1c:	d434      	bmi.n	8003f88 <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f1e:	0251      	lsls	r1, r2, #9
 8003f20:	d435      	bmi.n	8003f8e <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f22:	0295      	lsls	r5, r2, #10
 8003f24:	d436      	bmi.n	8003f94 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f26:	02d4      	lsls	r4, r2, #11
 8003f28:	d437      	bmi.n	8003f9a <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f2a:	0350      	lsls	r0, r2, #13
 8003f2c:	d438      	bmi.n	8003fa0 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f2e:	0391      	lsls	r1, r2, #14
 8003f30:	d439      	bmi.n	8003fa6 <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f32:	03d5      	lsls	r5, r2, #15
 8003f34:	d43a      	bmi.n	8003fac <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f36:	0414      	lsls	r4, r2, #16
 8003f38:	d43b      	bmi.n	8003fb2 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f3a:	0450      	lsls	r0, r2, #17
 8003f3c:	d43f      	bmi.n	8003fbe <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f3e:	0491      	lsls	r1, r2, #18
 8003f40:	d43a      	bmi.n	8003fb8 <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f42:	f012 0f08 	tst.w	r2, #8
 8003f46:	bf14      	ite	ne
 8003f48:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003f4c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003f50:	e7c0      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003f52:	2201      	movs	r2, #1
 8003f54:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f56:	e7bd      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e7bb      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f60:	e7b8      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f66:	e7b5      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f68:	2340      	movs	r3, #64	; 0x40
 8003f6a:	e7b3      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	e7b1      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f74:	e7ae      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f7a:	e7ab      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f80:	e7a8      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f86:	e7a5      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f8c:	e7a2      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f92:	e79f      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f98:	e79c      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	e799      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa4:	e796      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003fa6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003faa:	e793      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003fb0:	e790      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fb6:	e78d      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fbc:	e78a      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003fbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fc2:	e787      	b.n	8003ed4 <SDMMC_CmdBlockLength+0x40>
 8003fc4:	24000008 	.word	0x24000008
 8003fc8:	10624dd3 	.word	0x10624dd3
 8003fcc:	fffee0c0 	.word	0xfffee0c0
 8003fd0:	00200045 	.word	0x00200045
 8003fd4:	002000c5 	.word	0x002000c5
 8003fd8:	fdffe008 	.word	0xfdffe008

08003fdc <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <SDMMC_CmdReadSingleBlock+0x130>)
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003fe2:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003fe4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003fe6:	f241 1411 	movw	r4, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003fea:	4d49      	ldr	r5, [pc, #292]	; (8004110 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003fec:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003fee:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003ff2:	4948      	ldr	r1, [pc, #288]	; (8004114 <SDMMC_CmdReadSingleBlock+0x138>)
 8003ff4:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003ff6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003ff8:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8003ffe:	430c      	orrs	r4, r1
 8004000:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004002:	b14b      	cbz	r3, 8004018 <SDMMC_CmdReadSingleBlock+0x3c>
 8004004:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004006:	4944      	ldr	r1, [pc, #272]	; (8004118 <SDMMC_CmdReadSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8004008:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800400a:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800400c:	420b      	tst	r3, r1
 800400e:	d001      	beq.n	8004014 <SDMMC_CmdReadSingleBlock+0x38>
 8004010:	049c      	lsls	r4, r3, #18
 8004012:	d506      	bpl.n	8004022 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 8004014:	1c55      	adds	r5, r2, #1
 8004016:	d1f7      	bne.n	8004008 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800401c:	4618      	mov	r0, r3
 800401e:	bc30      	pop	{r4, r5}
 8004020:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004022:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004024:	075b      	lsls	r3, r3, #29
 8004026:	d43d      	bmi.n	80040a4 <SDMMC_CmdReadSingleBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004028:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800402a:	f013 0301 	ands.w	r3, r3, #1
 800402e:	d134      	bne.n	800409a <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004030:	4b3a      	ldr	r3, [pc, #232]	; (800411c <SDMMC_CmdReadSingleBlock+0x140>)
 8004032:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004034:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b11      	cmp	r3, #17
 800403a:	d131      	bne.n	80040a0 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 800403c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <SDMMC_CmdReadSingleBlock+0x144>)
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ea      	beq.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004046:	2a00      	cmp	r2, #0
 8004048:	db2f      	blt.n	80040aa <SDMMC_CmdReadSingleBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800404a:	0055      	lsls	r5, r2, #1
 800404c:	d430      	bmi.n	80040b0 <SDMMC_CmdReadSingleBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800404e:	0094      	lsls	r4, r2, #2
 8004050:	d430      	bmi.n	80040b4 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004052:	00d0      	lsls	r0, r2, #3
 8004054:	d430      	bmi.n	80040b8 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004056:	0111      	lsls	r1, r2, #4
 8004058:	d431      	bmi.n	80040be <SDMMC_CmdReadSingleBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800405a:	0155      	lsls	r5, r2, #5
 800405c:	d432      	bmi.n	80040c4 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800405e:	01d4      	lsls	r4, r2, #7
 8004060:	d433      	bmi.n	80040ca <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004062:	0210      	lsls	r0, r2, #8
 8004064:	d434      	bmi.n	80040d0 <SDMMC_CmdReadSingleBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004066:	0251      	lsls	r1, r2, #9
 8004068:	d435      	bmi.n	80040d6 <SDMMC_CmdReadSingleBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800406a:	0295      	lsls	r5, r2, #10
 800406c:	d436      	bmi.n	80040dc <SDMMC_CmdReadSingleBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800406e:	02d4      	lsls	r4, r2, #11
 8004070:	d437      	bmi.n	80040e2 <SDMMC_CmdReadSingleBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004072:	0350      	lsls	r0, r2, #13
 8004074:	d438      	bmi.n	80040e8 <SDMMC_CmdReadSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004076:	0391      	lsls	r1, r2, #14
 8004078:	d439      	bmi.n	80040ee <SDMMC_CmdReadSingleBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800407a:	03d5      	lsls	r5, r2, #15
 800407c:	d43a      	bmi.n	80040f4 <SDMMC_CmdReadSingleBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800407e:	0414      	lsls	r4, r2, #16
 8004080:	d43b      	bmi.n	80040fa <SDMMC_CmdReadSingleBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004082:	0450      	lsls	r0, r2, #17
 8004084:	d43f      	bmi.n	8004106 <SDMMC_CmdReadSingleBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004086:	0491      	lsls	r1, r2, #18
 8004088:	d43a      	bmi.n	8004100 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800408a:	f012 0f08 	tst.w	r2, #8
 800408e:	bf14      	ite	ne
 8004090:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004094:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004098:	e7c0      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800409a:	2201      	movs	r2, #1
 800409c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800409e:	e7bd      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e7bb      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80040a4:	2304      	movs	r3, #4
 80040a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040a8:	e7b8      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80040aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ae:	e7b5      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80040b0:	2340      	movs	r3, #64	; 0x40
 80040b2:	e7b3      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	e7b1      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80040b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040bc:	e7ae      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80040be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c2:	e7ab      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80040c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c8:	e7a8      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80040ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ce:	e7a5      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80040d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d4:	e7a2      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80040d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040da:	e79f      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80040dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040e0:	e79c      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	e799      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80040e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ec:	e796      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80040ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040f2:	e793      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80040f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80040f8:	e790      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80040fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040fe:	e78d      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004104:	e78a      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004106:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800410a:	e787      	b.n	800401c <SDMMC_CmdReadSingleBlock+0x40>
 800410c:	24000008 	.word	0x24000008
 8004110:	10624dd3 	.word	0x10624dd3
 8004114:	fffee0c0 	.word	0xfffee0c0
 8004118:	00200045 	.word	0x00200045
 800411c:	002000c5 	.word	0x002000c5
 8004120:	fdffe008 	.word	0xfdffe008

08004124 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004124:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <SDMMC_CmdReadMultiBlock+0x130>)
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800412a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800412c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800412e:	f241 1412 	movw	r4, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004132:	4d49      	ldr	r5, [pc, #292]	; (8004258 <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8004134:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004136:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800413a:	4948      	ldr	r1, [pc, #288]	; (800425c <SDMMC_CmdReadMultiBlock+0x138>)
 800413c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800413e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004140:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004142:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004146:	430c      	orrs	r4, r1
 8004148:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800414a:	b14b      	cbz	r3, 8004160 <SDMMC_CmdReadMultiBlock+0x3c>
 800414c:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800414e:	4944      	ldr	r1, [pc, #272]	; (8004260 <SDMMC_CmdReadMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8004150:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004152:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004154:	420b      	tst	r3, r1
 8004156:	d001      	beq.n	800415c <SDMMC_CmdReadMultiBlock+0x38>
 8004158:	049c      	lsls	r4, r3, #18
 800415a:	d506      	bpl.n	800416a <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 800415c:	1c55      	adds	r5, r2, #1
 800415e:	d1f7      	bne.n	8004150 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004164:	4618      	mov	r0, r3
 8004166:	bc30      	pop	{r4, r5}
 8004168:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800416a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800416c:	075b      	lsls	r3, r3, #29
 800416e:	d43d      	bmi.n	80041ec <SDMMC_CmdReadMultiBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004170:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004172:	f013 0301 	ands.w	r3, r3, #1
 8004176:	d134      	bne.n	80041e2 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <SDMMC_CmdReadMultiBlock+0x140>)
 800417a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800417c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b12      	cmp	r3, #18
 8004182:	d131      	bne.n	80041e8 <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8004184:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <SDMMC_CmdReadMultiBlock+0x144>)
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ea      	beq.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800418e:	2a00      	cmp	r2, #0
 8004190:	db2f      	blt.n	80041f2 <SDMMC_CmdReadMultiBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004192:	0055      	lsls	r5, r2, #1
 8004194:	d430      	bmi.n	80041f8 <SDMMC_CmdReadMultiBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004196:	0094      	lsls	r4, r2, #2
 8004198:	d430      	bmi.n	80041fc <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800419a:	00d0      	lsls	r0, r2, #3
 800419c:	d430      	bmi.n	8004200 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800419e:	0111      	lsls	r1, r2, #4
 80041a0:	d431      	bmi.n	8004206 <SDMMC_CmdReadMultiBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80041a2:	0155      	lsls	r5, r2, #5
 80041a4:	d432      	bmi.n	800420c <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80041a6:	01d4      	lsls	r4, r2, #7
 80041a8:	d433      	bmi.n	8004212 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80041aa:	0210      	lsls	r0, r2, #8
 80041ac:	d434      	bmi.n	8004218 <SDMMC_CmdReadMultiBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80041ae:	0251      	lsls	r1, r2, #9
 80041b0:	d435      	bmi.n	800421e <SDMMC_CmdReadMultiBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80041b2:	0295      	lsls	r5, r2, #10
 80041b4:	d436      	bmi.n	8004224 <SDMMC_CmdReadMultiBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80041b6:	02d4      	lsls	r4, r2, #11
 80041b8:	d437      	bmi.n	800422a <SDMMC_CmdReadMultiBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80041ba:	0350      	lsls	r0, r2, #13
 80041bc:	d438      	bmi.n	8004230 <SDMMC_CmdReadMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80041be:	0391      	lsls	r1, r2, #14
 80041c0:	d439      	bmi.n	8004236 <SDMMC_CmdReadMultiBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80041c2:	03d5      	lsls	r5, r2, #15
 80041c4:	d43a      	bmi.n	800423c <SDMMC_CmdReadMultiBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80041c6:	0414      	lsls	r4, r2, #16
 80041c8:	d43b      	bmi.n	8004242 <SDMMC_CmdReadMultiBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80041ca:	0450      	lsls	r0, r2, #17
 80041cc:	d43f      	bmi.n	800424e <SDMMC_CmdReadMultiBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80041ce:	0491      	lsls	r1, r2, #18
 80041d0:	d43a      	bmi.n	8004248 <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80041d2:	f012 0f08 	tst.w	r2, #8
 80041d6:	bf14      	ite	ne
 80041d8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80041dc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80041e0:	e7c0      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80041e2:	2201      	movs	r2, #1
 80041e4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041e6:	e7bd      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e7bb      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80041ec:	2304      	movs	r3, #4
 80041ee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041f0:	e7b8      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80041f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f6:	e7b5      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80041f8:	2340      	movs	r3, #64	; 0x40
 80041fa:	e7b3      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	e7b1      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004204:	e7ae      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800420a:	e7ab      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004210:	e7a8      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004216:	e7a5      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800421c:	e7a2      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800421e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004222:	e79f      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004228:	e79c      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	e799      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004234:	e796      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004236:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800423a:	e793      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800423c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004240:	e790      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004242:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004246:	e78d      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004248:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800424c:	e78a      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800424e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004252:	e787      	b.n	8004164 <SDMMC_CmdReadMultiBlock+0x40>
 8004254:	24000008 	.word	0x24000008
 8004258:	10624dd3 	.word	0x10624dd3
 800425c:	fffee0c0 	.word	0xfffee0c0
 8004260:	00200045 	.word	0x00200045
 8004264:	002000c5 	.word	0x002000c5
 8004268:	fdffe008 	.word	0xfdffe008

0800426c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <SDMMC_CmdWriteSingleBlock+0x130>)
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004272:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004274:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004276:	f241 1418 	movw	r4, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800427a:	4d49      	ldr	r5, [pc, #292]	; (80043a0 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 800427c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800427e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004282:	4948      	ldr	r1, [pc, #288]	; (80043a4 <SDMMC_CmdWriteSingleBlock+0x138>)
 8004284:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004286:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004288:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800428a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800428e:	430c      	orrs	r4, r1
 8004290:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004292:	b14b      	cbz	r3, 80042a8 <SDMMC_CmdWriteSingleBlock+0x3c>
 8004294:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004296:	4944      	ldr	r1, [pc, #272]	; (80043a8 <SDMMC_CmdWriteSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8004298:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800429a:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800429c:	420b      	tst	r3, r1
 800429e:	d001      	beq.n	80042a4 <SDMMC_CmdWriteSingleBlock+0x38>
 80042a0:	049c      	lsls	r4, r3, #18
 80042a2:	d506      	bpl.n	80042b2 <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 80042a4:	1c55      	adds	r5, r2, #1
 80042a6:	d1f7      	bne.n	8004298 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80042a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bc30      	pop	{r4, r5}
 80042b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80042b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042b4:	075b      	lsls	r3, r3, #29
 80042b6:	d43d      	bmi.n	8004334 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80042b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042ba:	f013 0301 	ands.w	r3, r3, #1
 80042be:	d134      	bne.n	800432a <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <SDMMC_CmdWriteSingleBlock+0x140>)
 80042c2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80042c4:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b18      	cmp	r3, #24
 80042ca:	d131      	bne.n	8004330 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80042cc:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042ce:	4b38      	ldr	r3, [pc, #224]	; (80043b0 <SDMMC_CmdWriteSingleBlock+0x144>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ea      	beq.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	db2f      	blt.n	800433a <SDMMC_CmdWriteSingleBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80042da:	0055      	lsls	r5, r2, #1
 80042dc:	d430      	bmi.n	8004340 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80042de:	0094      	lsls	r4, r2, #2
 80042e0:	d430      	bmi.n	8004344 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80042e2:	00d0      	lsls	r0, r2, #3
 80042e4:	d430      	bmi.n	8004348 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80042e6:	0111      	lsls	r1, r2, #4
 80042e8:	d431      	bmi.n	800434e <SDMMC_CmdWriteSingleBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80042ea:	0155      	lsls	r5, r2, #5
 80042ec:	d432      	bmi.n	8004354 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80042ee:	01d4      	lsls	r4, r2, #7
 80042f0:	d433      	bmi.n	800435a <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80042f2:	0210      	lsls	r0, r2, #8
 80042f4:	d434      	bmi.n	8004360 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042f6:	0251      	lsls	r1, r2, #9
 80042f8:	d435      	bmi.n	8004366 <SDMMC_CmdWriteSingleBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042fa:	0295      	lsls	r5, r2, #10
 80042fc:	d436      	bmi.n	800436c <SDMMC_CmdWriteSingleBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042fe:	02d4      	lsls	r4, r2, #11
 8004300:	d437      	bmi.n	8004372 <SDMMC_CmdWriteSingleBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004302:	0350      	lsls	r0, r2, #13
 8004304:	d438      	bmi.n	8004378 <SDMMC_CmdWriteSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004306:	0391      	lsls	r1, r2, #14
 8004308:	d439      	bmi.n	800437e <SDMMC_CmdWriteSingleBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800430a:	03d5      	lsls	r5, r2, #15
 800430c:	d43a      	bmi.n	8004384 <SDMMC_CmdWriteSingleBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800430e:	0414      	lsls	r4, r2, #16
 8004310:	d43b      	bmi.n	800438a <SDMMC_CmdWriteSingleBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004312:	0450      	lsls	r0, r2, #17
 8004314:	d43f      	bmi.n	8004396 <SDMMC_CmdWriteSingleBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004316:	0491      	lsls	r1, r2, #18
 8004318:	d43a      	bmi.n	8004390 <SDMMC_CmdWriteSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800431a:	f012 0f08 	tst.w	r2, #8
 800431e:	bf14      	ite	ne
 8004320:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004324:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004328:	e7c0      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800432a:	2201      	movs	r2, #1
 800432c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800432e:	e7bd      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004330:	2301      	movs	r3, #1
 8004332:	e7bb      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004334:	2304      	movs	r3, #4
 8004336:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004338:	e7b8      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	e7b5      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	e7b3      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	e7b1      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434c:	e7ae      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800434e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004352:	e7ab      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004358:	e7a8      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800435a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800435e:	e7a5      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004364:	e7a2      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436a:	e79f      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800436c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004370:	e79c      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	e799      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437c:	e796      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800437e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004382:	e793      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004388:	e790      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800438a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800438e:	e78d      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004394:	e78a      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004396:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800439a:	e787      	b.n	80042ac <SDMMC_CmdWriteSingleBlock+0x40>
 800439c:	24000008 	.word	0x24000008
 80043a0:	10624dd3 	.word	0x10624dd3
 80043a4:	fffee0c0 	.word	0xfffee0c0
 80043a8:	00200045 	.word	0x00200045
 80043ac:	002000c5 	.word	0x002000c5
 80043b0:	fdffe008 	.word	0xfdffe008

080043b4 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <SDMMC_CmdWriteMultiBlock+0x130>)
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80043ba:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043bc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80043be:	f241 1419 	movw	r4, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043c2:	4d49      	ldr	r5, [pc, #292]	; (80044e8 <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80043c4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043c6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80043ca:	4948      	ldr	r1, [pc, #288]	; (80044ec <SDMMC_CmdWriteMultiBlock+0x138>)
 80043cc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043ce:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80043d0:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80043d6:	430c      	orrs	r4, r1
 80043d8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80043da:	b14b      	cbz	r3, 80043f0 <SDMMC_CmdWriteMultiBlock+0x3c>
 80043dc:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80043de:	4944      	ldr	r1, [pc, #272]	; (80044f0 <SDMMC_CmdWriteMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 80043e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80043e2:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80043e4:	420b      	tst	r3, r1
 80043e6:	d001      	beq.n	80043ec <SDMMC_CmdWriteMultiBlock+0x38>
 80043e8:	049c      	lsls	r4, r3, #18
 80043ea:	d506      	bpl.n	80043fa <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 80043ec:	1c55      	adds	r5, r2, #1
 80043ee:	d1f7      	bne.n	80043e0 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80043f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bc30      	pop	{r4, r5}
 80043f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80043fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043fc:	075b      	lsls	r3, r3, #29
 80043fe:	d43d      	bmi.n	800447c <SDMMC_CmdWriteMultiBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004400:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004402:	f013 0301 	ands.w	r3, r3, #1
 8004406:	d134      	bne.n	8004472 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004408:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <SDMMC_CmdWriteMultiBlock+0x140>)
 800440a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800440c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b19      	cmp	r3, #25
 8004412:	d131      	bne.n	8004478 <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8004414:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <SDMMC_CmdWriteMultiBlock+0x144>)
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ea      	beq.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800441e:	2a00      	cmp	r2, #0
 8004420:	db2f      	blt.n	8004482 <SDMMC_CmdWriteMultiBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004422:	0055      	lsls	r5, r2, #1
 8004424:	d430      	bmi.n	8004488 <SDMMC_CmdWriteMultiBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004426:	0094      	lsls	r4, r2, #2
 8004428:	d430      	bmi.n	800448c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800442a:	00d0      	lsls	r0, r2, #3
 800442c:	d430      	bmi.n	8004490 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800442e:	0111      	lsls	r1, r2, #4
 8004430:	d431      	bmi.n	8004496 <SDMMC_CmdWriteMultiBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004432:	0155      	lsls	r5, r2, #5
 8004434:	d432      	bmi.n	800449c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004436:	01d4      	lsls	r4, r2, #7
 8004438:	d433      	bmi.n	80044a2 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800443a:	0210      	lsls	r0, r2, #8
 800443c:	d434      	bmi.n	80044a8 <SDMMC_CmdWriteMultiBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800443e:	0251      	lsls	r1, r2, #9
 8004440:	d435      	bmi.n	80044ae <SDMMC_CmdWriteMultiBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004442:	0295      	lsls	r5, r2, #10
 8004444:	d436      	bmi.n	80044b4 <SDMMC_CmdWriteMultiBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004446:	02d4      	lsls	r4, r2, #11
 8004448:	d437      	bmi.n	80044ba <SDMMC_CmdWriteMultiBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800444a:	0350      	lsls	r0, r2, #13
 800444c:	d438      	bmi.n	80044c0 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800444e:	0391      	lsls	r1, r2, #14
 8004450:	d439      	bmi.n	80044c6 <SDMMC_CmdWriteMultiBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004452:	03d5      	lsls	r5, r2, #15
 8004454:	d43a      	bmi.n	80044cc <SDMMC_CmdWriteMultiBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004456:	0414      	lsls	r4, r2, #16
 8004458:	d43b      	bmi.n	80044d2 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800445a:	0450      	lsls	r0, r2, #17
 800445c:	d43f      	bmi.n	80044de <SDMMC_CmdWriteMultiBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800445e:	0491      	lsls	r1, r2, #18
 8004460:	d43a      	bmi.n	80044d8 <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004462:	f012 0f08 	tst.w	r2, #8
 8004466:	bf14      	ite	ne
 8004468:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800446c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004470:	e7c0      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004472:	2201      	movs	r2, #1
 8004474:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004476:	e7bd      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004478:	2301      	movs	r3, #1
 800447a:	e7bb      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800447c:	2304      	movs	r3, #4
 800447e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004480:	e7b8      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004486:	e7b5      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	e7b3      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	e7b1      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004494:	e7ae      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800449a:	e7ab      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800449c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a0:	e7a8      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80044a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044a6:	e7a5      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80044a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ac:	e7a2      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80044ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b2:	e79f      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80044b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044b8:	e79c      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	e799      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80044c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c4:	e796      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80044c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044ca:	e793      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80044cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044d0:	e790      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80044d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044d6:	e78d      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80044d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044dc:	e78a      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80044de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044e2:	e787      	b.n	80043f4 <SDMMC_CmdWriteMultiBlock+0x40>
 80044e4:	24000008 	.word	0x24000008
 80044e8:	10624dd3 	.word	0x10624dd3
 80044ec:	fffee0c0 	.word	0xfffee0c0
 80044f0:	00200045 	.word	0x00200045
 80044f4:	002000c5 	.word	0x002000c5
 80044f8:	fdffe008 	.word	0xfdffe008

080044fc <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80044fc:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80044fe:	4b7d      	ldr	r3, [pc, #500]	; (80046f4 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8004500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004504:	497c      	ldr	r1, [pc, #496]	; (80046f8 <SDMMC_CmdStopTransfer+0x1fc>)
 8004506:	681b      	ldr	r3, [r3, #0]
{
 8004508:	b470      	push	{r4, r5, r6}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800450a:	60c2      	str	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800450c:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800450e:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004510:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004514:	4c79      	ldr	r4, [pc, #484]	; (80046fc <SDMMC_CmdStopTransfer+0x200>)
 8004516:	f241 110c 	movw	r1, #4364	; 0x110c
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800451a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800451e:	0a5b      	lsrs	r3, r3, #9
 8004520:	4a77      	ldr	r2, [pc, #476]	; (8004700 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8004522:	60c5      	str	r5, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8004524:	6086      	str	r6, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004526:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004528:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800452c:	402c      	ands	r4, r5
 800452e:	4321      	orrs	r1, r4
 8004530:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8004532:	b14b      	cbz	r3, 8004548 <SDMMC_CmdStopTransfer+0x4c>
 8004534:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004536:	4973      	ldr	r1, [pc, #460]	; (8004704 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8004538:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800453a:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800453c:	420b      	tst	r3, r1
 800453e:	d001      	beq.n	8004544 <SDMMC_CmdStopTransfer+0x48>
 8004540:	049c      	lsls	r4, r3, #18
 8004542:	d50a      	bpl.n	800455a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8004544:	1c55      	adds	r5, r2, #1
 8004546:	d1f7      	bne.n	8004538 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004548:	68c2      	ldr	r2, [r0, #12]
 800454a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800454e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004552:	60c2      	str	r2, [r0, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	bc70      	pop	{r4, r5, r6}
 8004558:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800455a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800455c:	075a      	lsls	r2, r3, #29
 800455e:	d454      	bmi.n	800460a <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004560:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004562:	f013 0301 	ands.w	r3, r3, #1
 8004566:	d13c      	bne.n	80045e2 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004568:	4a67      	ldr	r2, [pc, #412]	; (8004708 <SDMMC_CmdStopTransfer+0x20c>)
 800456a:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800456c:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	2a0c      	cmp	r2, #12
 8004572:	d144      	bne.n	80045fe <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8004574:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004576:	4965      	ldr	r1, [pc, #404]	; (800470c <SDMMC_CmdStopTransfer+0x210>)
 8004578:	4011      	ands	r1, r2
 800457a:	2900      	cmp	r1, #0
 800457c:	d038      	beq.n	80045f0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800457e:	2a00      	cmp	r2, #0
 8004580:	db36      	blt.n	80045f0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004582:	0053      	lsls	r3, r2, #1
 8004584:	d448      	bmi.n	8004618 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004586:	0096      	lsls	r6, r2, #2
 8004588:	d44c      	bmi.n	8004624 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800458a:	00d5      	lsls	r5, r2, #3
 800458c:	d450      	bmi.n	8004630 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800458e:	0114      	lsls	r4, r2, #4
 8004590:	d455      	bmi.n	800463e <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	d45a      	bmi.n	800464c <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004596:	01d3      	lsls	r3, r2, #7
 8004598:	d45f      	bmi.n	800465a <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800459a:	0216      	lsls	r6, r2, #8
 800459c:	d464      	bmi.n	8004668 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800459e:	0255      	lsls	r5, r2, #9
 80045a0:	d469      	bmi.n	8004676 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80045a2:	0294      	lsls	r4, r2, #10
 80045a4:	d46e      	bmi.n	8004684 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80045a6:	02d1      	lsls	r1, r2, #11
 80045a8:	d473      	bmi.n	8004692 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80045aa:	0353      	lsls	r3, r2, #13
 80045ac:	d478      	bmi.n	80046a0 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80045ae:	0396      	lsls	r6, r2, #14
 80045b0:	d47d      	bmi.n	80046ae <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80045b2:	03d5      	lsls	r5, r2, #15
 80045b4:	f100 8082 	bmi.w	80046bc <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80045b8:	0414      	lsls	r4, r2, #16
 80045ba:	f100 8086 	bmi.w	80046ca <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80045be:	0451      	lsls	r1, r2, #17
 80045c0:	f100 8091 	bmi.w	80046e6 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80045c4:	0493      	lsls	r3, r2, #18
 80045c6:	f100 8087 	bmi.w	80046d8 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80045ca:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045ce:	68c2      	ldr	r2, [r0, #12]
 80045d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80045d4:	bf14      	ite	ne
 80045d6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80045da:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045de:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80045e0:	e7b8      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80045e2:	2201      	movs	r2, #1
 80045e4:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045e6:	68c2      	ldr	r2, [r0, #12]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ec:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80045ee:	e7b1      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045f0:	68c2      	ldr	r2, [r0, #12]
 80045f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 80045f6:	bc70      	pop	{r4, r5, r6}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045f8:	60c2      	str	r2, [r0, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80045fe:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004600:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004606:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004608:	e7a4      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800460a:	2304      	movs	r3, #4
 800460c:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800460e:	68c2      	ldr	r2, [r0, #12]
 8004610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004614:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004616:	e79d      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004618:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800461a:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800461c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004620:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004622:	e797      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004624:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004626:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800462e:	e791      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004630:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004632:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800463c:	e78a      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800463e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004640:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800464a:	e783      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800464c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800464e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004656:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004658:	e77c      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800465a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800465c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004664:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004666:	e775      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004668:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800466a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800466e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004672:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004674:	e76e      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004676:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800467c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004680:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004682:	e767      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004684:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800468a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8004690:	e760      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004692:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8004694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8004698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800469c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800469e:	e759      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046a0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80046a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046aa:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046ac:	e752      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046ae:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80046b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046ba:	e74b      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046bc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80046be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046c8:	e744      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046ca:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046d6:	e73d      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046d8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 80046da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046e4:	e736      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046e6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80046e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80046ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80046f2:	e72f      	b.n	8004554 <SDMMC_CmdStopTransfer+0x58>
 80046f4:	24000008 	.word	0x24000008
 80046f8:	10624dd3 	.word	0x10624dd3
 80046fc:	fffee0c0 	.word	0xfffee0c0
 8004700:	05f5e100 	.word	0x05f5e100
 8004704:	00200045 	.word	0x00200045
 8004708:	002000c5 	.word	0x002000c5
 800470c:	fdffe008 	.word	0xfdffe008

08004710 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004710:	4b4b      	ldr	r3, [pc, #300]	; (8004840 <SDMMC_CmdSelDesel+0x130>)
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004716:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004718:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800471a:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800471e:	4d49      	ldr	r5, [pc, #292]	; (8004844 <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 8004720:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004722:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004726:	4948      	ldr	r1, [pc, #288]	; (8004848 <SDMMC_CmdSelDesel+0x138>)
 8004728:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800472a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800472c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800472e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004732:	430c      	orrs	r4, r1
 8004734:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004736:	b14b      	cbz	r3, 800474c <SDMMC_CmdSelDesel+0x3c>
 8004738:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800473a:	4944      	ldr	r1, [pc, #272]	; (800484c <SDMMC_CmdSelDesel+0x13c>)
    sta_reg = SDMMCx->STA;
 800473c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800473e:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004740:	420b      	tst	r3, r1
 8004742:	d001      	beq.n	8004748 <SDMMC_CmdSelDesel+0x38>
 8004744:	049c      	lsls	r4, r3, #18
 8004746:	d506      	bpl.n	8004756 <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 8004748:	1c55      	adds	r5, r2, #1
 800474a:	d1f7      	bne.n	800473c <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800474c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004750:	4618      	mov	r0, r3
 8004752:	bc30      	pop	{r4, r5}
 8004754:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004756:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004758:	075b      	lsls	r3, r3, #29
 800475a:	d43d      	bmi.n	80047d8 <SDMMC_CmdSelDesel+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800475c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800475e:	f013 0301 	ands.w	r3, r3, #1
 8004762:	d134      	bne.n	80047ce <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004764:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <SDMMC_CmdSelDesel+0x140>)
 8004766:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004768:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b07      	cmp	r3, #7
 800476e:	d131      	bne.n	80047d4 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8004770:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004772:	4b38      	ldr	r3, [pc, #224]	; (8004854 <SDMMC_CmdSelDesel+0x144>)
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ea      	beq.n	8004750 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800477a:	2a00      	cmp	r2, #0
 800477c:	db2f      	blt.n	80047de <SDMMC_CmdSelDesel+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800477e:	0055      	lsls	r5, r2, #1
 8004780:	d430      	bmi.n	80047e4 <SDMMC_CmdSelDesel+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004782:	0094      	lsls	r4, r2, #2
 8004784:	d430      	bmi.n	80047e8 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004786:	00d0      	lsls	r0, r2, #3
 8004788:	d430      	bmi.n	80047ec <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800478a:	0111      	lsls	r1, r2, #4
 800478c:	d431      	bmi.n	80047f2 <SDMMC_CmdSelDesel+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800478e:	0155      	lsls	r5, r2, #5
 8004790:	d432      	bmi.n	80047f8 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004792:	01d4      	lsls	r4, r2, #7
 8004794:	d433      	bmi.n	80047fe <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004796:	0210      	lsls	r0, r2, #8
 8004798:	d434      	bmi.n	8004804 <SDMMC_CmdSelDesel+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800479a:	0251      	lsls	r1, r2, #9
 800479c:	d435      	bmi.n	800480a <SDMMC_CmdSelDesel+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800479e:	0295      	lsls	r5, r2, #10
 80047a0:	d436      	bmi.n	8004810 <SDMMC_CmdSelDesel+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80047a2:	02d4      	lsls	r4, r2, #11
 80047a4:	d437      	bmi.n	8004816 <SDMMC_CmdSelDesel+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80047a6:	0350      	lsls	r0, r2, #13
 80047a8:	d438      	bmi.n	800481c <SDMMC_CmdSelDesel+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80047aa:	0391      	lsls	r1, r2, #14
 80047ac:	d439      	bmi.n	8004822 <SDMMC_CmdSelDesel+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80047ae:	03d5      	lsls	r5, r2, #15
 80047b0:	d43a      	bmi.n	8004828 <SDMMC_CmdSelDesel+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80047b2:	0414      	lsls	r4, r2, #16
 80047b4:	d43b      	bmi.n	800482e <SDMMC_CmdSelDesel+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80047b6:	0450      	lsls	r0, r2, #17
 80047b8:	d43f      	bmi.n	800483a <SDMMC_CmdSelDesel+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80047ba:	0491      	lsls	r1, r2, #18
 80047bc:	d43a      	bmi.n	8004834 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80047be:	f012 0f08 	tst.w	r2, #8
 80047c2:	bf14      	ite	ne
 80047c4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80047c8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80047cc:	e7c0      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80047ce:	2201      	movs	r2, #1
 80047d0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047d2:	e7bd      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e7bb      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80047d8:	2304      	movs	r3, #4
 80047da:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047dc:	e7b8      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80047de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047e2:	e7b5      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	e7b3      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	e7b1      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80047ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f0:	e7ae      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80047f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f6:	e7ab      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80047f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fc:	e7a8      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80047fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004802:	e7a5      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004808:	e7a2      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800480a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800480e:	e79f      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004810:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004814:	e79c      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	e799      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800481c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004820:	e796      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004826:	e793      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800482c:	e790      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800482e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004832:	e78d      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004834:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004838:	e78a      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800483a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800483e:	e787      	b.n	8004750 <SDMMC_CmdSelDesel+0x40>
 8004840:	24000008 	.word	0x24000008
 8004844:	10624dd3 	.word	0x10624dd3
 8004848:	fffee0c0 	.word	0xfffee0c0
 800484c:	00200045 	.word	0x00200045
 8004850:	002000c5 	.word	0x002000c5
 8004854:	fdffe008 	.word	0xfdffe008

08004858 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <SDMMC_CmdGoIdleState+0x48>)
{
 800485a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8004864:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004866:	4c10      	ldr	r4, [pc, #64]	; (80048a8 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8004868:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800486a:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 800486e:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004870:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004872:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004874:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004876:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800487a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800487e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004880:	e002      	b.n	8004888 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004882:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004884:	0612      	lsls	r2, r2, #24
 8004886:	d405      	bmi.n	8004894 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8004888:	3b01      	subs	r3, #1
 800488a:	d2fa      	bcs.n	8004882 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800488c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004890:	bc30      	pop	{r4, r5}
 8004892:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8004896:	2000      	movs	r0, #0
}
 8004898:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800489a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	24000008 	.word	0x24000008
 80048a4:	fffee0c0 	.word	0xfffee0c0
 80048a8:	10624dd3 	.word	0x10624dd3
 80048ac:	002000c5 	.word	0x002000c5

080048b0 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048b0:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <SDMMC_CmdOperCond+0x70>)
{
 80048b2:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048b4:	491b      	ldr	r1, [pc, #108]	; (8004924 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80048b6:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048ba:	6812      	ldr	r2, [r2, #0]
{
 80048bc:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80048be:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048c2:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80048c6:	4c18      	ldr	r4, [pc, #96]	; (8004928 <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048c8:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80048cc:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80048d0:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80048d2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80048d6:	402c      	ands	r4, r5
 80048d8:	4320      	orrs	r0, r4
 80048da:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 80048dc:	b14a      	cbz	r2, 80048f2 <SDMMC_CmdOperCond+0x42>
 80048de:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 80048e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 80048e2:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80048e4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80048e8:	d001      	beq.n	80048ee <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80048ea:	0490      	lsls	r0, r2, #18
 80048ec:	d505      	bpl.n	80048fa <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 80048ee:	1c4c      	adds	r4, r1, #1
 80048f0:	d1f6      	bne.n	80048e0 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80048f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80048f6:	bc30      	pop	{r4, r5}
 80048f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80048fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fc:	0751      	lsls	r1, r2, #29
 80048fe:	d40c      	bmi.n	800491a <SDMMC_CmdOperCond+0x6a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004900:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004902:	f010 0001 	ands.w	r0, r0, #1
 8004906:	d105      	bne.n	8004914 <SDMMC_CmdOperCond+0x64>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	0652      	lsls	r2, r2, #25
 800490c:	d5f3      	bpl.n	80048f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
 8004912:	e7f0      	b.n	80048f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004914:	2201      	movs	r2, #1
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004918:	e7ed      	b.n	80048f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800491a:	2004      	movs	r0, #4
 800491c:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800491e:	e7ea      	b.n	80048f6 <SDMMC_CmdOperCond+0x46>
 8004920:	24000008 	.word	0x24000008
 8004924:	10624dd3 	.word	0x10624dd3
 8004928:	fffee0c0 	.word	0xfffee0c0

0800492c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800492c:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <SDMMC_CmdAppCommand+0x130>)
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004932:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004934:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004936:	f241 1437 	movw	r4, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800493a:	4d49      	ldr	r5, [pc, #292]	; (8004a60 <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 800493c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800493e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004942:	4948      	ldr	r1, [pc, #288]	; (8004a64 <SDMMC_CmdAppCommand+0x138>)
 8004944:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004946:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004948:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800494a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800494e:	430c      	orrs	r4, r1
 8004950:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004952:	b14b      	cbz	r3, 8004968 <SDMMC_CmdAppCommand+0x3c>
 8004954:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004956:	4944      	ldr	r1, [pc, #272]	; (8004a68 <SDMMC_CmdAppCommand+0x13c>)
    sta_reg = SDMMCx->STA;
 8004958:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800495a:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800495c:	420b      	tst	r3, r1
 800495e:	d001      	beq.n	8004964 <SDMMC_CmdAppCommand+0x38>
 8004960:	049c      	lsls	r4, r3, #18
 8004962:	d506      	bpl.n	8004972 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8004964:	1c55      	adds	r5, r2, #1
 8004966:	d1f7      	bne.n	8004958 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800496c:	4618      	mov	r0, r3
 800496e:	bc30      	pop	{r4, r5}
 8004970:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004972:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004974:	075b      	lsls	r3, r3, #29
 8004976:	d43d      	bmi.n	80049f4 <SDMMC_CmdAppCommand+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800497a:	f013 0301 	ands.w	r3, r3, #1
 800497e:	d134      	bne.n	80049ea <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004980:	4b3a      	ldr	r3, [pc, #232]	; (8004a6c <SDMMC_CmdAppCommand+0x140>)
 8004982:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004984:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b37      	cmp	r3, #55	; 0x37
 800498a:	d131      	bne.n	80049f0 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 800498c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <SDMMC_CmdAppCommand+0x144>)
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ea      	beq.n	800496c <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004996:	2a00      	cmp	r2, #0
 8004998:	db2f      	blt.n	80049fa <SDMMC_CmdAppCommand+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800499a:	0055      	lsls	r5, r2, #1
 800499c:	d430      	bmi.n	8004a00 <SDMMC_CmdAppCommand+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800499e:	0094      	lsls	r4, r2, #2
 80049a0:	d430      	bmi.n	8004a04 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80049a2:	00d0      	lsls	r0, r2, #3
 80049a4:	d430      	bmi.n	8004a08 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80049a6:	0111      	lsls	r1, r2, #4
 80049a8:	d431      	bmi.n	8004a0e <SDMMC_CmdAppCommand+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80049aa:	0155      	lsls	r5, r2, #5
 80049ac:	d432      	bmi.n	8004a14 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80049ae:	01d4      	lsls	r4, r2, #7
 80049b0:	d433      	bmi.n	8004a1a <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80049b2:	0210      	lsls	r0, r2, #8
 80049b4:	d434      	bmi.n	8004a20 <SDMMC_CmdAppCommand+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80049b6:	0251      	lsls	r1, r2, #9
 80049b8:	d435      	bmi.n	8004a26 <SDMMC_CmdAppCommand+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80049ba:	0295      	lsls	r5, r2, #10
 80049bc:	d436      	bmi.n	8004a2c <SDMMC_CmdAppCommand+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80049be:	02d4      	lsls	r4, r2, #11
 80049c0:	d437      	bmi.n	8004a32 <SDMMC_CmdAppCommand+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80049c2:	0350      	lsls	r0, r2, #13
 80049c4:	d438      	bmi.n	8004a38 <SDMMC_CmdAppCommand+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80049c6:	0391      	lsls	r1, r2, #14
 80049c8:	d439      	bmi.n	8004a3e <SDMMC_CmdAppCommand+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80049ca:	03d5      	lsls	r5, r2, #15
 80049cc:	d43a      	bmi.n	8004a44 <SDMMC_CmdAppCommand+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80049ce:	0414      	lsls	r4, r2, #16
 80049d0:	d43b      	bmi.n	8004a4a <SDMMC_CmdAppCommand+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80049d2:	0450      	lsls	r0, r2, #17
 80049d4:	d43f      	bmi.n	8004a56 <SDMMC_CmdAppCommand+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80049d6:	0491      	lsls	r1, r2, #18
 80049d8:	d43a      	bmi.n	8004a50 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80049da:	f012 0f08 	tst.w	r2, #8
 80049de:	bf14      	ite	ne
 80049e0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80049e4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80049e8:	e7c0      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80049ea:	2201      	movs	r2, #1
 80049ec:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049ee:	e7bd      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e7bb      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80049f4:	2304      	movs	r3, #4
 80049f6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049f8:	e7b8      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80049fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fe:	e7b5      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004a00:	2340      	movs	r3, #64	; 0x40
 8004a02:	e7b3      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	e7b1      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a0c:	e7ae      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a12:	e7ab      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	e7a8      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a1e:	e7a5      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a24:	e7a2      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a2a:	e79f      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a30:	e79c      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a36:	e799      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a3c:	e796      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004a3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a42:	e793      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a48:	e790      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004a4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a4e:	e78d      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a54:	e78a      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004a56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a5a:	e787      	b.n	800496c <SDMMC_CmdAppCommand+0x40>
 8004a5c:	24000008 	.word	0x24000008
 8004a60:	10624dd3 	.word	0x10624dd3
 8004a64:	fffee0c0 	.word	0xfffee0c0
 8004a68:	00200045 	.word	0x00200045
 8004a6c:	002000c5 	.word	0x002000c5
 8004a70:	fdffe008 	.word	0xfdffe008

08004a74 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <SDMMC_CmdAppOperCommand+0x60>)
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004a7a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a7c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004a7e:	f241 1429 	movw	r4, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a82:	4d15      	ldr	r5, [pc, #84]	; (8004ad8 <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 8004a84:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a86:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004a8a:	4914      	ldr	r1, [pc, #80]	; (8004adc <SDMMC_CmdAppOperCommand+0x68>)
 8004a8c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a8e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004a90:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004a96:	430c      	orrs	r4, r1
 8004a98:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004a9a:	b14b      	cbz	r3, 8004ab0 <SDMMC_CmdAppOperCommand+0x3c>
 8004a9c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8004a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004aa0:	3a01      	subs	r2, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004aa2:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004aa6:	d001      	beq.n	8004aac <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004aa8:	049b      	lsls	r3, r3, #18
 8004aaa:	d506      	bpl.n	8004aba <SDMMC_CmdAppOperCommand+0x46>
    if (count-- == 0U)
 8004aac:	1c51      	adds	r1, r2, #1
 8004aae:	d1f6      	bne.n	8004a9e <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8004ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bc30      	pop	{r4, r5}
 8004ab8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004abc:	f013 0304 	ands.w	r3, r3, #4
 8004ac0:	d104      	bne.n	8004acc <SDMMC_CmdAppOperCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <SDMMC_CmdAppOperCommand+0x6c>)
}
 8004ac4:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ac6:	6382      	str	r2, [r0, #56]	; 0x38
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004acc:	2304      	movs	r3, #4
 8004ace:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ad0:	e7f0      	b.n	8004ab4 <SDMMC_CmdAppOperCommand+0x40>
 8004ad2:	bf00      	nop
 8004ad4:	24000008 	.word	0x24000008
 8004ad8:	10624dd3 	.word	0x10624dd3
 8004adc:	fffee0c0 	.word	0xfffee0c0
 8004ae0:	002000c5 	.word	0x002000c5

08004ae4 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004ae4:	4b4b      	ldr	r3, [pc, #300]	; (8004c14 <SDMMC_CmdBusWidth+0x130>)
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004aea:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004aec:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004aee:	f241 1406 	movw	r4, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004af2:	4d49      	ldr	r5, [pc, #292]	; (8004c18 <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8004af4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004af6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004afa:	4948      	ldr	r1, [pc, #288]	; (8004c1c <SDMMC_CmdBusWidth+0x138>)
 8004afc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004afe:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004b00:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004b06:	430c      	orrs	r4, r1
 8004b08:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004b0a:	b14b      	cbz	r3, 8004b20 <SDMMC_CmdBusWidth+0x3c>
 8004b0c:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004b0e:	4944      	ldr	r1, [pc, #272]	; (8004c20 <SDMMC_CmdBusWidth+0x13c>)
    sta_reg = SDMMCx->STA;
 8004b10:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004b12:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004b14:	420b      	tst	r3, r1
 8004b16:	d001      	beq.n	8004b1c <SDMMC_CmdBusWidth+0x38>
 8004b18:	049c      	lsls	r4, r3, #18
 8004b1a:	d506      	bpl.n	8004b2a <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8004b1c:	1c55      	adds	r5, r2, #1
 8004b1e:	d1f7      	bne.n	8004b10 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004b20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bc30      	pop	{r4, r5}
 8004b28:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004b2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b2c:	075b      	lsls	r3, r3, #29
 8004b2e:	d43d      	bmi.n	8004bac <SDMMC_CmdBusWidth+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b32:	f013 0301 	ands.w	r3, r3, #1
 8004b36:	d134      	bne.n	8004ba2 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004b38:	4b3a      	ldr	r3, [pc, #232]	; (8004c24 <SDMMC_CmdBusWidth+0x140>)
 8004b3a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004b3c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d131      	bne.n	8004ba8 <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8004b44:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b46:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <SDMMC_CmdBusWidth+0x144>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ea      	beq.n	8004b24 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	db2f      	blt.n	8004bb2 <SDMMC_CmdBusWidth+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b52:	0055      	lsls	r5, r2, #1
 8004b54:	d430      	bmi.n	8004bb8 <SDMMC_CmdBusWidth+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b56:	0094      	lsls	r4, r2, #2
 8004b58:	d430      	bmi.n	8004bbc <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b5a:	00d0      	lsls	r0, r2, #3
 8004b5c:	d430      	bmi.n	8004bc0 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b5e:	0111      	lsls	r1, r2, #4
 8004b60:	d431      	bmi.n	8004bc6 <SDMMC_CmdBusWidth+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b62:	0155      	lsls	r5, r2, #5
 8004b64:	d432      	bmi.n	8004bcc <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b66:	01d4      	lsls	r4, r2, #7
 8004b68:	d433      	bmi.n	8004bd2 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b6a:	0210      	lsls	r0, r2, #8
 8004b6c:	d434      	bmi.n	8004bd8 <SDMMC_CmdBusWidth+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b6e:	0251      	lsls	r1, r2, #9
 8004b70:	d435      	bmi.n	8004bde <SDMMC_CmdBusWidth+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b72:	0295      	lsls	r5, r2, #10
 8004b74:	d436      	bmi.n	8004be4 <SDMMC_CmdBusWidth+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b76:	02d4      	lsls	r4, r2, #11
 8004b78:	d437      	bmi.n	8004bea <SDMMC_CmdBusWidth+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b7a:	0350      	lsls	r0, r2, #13
 8004b7c:	d438      	bmi.n	8004bf0 <SDMMC_CmdBusWidth+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b7e:	0391      	lsls	r1, r2, #14
 8004b80:	d439      	bmi.n	8004bf6 <SDMMC_CmdBusWidth+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b82:	03d5      	lsls	r5, r2, #15
 8004b84:	d43a      	bmi.n	8004bfc <SDMMC_CmdBusWidth+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b86:	0414      	lsls	r4, r2, #16
 8004b88:	d43b      	bmi.n	8004c02 <SDMMC_CmdBusWidth+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004b8a:	0450      	lsls	r0, r2, #17
 8004b8c:	d43f      	bmi.n	8004c0e <SDMMC_CmdBusWidth+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004b8e:	0491      	lsls	r1, r2, #18
 8004b90:	d43a      	bmi.n	8004c08 <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b92:	f012 0f08 	tst.w	r2, #8
 8004b96:	bf14      	ite	ne
 8004b98:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004b9c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004ba0:	e7c0      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ba6:	e7bd      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e7bb      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004bac:	2304      	movs	r3, #4
 8004bae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bb0:	e7b8      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb6:	e7b5      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004bb8:	2340      	movs	r3, #64	; 0x40
 8004bba:	e7b3      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	e7b1      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc4:	e7ae      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bca:	e7ab      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd0:	e7a8      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd6:	e7a5      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bdc:	e7a2      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004be2:	e79f      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004be8:	e79c      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	e799      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf4:	e796      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004bf6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bfa:	e793      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004bfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c00:	e790      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c06:	e78d      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8004c08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c0c:	e78a      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c12:	e787      	b.n	8004b24 <SDMMC_CmdBusWidth+0x40>
 8004c14:	24000008 	.word	0x24000008
 8004c18:	10624dd3 	.word	0x10624dd3
 8004c1c:	fffee0c0 	.word	0xfffee0c0
 8004c20:	00200045 	.word	0x00200045
 8004c24:	002000c5 	.word	0x002000c5
 8004c28:	fdffe008 	.word	0xfdffe008

08004c2c <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c2c:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004c2e:	f241 1133 	movw	r1, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c32:	4a4c      	ldr	r2, [pc, #304]	; (8004d64 <SDMMC_CmdSendSCR+0x138>)
 8004c34:	681b      	ldr	r3, [r3, #0]
{
 8004c36:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8004c38:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004c3e:	4c4a      	ldr	r4, [pc, #296]	; (8004d68 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8004c44:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c46:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004c48:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004c4e:	402c      	ands	r4, r5
 8004c50:	4321      	orrs	r1, r4
 8004c52:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8004c54:	b14b      	cbz	r3, 8004c6a <SDMMC_CmdSendSCR+0x3e>
 8004c56:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004c58:	4944      	ldr	r1, [pc, #272]	; (8004d6c <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 8004c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004c5c:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004c5e:	420b      	tst	r3, r1
 8004c60:	d001      	beq.n	8004c66 <SDMMC_CmdSendSCR+0x3a>
 8004c62:	049c      	lsls	r4, r3, #18
 8004c64:	d506      	bpl.n	8004c74 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 8004c66:	1c55      	adds	r5, r2, #1
 8004c68:	d1f7      	bne.n	8004c5a <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8004c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bc30      	pop	{r4, r5}
 8004c72:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c76:	075b      	lsls	r3, r3, #29
 8004c78:	d43d      	bmi.n	8004cf6 <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c7c:	f013 0301 	ands.w	r3, r3, #1
 8004c80:	d134      	bne.n	8004cec <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <SDMMC_CmdSendSCR+0x144>)
 8004c84:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004c86:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b33      	cmp	r3, #51	; 0x33
 8004c8c:	d131      	bne.n	8004cf2 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 8004c8e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c90:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <SDMMC_CmdSendSCR+0x148>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ea      	beq.n	8004c6e <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	db2f      	blt.n	8004cfc <SDMMC_CmdSendSCR+0xd0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c9c:	0055      	lsls	r5, r2, #1
 8004c9e:	d430      	bmi.n	8004d02 <SDMMC_CmdSendSCR+0xd6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004ca0:	0094      	lsls	r4, r2, #2
 8004ca2:	d430      	bmi.n	8004d06 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	d430      	bmi.n	8004d0a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004ca8:	0111      	lsls	r1, r2, #4
 8004caa:	d431      	bmi.n	8004d10 <SDMMC_CmdSendSCR+0xe4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004cac:	0155      	lsls	r5, r2, #5
 8004cae:	d432      	bmi.n	8004d16 <SDMMC_CmdSendSCR+0xea>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cb0:	01d4      	lsls	r4, r2, #7
 8004cb2:	d433      	bmi.n	8004d1c <SDMMC_CmdSendSCR+0xf0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004cb4:	0210      	lsls	r0, r2, #8
 8004cb6:	d434      	bmi.n	8004d22 <SDMMC_CmdSendSCR+0xf6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004cb8:	0251      	lsls	r1, r2, #9
 8004cba:	d435      	bmi.n	8004d28 <SDMMC_CmdSendSCR+0xfc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004cbc:	0295      	lsls	r5, r2, #10
 8004cbe:	d436      	bmi.n	8004d2e <SDMMC_CmdSendSCR+0x102>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004cc0:	02d4      	lsls	r4, r2, #11
 8004cc2:	d437      	bmi.n	8004d34 <SDMMC_CmdSendSCR+0x108>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004cc4:	0350      	lsls	r0, r2, #13
 8004cc6:	d438      	bmi.n	8004d3a <SDMMC_CmdSendSCR+0x10e>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004cc8:	0391      	lsls	r1, r2, #14
 8004cca:	d439      	bmi.n	8004d40 <SDMMC_CmdSendSCR+0x114>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004ccc:	03d5      	lsls	r5, r2, #15
 8004cce:	d43a      	bmi.n	8004d46 <SDMMC_CmdSendSCR+0x11a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004cd0:	0414      	lsls	r4, r2, #16
 8004cd2:	d43b      	bmi.n	8004d4c <SDMMC_CmdSendSCR+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004cd4:	0450      	lsls	r0, r2, #17
 8004cd6:	d43f      	bmi.n	8004d58 <SDMMC_CmdSendSCR+0x12c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004cd8:	0491      	lsls	r1, r2, #18
 8004cda:	d43a      	bmi.n	8004d52 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cdc:	f012 0f08 	tst.w	r2, #8
 8004ce0:	bf14      	ite	ne
 8004ce2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004ce6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004cea:	e7c0      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004cec:	2201      	movs	r2, #1
 8004cee:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cf0:	e7bd      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e7bb      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cfa:	e7b8      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d00:	e7b5      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	e7b3      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	e7b1      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d0e:	e7ae      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d14:	e7ab      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1a:	e7a8      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d20:	e7a5      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d26:	e7a2      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d2c:	e79f      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d32:	e79c      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8004d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d38:	e799      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d3e:	e796      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d44:	e793      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d4a:	e790      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d50:	e78d      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8004d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d56:	e78a      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d5c:	e787      	b.n	8004c6e <SDMMC_CmdSendSCR+0x42>
 8004d5e:	bf00      	nop
 8004d60:	24000008 	.word	0x24000008
 8004d64:	10624dd3 	.word	0x10624dd3
 8004d68:	fffee0c0 	.word	0xfffee0c0
 8004d6c:	00200045 	.word	0x00200045
 8004d70:	002000c5 	.word	0x002000c5
 8004d74:	fdffe008 	.word	0xfdffe008

08004d78 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <SDMMC_CmdSendCID+0x68>)
{
 8004d7a:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d7c:	4919      	ldr	r1, [pc, #100]	; (8004de4 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004d7e:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d82:	6812      	ldr	r2, [r2, #0]
{
 8004d84:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8004d86:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d88:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004d8c:	4c16      	ldr	r4, [pc, #88]	; (8004de8 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d8e:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8004d92:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d94:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004d96:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004d98:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004d9c:	402c      	ands	r4, r5
 8004d9e:	4320      	orrs	r0, r4
 8004da0:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8004da2:	b14a      	cbz	r2, 8004db8 <SDMMC_CmdSendCID+0x40>
 8004da4:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8004da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8004da8:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004daa:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004dae:	d001      	beq.n	8004db4 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004db0:	0490      	lsls	r0, r2, #18
 8004db2:	d505      	bpl.n	8004dc0 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8004db4:	1c4c      	adds	r4, r1, #1
 8004db6:	d1f6      	bne.n	8004da6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8004db8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004dbc:	bc30      	pop	{r4, r5}
 8004dbe:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc2:	0752      	lsls	r2, r2, #29
 8004dc4:	d408      	bmi.n	8004dd8 <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004dc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004dc8:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004dcc:	bf14      	ite	ne
 8004dce:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004dd0:	4a06      	ldreq	r2, [pc, #24]	; (8004dec <SDMMC_CmdSendCID+0x74>)
}
 8004dd2:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004dd6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004dd8:	2004      	movs	r0, #4
 8004dda:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ddc:	e7ee      	b.n	8004dbc <SDMMC_CmdSendCID+0x44>
 8004dde:	bf00      	nop
 8004de0:	24000008 	.word	0x24000008
 8004de4:	10624dd3 	.word	0x10624dd3
 8004de8:	fffee0c0 	.word	0xfffee0c0
 8004dec:	002000c5 	.word	0x002000c5

08004df0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <SDMMC_CmdSendCSD+0x64>)
{
 8004df2:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004df4:	f241 3088 	movw	r0, #5000	; 0x1388
 8004df8:	6812      	ldr	r2, [r2, #0]
{
 8004dfa:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004dfc:	4d16      	ldr	r5, [pc, #88]	; (8004e58 <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004dfe:	f241 3409 	movw	r4, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8004e02:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e04:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e08:	4914      	ldr	r1, [pc, #80]	; (8004e5c <SDMMC_CmdSendCSD+0x6c>)
 8004e0a:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e0c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e0e:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e10:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e14:	430c      	orrs	r4, r1
 8004e16:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 8004e18:	b14a      	cbz	r2, 8004e2e <SDMMC_CmdSendCSD+0x3e>
 8004e1a:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8004e1e:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004e20:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004e24:	d001      	beq.n	8004e2a <SDMMC_CmdSendCSD+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e26:	0490      	lsls	r0, r2, #18
 8004e28:	d505      	bpl.n	8004e36 <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 8004e2a:	1c4c      	adds	r4, r1, #1
 8004e2c:	d1f6      	bne.n	8004e1c <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004e2e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004e32:	bc30      	pop	{r4, r5}
 8004e34:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	0752      	lsls	r2, r2, #29
 8004e3a:	d408      	bmi.n	8004e4e <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e3e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e42:	bf14      	ite	ne
 8004e44:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e46:	4a06      	ldreq	r2, [pc, #24]	; (8004e60 <SDMMC_CmdSendCSD+0x70>)
}
 8004e48:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e4c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e4e:	2004      	movs	r0, #4
 8004e50:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e52:	e7ee      	b.n	8004e32 <SDMMC_CmdSendCSD+0x42>
 8004e54:	24000008 	.word	0x24000008
 8004e58:	10624dd3 	.word	0x10624dd3
 8004e5c:	fffee0c0 	.word	0xfffee0c0
 8004e60:	002000c5 	.word	0x002000c5

08004e64 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e64:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <SDMMC_CmdSetRelAdd+0x9c>)
 8004e66:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <SDMMC_CmdSetRelAdd+0xa0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
{
 8004e6a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8004e6c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e72:	4d25      	ldr	r5, [pc, #148]	; (8004f08 <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 8004e74:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e76:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e78:	68c2      	ldr	r2, [r0, #12]
 8004e7a:	f241 1403 	movw	r4, #4355	; 0x1103
 8004e7e:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e84:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e8a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004e8c:	b14b      	cbz	r3, 8004ea2 <SDMMC_CmdSetRelAdd+0x3e>
 8004e8e:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8004e90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004e92:	3a01      	subs	r2, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004e94:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004e98:	d001      	beq.n	8004e9e <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e9a:	049d      	lsls	r5, r3, #18
 8004e9c:	d506      	bpl.n	8004eac <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 8004e9e:	1c53      	adds	r3, r2, #1
 8004ea0:	d1f6      	bne.n	8004e90 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004ea2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	bc30      	pop	{r4, r5}
 8004eaa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004eac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eae:	075c      	lsls	r4, r3, #29
 8004eb0:	d41c      	bmi.n	8004eec <SDMMC_CmdSetRelAdd+0x88>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004eb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eb4:	f013 0301 	ands.w	r3, r3, #1
 8004eb8:	d113      	bne.n	8004ee2 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8004eba:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d112      	bne.n	8004ee8 <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <SDMMC_CmdSetRelAdd+0xa8>)
 8004ec4:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004ec6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8004ec8:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8004ecc:	d014      	beq.n	8004ef8 <SDMMC_CmdSetRelAdd+0x94>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ece:	0451      	lsls	r1, r2, #17
 8004ed0:	d40f      	bmi.n	8004ef2 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ed2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ed6:	bf14      	ite	ne
 8004ed8:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8004edc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004ee0:	e7e1      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ee6:	e7de      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7dc      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004eec:	2304      	movs	r3, #4
 8004eee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ef0:	e7d9      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ef6:	e7d6      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8004ef8:	0c12      	lsrs	r2, r2, #16
 8004efa:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8004efc:	e7d3      	b.n	8004ea6 <SDMMC_CmdSetRelAdd+0x42>
 8004efe:	bf00      	nop
 8004f00:	24000008 	.word	0x24000008
 8004f04:	10624dd3 	.word	0x10624dd3
 8004f08:	fffee0c0 	.word	0xfffee0c0
 8004f0c:	002000c5 	.word	0x002000c5

08004f10 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f10:	4b4b      	ldr	r3, [pc, #300]	; (8005040 <SDMMC_CmdSendStatus+0x130>)
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004f16:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f18:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004f1a:	f241 140d 	movw	r4, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f1e:	4d49      	ldr	r5, [pc, #292]	; (8005044 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 8004f20:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f22:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004f26:	4948      	ldr	r1, [pc, #288]	; (8005048 <SDMMC_CmdSendStatus+0x138>)
 8004f28:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f2a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004f2c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004f32:	430c      	orrs	r4, r1
 8004f34:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8004f36:	b14b      	cbz	r3, 8004f4c <SDMMC_CmdSendStatus+0x3c>
 8004f38:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8004f3a:	4944      	ldr	r1, [pc, #272]	; (800504c <SDMMC_CmdSendStatus+0x13c>)
    sta_reg = SDMMCx->STA;
 8004f3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004f3e:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8004f40:	420b      	tst	r3, r1
 8004f42:	d001      	beq.n	8004f48 <SDMMC_CmdSendStatus+0x38>
 8004f44:	049c      	lsls	r4, r3, #18
 8004f46:	d506      	bpl.n	8004f56 <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 8004f48:	1c55      	adds	r5, r2, #1
 8004f4a:	d1f7      	bne.n	8004f3c <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bc30      	pop	{r4, r5}
 8004f54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f58:	075b      	lsls	r3, r3, #29
 8004f5a:	d43d      	bmi.n	8004fd8 <SDMMC_CmdSendStatus+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f5e:	f013 0301 	ands.w	r3, r3, #1
 8004f62:	d134      	bne.n	8004fce <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <SDMMC_CmdSendStatus+0x140>)
 8004f66:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004f68:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b0d      	cmp	r3, #13
 8004f6e:	d131      	bne.n	8004fd4 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 8004f70:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004f72:	4b38      	ldr	r3, [pc, #224]	; (8005054 <SDMMC_CmdSendStatus+0x144>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ea      	beq.n	8004f50 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	db2f      	blt.n	8004fde <SDMMC_CmdSendStatus+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f7e:	0055      	lsls	r5, r2, #1
 8004f80:	d430      	bmi.n	8004fe4 <SDMMC_CmdSendStatus+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f82:	0094      	lsls	r4, r2, #2
 8004f84:	d430      	bmi.n	8004fe8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f86:	00d0      	lsls	r0, r2, #3
 8004f88:	d430      	bmi.n	8004fec <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f8a:	0111      	lsls	r1, r2, #4
 8004f8c:	d431      	bmi.n	8004ff2 <SDMMC_CmdSendStatus+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f8e:	0155      	lsls	r5, r2, #5
 8004f90:	d432      	bmi.n	8004ff8 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f92:	01d4      	lsls	r4, r2, #7
 8004f94:	d433      	bmi.n	8004ffe <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f96:	0210      	lsls	r0, r2, #8
 8004f98:	d434      	bmi.n	8005004 <SDMMC_CmdSendStatus+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f9a:	0251      	lsls	r1, r2, #9
 8004f9c:	d435      	bmi.n	800500a <SDMMC_CmdSendStatus+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f9e:	0295      	lsls	r5, r2, #10
 8004fa0:	d436      	bmi.n	8005010 <SDMMC_CmdSendStatus+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004fa2:	02d4      	lsls	r4, r2, #11
 8004fa4:	d437      	bmi.n	8005016 <SDMMC_CmdSendStatus+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004fa6:	0350      	lsls	r0, r2, #13
 8004fa8:	d438      	bmi.n	800501c <SDMMC_CmdSendStatus+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004faa:	0391      	lsls	r1, r2, #14
 8004fac:	d439      	bmi.n	8005022 <SDMMC_CmdSendStatus+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004fae:	03d5      	lsls	r5, r2, #15
 8004fb0:	d43a      	bmi.n	8005028 <SDMMC_CmdSendStatus+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004fb2:	0414      	lsls	r4, r2, #16
 8004fb4:	d43b      	bmi.n	800502e <SDMMC_CmdSendStatus+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004fb6:	0450      	lsls	r0, r2, #17
 8004fb8:	d43f      	bmi.n	800503a <SDMMC_CmdSendStatus+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004fba:	0491      	lsls	r1, r2, #18
 8004fbc:	d43a      	bmi.n	8005034 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fbe:	f012 0f08 	tst.w	r2, #8
 8004fc2:	bf14      	ite	ne
 8004fc4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004fc8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004fcc:	e7c0      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004fce:	2201      	movs	r2, #1
 8004fd0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fd2:	e7bd      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e7bb      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fd8:	2304      	movs	r3, #4
 8004fda:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fdc:	e7b8      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe2:	e7b5      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	e7b3      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	e7b1      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff0:	e7ae      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff6:	e7ab      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffc:	e7a8      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005002:	e7a5      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005008:	e7a2      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800500a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800500e:	e79f      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005014:	e79c      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	e799      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800501c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005020:	e796      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005022:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005026:	e793      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005028:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800502c:	e790      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800502e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005032:	e78d      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8005034:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005038:	e78a      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800503a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800503e:	e787      	b.n	8004f50 <SDMMC_CmdSendStatus+0x40>
 8005040:	24000008 	.word	0x24000008
 8005044:	10624dd3 	.word	0x10624dd3
 8005048:	fffee0c0 	.word	0xfffee0c0
 800504c:	00200045 	.word	0x00200045
 8005050:	002000c5 	.word	0x002000c5
 8005054:	fdffe008 	.word	0xfdffe008

08005058 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8005058:	4b4c      	ldr	r3, [pc, #304]	; (800518c <SDMMC_CmdStatusRegister+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800505a:	f241 110d 	movw	r1, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800505e:	4a4c      	ldr	r2, [pc, #304]	; (8005190 <SDMMC_CmdStatusRegister+0x138>)
 8005060:	681b      	ldr	r3, [r3, #0]
{
 8005062:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8005064:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800506a:	4c4a      	ldr	r4, [pc, #296]	; (8005194 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8005070:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8005072:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005074:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8005076:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800507a:	402c      	ands	r4, r5
 800507c:	4321      	orrs	r1, r4
 800507e:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8005080:	b14b      	cbz	r3, 8005096 <SDMMC_CmdStatusRegister+0x3e>
 8005082:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8005084:	4944      	ldr	r1, [pc, #272]	; (8005198 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 8005086:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005088:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800508a:	420b      	tst	r3, r1
 800508c:	d001      	beq.n	8005092 <SDMMC_CmdStatusRegister+0x3a>
 800508e:	049c      	lsls	r4, r3, #18
 8005090:	d506      	bpl.n	80050a0 <SDMMC_CmdStatusRegister+0x48>
    if (count-- == 0U)
 8005092:	1c55      	adds	r5, r2, #1
 8005094:	d1f7      	bne.n	8005086 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005096:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800509a:	4618      	mov	r0, r3
 800509c:	bc30      	pop	{r4, r5}
 800509e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050a2:	075b      	lsls	r3, r3, #29
 80050a4:	d43d      	bmi.n	8005122 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80050a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050a8:	f013 0301 	ands.w	r3, r3, #1
 80050ac:	d134      	bne.n	8005118 <SDMMC_CmdStatusRegister+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <SDMMC_CmdStatusRegister+0x144>)
 80050b0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80050b2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b0d      	cmp	r3, #13
 80050b8:	d131      	bne.n	800511e <SDMMC_CmdStatusRegister+0xc6>
  return (*(__IO uint32_t *) tmp);
 80050ba:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <SDMMC_CmdStatusRegister+0x148>)
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0ea      	beq.n	800509a <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	db2f      	blt.n	8005128 <SDMMC_CmdStatusRegister+0xd0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050c8:	0055      	lsls	r5, r2, #1
 80050ca:	d430      	bmi.n	800512e <SDMMC_CmdStatusRegister+0xd6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80050cc:	0094      	lsls	r4, r2, #2
 80050ce:	d430      	bmi.n	8005132 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80050d0:	00d0      	lsls	r0, r2, #3
 80050d2:	d430      	bmi.n	8005136 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80050d4:	0111      	lsls	r1, r2, #4
 80050d6:	d431      	bmi.n	800513c <SDMMC_CmdStatusRegister+0xe4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80050d8:	0155      	lsls	r5, r2, #5
 80050da:	d432      	bmi.n	8005142 <SDMMC_CmdStatusRegister+0xea>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80050dc:	01d4      	lsls	r4, r2, #7
 80050de:	d433      	bmi.n	8005148 <SDMMC_CmdStatusRegister+0xf0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80050e0:	0210      	lsls	r0, r2, #8
 80050e2:	d434      	bmi.n	800514e <SDMMC_CmdStatusRegister+0xf6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80050e4:	0251      	lsls	r1, r2, #9
 80050e6:	d435      	bmi.n	8005154 <SDMMC_CmdStatusRegister+0xfc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80050e8:	0295      	lsls	r5, r2, #10
 80050ea:	d436      	bmi.n	800515a <SDMMC_CmdStatusRegister+0x102>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80050ec:	02d4      	lsls	r4, r2, #11
 80050ee:	d437      	bmi.n	8005160 <SDMMC_CmdStatusRegister+0x108>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80050f0:	0350      	lsls	r0, r2, #13
 80050f2:	d438      	bmi.n	8005166 <SDMMC_CmdStatusRegister+0x10e>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050f4:	0391      	lsls	r1, r2, #14
 80050f6:	d439      	bmi.n	800516c <SDMMC_CmdStatusRegister+0x114>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050f8:	03d5      	lsls	r5, r2, #15
 80050fa:	d43a      	bmi.n	8005172 <SDMMC_CmdStatusRegister+0x11a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050fc:	0414      	lsls	r4, r2, #16
 80050fe:	d43b      	bmi.n	8005178 <SDMMC_CmdStatusRegister+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005100:	0450      	lsls	r0, r2, #17
 8005102:	d43f      	bmi.n	8005184 <SDMMC_CmdStatusRegister+0x12c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005104:	0491      	lsls	r1, r2, #18
 8005106:	d43a      	bmi.n	800517e <SDMMC_CmdStatusRegister+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005108:	f012 0f08 	tst.w	r2, #8
 800510c:	bf14      	ite	ne
 800510e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005112:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005116:	e7c0      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005118:	2201      	movs	r2, #1
 800511a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511c:	e7bd      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511e:	2301      	movs	r3, #1
 8005120:	e7bb      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005122:	2304      	movs	r3, #4
 8005124:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005126:	e7b8      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800512c:	e7b5      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	e7b3      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	e7b1      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513a:	e7ae      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800513c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005140:	e7ab      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005146:	e7a8      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800514c:	e7a5      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800514e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005152:	e7a2      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005158:	e79f      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800515a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800515e:	e79c      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8005160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005164:	e799      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800516a:	e796      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800516c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005170:	e793      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005172:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005176:	e790      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800517c:	e78d      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800517e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005182:	e78a      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005188:	e787      	b.n	800509a <SDMMC_CmdStatusRegister+0x42>
 800518a:	bf00      	nop
 800518c:	24000008 	.word	0x24000008
 8005190:	10624dd3 	.word	0x10624dd3
 8005194:	fffee0c0 	.word	0xfffee0c0
 8005198:	00200045 	.word	0x00200045
 800519c:	002000c5 	.word	0x002000c5
 80051a0:	fdffe008 	.word	0xfdffe008

080051a4 <utf8rus>:
*/
// функция для кодировки русских символов в UTF-8
char *pText = 0;
// незабываем каждый раз после вызова функции utf8rus() освобождать память
// free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
char *utf8rus(char *source){
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	4605      	mov	r5, r0
 80051a8:	b085      	sub	sp, #20
	
	int i,k;
	k = strlen((char*)source);
	pText = (char *)malloc(sizeof( k ));
 80051aa:	2004      	movs	r0, #4
	
	memset(pText,0,sizeof(*pText));	// отчистка памяти от мусора
 80051ac:	2400      	movs	r4, #0
	pText = (char *)malloc(sizeof( k ));
 80051ae:	f004 f9bf 	bl	8009530 <malloc>
 80051b2:	4601      	mov	r1, r0

  unsigned char n;
  char m[2] = { '0', '\0' };
 80051b4:	2330      	movs	r3, #48	; 0x30
	pText = (char *)malloc(sizeof( k ));
 80051b6:	4f1f      	ldr	r7, [pc, #124]	; (8005234 <utf8rus+0x90>)
	memset(pText,0,sizeof(*pText));	// отчистка памяти от мусора
 80051b8:	700c      	strb	r4, [r1, #0]

  k = strlen((char*)source);
 80051ba:	4628      	mov	r0, r5
	pText = (char *)malloc(sizeof( k ));
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	9101      	str	r1, [sp, #4]
  char m[2] = { '0', '\0' };
 80051c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  k = strlen((char*)source);
 80051c4:	f7fb f888 	bl	80002d8 <strlen>
  i = 0;

  while (i < k) {
 80051c8:	9901      	ldr	r1, [sp, #4]
 80051ca:	b348      	cbz	r0, 8005220 <utf8rus+0x7c>
 80051cc:	4606      	mov	r6, r0
  i = 0;
 80051ce:	4622      	mov	r2, r4
    n = source[i]; i++;
 80051d0:	5cab      	ldrb	r3, [r5, r2]
 80051d2:	1c54      	adds	r4, r2, #1

    if (n >= 0xC0) {
 80051d4:	2bbf      	cmp	r3, #191	; 0xbf
 80051d6:	d90b      	bls.n	80051f0 <utf8rus+0x4c>
			switch (n) {
 80051d8:	2bd0      	cmp	r3, #208	; 0xd0
 80051da:	d014      	beq.n	8005206 <utf8rus+0x62>
 80051dc:	2bd1      	cmp	r3, #209	; 0xd1
 80051de:	d107      	bne.n	80051f0 <utf8rus+0x4c>
					if (n == 0x81) { n = 0xA8; break; }
					if (n >= 0x90 && n <= 0xBF) n = n + 0x30;
					break;
				}
				case 0xD1: {
					n = source[i]; i++;
 80051e0:	5d2b      	ldrb	r3, [r5, r4]
 80051e2:	1c94      	adds	r4, r2, #2
					if (n == 0x91) { n = 0xB8; break; }
 80051e4:	2b91      	cmp	r3, #145	; 0x91
 80051e6:	d023      	beq.n	8005230 <utf8rus+0x8c>
					if (n >= 0x80 && n <= 0x8F) n = n + 0x70;
 80051e8:	f083 0280 	eor.w	r2, r3, #128	; 0x80
 80051ec:	2a0f      	cmp	r2, #15
 80051ee:	d91a      	bls.n	8005226 <utf8rus+0x82>
					break;
				}
			}
		}
		m[0] = n; 
		strcat( pText, m);
 80051f0:	4608      	mov	r0, r1
 80051f2:	a903      	add	r1, sp, #12
		m[0] = n; 
 80051f4:	f88d 300c 	strb.w	r3, [sp, #12]
		strcat( pText, m);
 80051f8:	f004 fa6c 	bl	80096d4 <strcat>
  while (i < k) {
 80051fc:	42b4      	cmp	r4, r6
 80051fe:	da0e      	bge.n	800521e <utf8rus+0x7a>
 8005200:	4622      	mov	r2, r4
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	e7e4      	b.n	80051d0 <utf8rus+0x2c>
					n = source[i]; i++;
 8005206:	5d2b      	ldrb	r3, [r5, r4]
 8005208:	1c94      	adds	r4, r2, #2
					if (n == 0x81) { n = 0xA8; break; }
 800520a:	2b81      	cmp	r3, #129	; 0x81
 800520c:	d00e      	beq.n	800522c <utf8rus+0x88>
					if (n >= 0x90 && n <= 0xBF) n = n + 0x30;
 800520e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	2a2f      	cmp	r2, #47	; 0x2f
 8005216:	d8eb      	bhi.n	80051f0 <utf8rus+0x4c>
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e7e8      	b.n	80051f0 <utf8rus+0x4c>
 800521e:	6839      	ldr	r1, [r7, #0]
	}
	return pText;
}
 8005220:	4608      	mov	r0, r1
 8005222:	b005      	add	sp, #20
 8005224:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (n >= 0x80 && n <= 0x8F) n = n + 0x70;
 8005226:	3370      	adds	r3, #112	; 0x70
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e7e1      	b.n	80051f0 <utf8rus+0x4c>
					if (n == 0x81) { n = 0xA8; break; }
 800522c:	23a8      	movs	r3, #168	; 0xa8
 800522e:	e7df      	b.n	80051f0 <utf8rus+0x4c>
					if (n == 0x91) { n = 0xB8; break; }
 8005230:	23b8      	movs	r3, #184	; 0xb8
 8005232:	e7dd      	b.n	80051f0 <utf8rus+0x4c>
 8005234:	2400058c 	.word	0x2400058c

08005238 <ST7789_Init>:
static void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd);

//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8005238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 800523c:	20c8      	movs	r0, #200	; 0xc8

	ST7789_Width = ST7789_WIDTH;
 800523e:	4d3a      	ldr	r5, [pc, #232]	; (8005328 <ST7789_Init+0xf0>)
	HAL_Delay(200);	
 8005240:	f7fb fd7a 	bl	8000d38 <HAL_Delay>
	ST7789_Height = ST7789_HEIGHT;
 8005244:	4c39      	ldr	r4, [pc, #228]	; (800532c <ST7789_Init+0xf4>)
	ST7789_Width = ST7789_WIDTH;
 8005246:	23f0      	movs	r3, #240	; 0xf0
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
	
    #ifdef CS_PORT
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005248:	2200      	movs	r2, #0
 800524a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800524e:	4838      	ldr	r0, [pc, #224]	; (8005330 <ST7789_Init+0xf8>)
	ST7789_Width = ST7789_WIDTH;
 8005250:	802b      	strh	r3, [r5, #0]
//==============================================================================
void ST7789_HardReset(void){

	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
	HAL_Delay(20);	
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 8005252:	f04f 0801 	mov.w	r8, #1
	ST7789_Height = ST7789_HEIGHT;
 8005256:	8023      	strh	r3, [r4, #0]
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005258:	f7fb ff0a 	bl	8001070 <HAL_GPIO_WritePin>
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
	
	// pin DC LOW
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800525c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8005330 <ST7789_Init+0xf8>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005266:	4832      	ldr	r0, [pc, #200]	; (8005330 <ST7789_Init+0xf8>)
 8005268:	f7fb ff02 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 800526c:	2609      	movs	r6, #9
	HAL_Delay(20);	
 800526e:	2014      	movs	r0, #20
    numCommands = *addr++;
 8005270:	4f30      	ldr	r7, [pc, #192]	; (8005334 <ST7789_Init+0xfc>)
		//======  FOR H-SERIES ===========================================================

			// Disable SPI	
			//CLEAR_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005272:	4d31      	ldr	r5, [pc, #196]	; (8005338 <ST7789_Init+0x100>)
	HAL_Delay(20);	
 8005274:	f7fb fd60 	bl	8000d38 <HAL_Delay>
			
			// ждем пока SPI будет свободна------------
			//while (!(ST7789_SPI_CMSIS->SR & SPI_SR_TXP)){};		
		
			// передаем 1 байт информации--------------
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 8005278:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800533c <ST7789_Init+0x104>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 800527c:	4642      	mov	r2, r8
 800527e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005282:	4650      	mov	r0, sl
 8005284:	f7fb fef4 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8005288:	2200      	movs	r2, #0
 800528a:	2102      	movs	r1, #2
 800528c:	4650      	mov	r0, sl
 800528e:	f7fb feef 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	602b      	str	r3, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a0:	602b      	str	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 80052a2:	f889 8000 	strb.w	r8, [r9]
				
			// Ждать завершения передачи---------------
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80052a6:	696b      	ldr	r3, [r5, #20]
 80052a8:	04d9      	lsls	r1, r3, #19
 80052aa:	d5fc      	bpl.n	80052a6 <ST7789_Init+0x6e>
        numArgs = *addr++;
 80052ac:	f897 8001 	ldrb.w	r8, [r7, #1]
 80052b0:	1cbc      	adds	r4, r7, #2
        if(numArgs) {
 80052b2:	f018 0b7f 	ands.w	fp, r8, #127	; 0x7f
 80052b6:	d112      	bne.n	80052de <ST7789_Init+0xa6>
        if(ms) {
 80052b8:	f018 0f80 	tst.w	r8, #128	; 0x80
 80052bc:	d007      	beq.n	80052ce <ST7789_Init+0x96>
            ms = *addr++;
 80052be:	f814 0b01 	ldrb.w	r0, [r4], #1
            HAL_Delay(ms);
 80052c2:	28ff      	cmp	r0, #255	; 0xff
 80052c4:	bf08      	it	eq
 80052c6:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80052ca:	f7fb fd35 	bl	8000d38 <HAL_Delay>
    while(numCommands--) {
 80052ce:	3e01      	subs	r6, #1
 80052d0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80052d4:	d01f      	beq.n	8005316 <ST7789_Init+0xde>
 80052d6:	f894 8000 	ldrb.w	r8, [r4]
 80052da:	4627      	mov	r7, r4
 80052dc:	e7d4      	b.n	8005288 <ST7789_Init+0x50>
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
	
	// pin DC HIGH
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80052de:	2201      	movs	r2, #1
 80052e0:	2102      	movs	r1, #2
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7fb fec4 	bl	8001070 <HAL_GPIO_WritePin>
		//======  FOR H-SERIES ===========================================================

			// Disable SPI	
			//CLEAR_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 &= ~SPI_CR1_SPE;
			// Enable SPI
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80052e8:	682a      	ldr	r2, [r5, #0]
 80052ea:	f10b 0302 	add.w	r3, fp, #2

			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80052ee:	4621      	mov	r1, r4
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	443b      	add	r3, r7
 80052f6:	602a      	str	r2, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80052f8:	682a      	ldr	r2, [r5, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	602a      	str	r2, [r5, #0]
			//while (!(ST7789_SPI_CMSIS->SR & SPI_SR_TXP)){};		
			
			while( buff_size ){
		
				// передаем 1 байт информации--------------
				*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = *buff++;
 8005300:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005304:	f889 2000 	strb.w	r2, [r9]
				
				// Ждать завершения передачи---------------
				while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005308:	696a      	ldr	r2, [r5, #20]
 800530a:	04d2      	lsls	r2, r2, #19
 800530c:	d5fc      	bpl.n	8005308 <ST7789_Init+0xd0>
			while( buff_size ){
 800530e:	4299      	cmp	r1, r3
 8005310:	d1f6      	bne.n	8005300 <ST7789_Init+0xc8>
            addr += numArgs;
 8005312:	445c      	add	r4, fp
 8005314:	e7d0      	b.n	80052b8 <ST7789_Init+0x80>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005316:	2201      	movs	r2, #1
 8005318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800531c:	4804      	ldr	r0, [pc, #16]	; (8005330 <ST7789_Init+0xf8>)
}
 800531e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005322:	f7fb bea5 	b.w	8001070 <HAL_GPIO_WritePin>
 8005326:	bf00      	nop
 8005328:	24000c8c 	.word	0x24000c8c
 800532c:	24000c8e 	.word	0x24000c8e
 8005330:	58020400 	.word	0x58020400
 8005334:	08011049 	.word	0x08011049
 8005338:	40003800 	.word	0x40003800
 800533c:	40003820 	.word	0x40003820

08005340 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4606      	mov	r6, r0
 8005346:	4615      	mov	r5, r2
 8005348:	460f      	mov	r7, r1
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 800534a:	2200      	movs	r2, #0
 800534c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005350:	488d      	ldr	r0, [pc, #564]	; (8005588 <ST7789_SetWindow+0x248>)
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8005352:	461c      	mov	r4, r3
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005354:	f7fb fe8c 	bl	8001070 <HAL_GPIO_WritePin>
//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
static void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
	
  if (ColumnStart > ColumnEnd){
 8005358:	42ae      	cmp	r6, r5
 800535a:	d804      	bhi.n	8005366 <ST7789_SetWindow+0x26>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 800535c:	4b8b      	ldr	r3, [pc, #556]	; (800558c <ST7789_SetWindow+0x24c>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	42ab      	cmp	r3, r5
 8005362:	f080 8091 	bcs.w	8005488 <ST7789_SetWindow+0x148>
//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
static void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
	
  if (RowStart > RowEnd){
 8005366:	42a7      	cmp	r7, r4
 8005368:	d803      	bhi.n	8005372 <ST7789_SetWindow+0x32>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 800536a:	4b89      	ldr	r3, [pc, #548]	; (8005590 <ST7789_SetWindow+0x250>)
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	42a3      	cmp	r3, r4
 8005370:	d21c      	bcs.n	80053ac <ST7789_SetWindow+0x6c>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8005372:	2200      	movs	r2, #0
 8005374:	2102      	movs	r1, #2
 8005376:	4884      	ldr	r0, [pc, #528]	; (8005588 <ST7789_SetWindow+0x248>)
 8005378:	f7fb fe7a 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800537c:	4b85      	ldr	r3, [pc, #532]	; (8005594 <ST7789_SetWindow+0x254>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 800537e:	4986      	ldr	r1, [pc, #536]	; (8005598 <ST7789_SetWindow+0x258>)
 8005380:	202c      	movs	r0, #44	; 0x2c
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005382:	681a      	ldr	r2, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005384:	461c      	mov	r4, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 8005394:	7008      	strb	r0, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005396:	6963      	ldr	r3, [r4, #20]
 8005398:	04db      	lsls	r3, r3, #19
 800539a:	d5fc      	bpl.n	8005396 <ST7789_SetWindow+0x56>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 800539c:	2201      	movs	r2, #1
 800539e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053a2:	4879      	ldr	r0, [pc, #484]	; (8005588 <ST7789_SetWindow+0x248>)
}
 80053a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 80053a8:	f7fb be62 	b.w	8001070 <HAL_GPIO_WritePin>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 80053ac:	4b7b      	ldr	r3, [pc, #492]	; (800559c <ST7789_SetWindow+0x25c>)
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2102      	movs	r1, #2
 80053b2:	4875      	ldr	r0, [pc, #468]	; (8005588 <ST7789_SetWindow+0x248>)
  RowStart += ST7789_Y_Start;
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	18fd      	adds	r5, r7, r3
  RowEnd += ST7789_Y_Start;
 80053b8:	441c      	add	r4, r3
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80053ba:	f7fb fe59 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053be:	4b75      	ldr	r3, [pc, #468]	; (8005594 <ST7789_SetWindow+0x254>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 80053c0:	4975      	ldr	r1, [pc, #468]	; (8005598 <ST7789_SetWindow+0x258>)
 80053c2:	202b      	movs	r0, #43	; 0x2b
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053c4:	681a      	ldr	r2, [r3, #0]
  RowStart += ST7789_Y_Start;
 80053c6:	b2ad      	uxth	r5, r5
  RowEnd += ST7789_Y_Start;
 80053c8:	b2a4      	uxth	r4, r4
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80053ca:	461e      	mov	r6, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d8:	601a      	str	r2, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 80053da:	7008      	strb	r0, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80053dc:	6973      	ldr	r3, [r6, #20]
 80053de:	04df      	lsls	r7, r3, #19
 80053e0:	d5fc      	bpl.n	80053dc <ST7789_SetWindow+0x9c>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80053e2:	2201      	movs	r2, #1
 80053e4:	2102      	movs	r1, #2
 80053e6:	4868      	ldr	r0, [pc, #416]	; (8005588 <ST7789_SetWindow+0x248>)
 
  ST7789_SendCmd(ST7789_RASET);
  ST7789_SendData(RowStart >> 8);  
 80053e8:	ea4f 2815 	mov.w	r8, r5, lsr #8
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80053ec:	f7fb fe40 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053f0:	6833      	ldr	r3, [r6, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80053f2:	4a69      	ldr	r2, [pc, #420]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053f4:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80053f8:	4f66      	ldr	r7, [pc, #408]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80053fa:	6033      	str	r3, [r6, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80053fc:	6833      	ldr	r3, [r6, #0]
 80053fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005402:	6033      	str	r3, [r6, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005404:	f882 8000 	strb.w	r8, [r2]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	04de      	lsls	r6, r3, #19
 800540c:	d5fc      	bpl.n	8005408 <ST7789_SetWindow+0xc8>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800540e:	2201      	movs	r2, #1
 8005410:	2102      	movs	r1, #2
 8005412:	485d      	ldr	r0, [pc, #372]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(RowStart & 0xFF);  
 8005414:	b2ed      	uxtb	r5, r5
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005416:	f7fb fe2b 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800541a:	683b      	ldr	r3, [r7, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800541c:	4a5e      	ldr	r2, [pc, #376]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800541e:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005422:	4e5c      	ldr	r6, [pc, #368]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005424:	603b      	str	r3, [r7, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800542c:	603b      	str	r3, [r7, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800542e:	7015      	strb	r5, [r2, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005430:	6973      	ldr	r3, [r6, #20]
 8005432:	04dd      	lsls	r5, r3, #19
 8005434:	d5fc      	bpl.n	8005430 <ST7789_SetWindow+0xf0>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005436:	2201      	movs	r2, #1
 8005438:	2102      	movs	r1, #2
 800543a:	4853      	ldr	r0, [pc, #332]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(RowEnd >> 8);  
 800543c:	0a27      	lsrs	r7, r4, #8
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800543e:	f7fb fe17 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005442:	6833      	ldr	r3, [r6, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005444:	4a54      	ldr	r2, [pc, #336]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005446:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 800544a:	4d52      	ldr	r5, [pc, #328]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800544c:	6033      	str	r3, [r6, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 800544e:	6833      	ldr	r3, [r6, #0]
 8005450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005454:	6033      	str	r3, [r6, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005456:	7017      	strb	r7, [r2, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005458:	696b      	ldr	r3, [r5, #20]
 800545a:	04d8      	lsls	r0, r3, #19
 800545c:	d5fc      	bpl.n	8005458 <ST7789_SetWindow+0x118>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800545e:	2201      	movs	r2, #1
 8005460:	2102      	movs	r1, #2
 8005462:	4849      	ldr	r0, [pc, #292]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(RowEnd & 0xFF);  
 8005464:	b2e4      	uxtb	r4, r4
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005466:	f7fb fe03 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800546a:	682b      	ldr	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800546c:	494a      	ldr	r1, [pc, #296]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800546e:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005472:	4a48      	ldr	r2, [pc, #288]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005474:	602b      	str	r3, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800547c:	602b      	str	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800547e:	700c      	strb	r4, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005480:	6953      	ldr	r3, [r2, #20]
 8005482:	04d9      	lsls	r1, r3, #19
 8005484:	d5fc      	bpl.n	8005480 <ST7789_SetWindow+0x140>
 8005486:	e774      	b.n	8005372 <ST7789_SetWindow+0x32>
  ColumnStart += ST7789_X_Start;
 8005488:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <ST7789_SetWindow+0x260>)
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800548a:	2200      	movs	r2, #0
 800548c:	2102      	movs	r1, #2
 800548e:	483e      	ldr	r0, [pc, #248]	; (8005588 <ST7789_SetWindow+0x248>)
  ColumnStart += ST7789_X_Start;
 8005490:	f8b3 c000 	ldrh.w	ip, [r3]
 8005494:	eb06 030c 	add.w	r3, r6, ip
  ColumnEnd += ST7789_X_Start;
 8005498:	4465      	add	r5, ip
  ColumnStart += ST7789_X_Start;
 800549a:	fa1f f883 	uxth.w	r8, r3
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800549e:	f7fb fde7 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054a2:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <ST7789_SetWindow+0x254>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 80054a4:	493c      	ldr	r1, [pc, #240]	; (8005598 <ST7789_SetWindow+0x258>)
 80054a6:	202a      	movs	r0, #42	; 0x2a
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054a8:	681a      	ldr	r2, [r3, #0]
  ColumnEnd += ST7789_X_Start;
 80054aa:	b2ae      	uxth	r6, r5
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80054ac:	4699      	mov	r9, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ba:	601a      	str	r2, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 80054bc:	7008      	strb	r0, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80054be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80054c2:	04dd      	lsls	r5, r3, #19
 80054c4:	d5fb      	bpl.n	80054be <ST7789_SetWindow+0x17e>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80054c6:	2201      	movs	r2, #1
 80054c8:	2102      	movs	r1, #2
 80054ca:	482f      	ldr	r0, [pc, #188]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(ColumnStart >> 8);  
 80054cc:	ea4f 2a18 	mov.w	sl, r8, lsr #8
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80054d0:	f7fb fdce 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054d4:	f8d9 3000 	ldr.w	r3, [r9]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054da:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80054de:	4d2d      	ldr	r5, [pc, #180]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80054e0:	f8c9 3000 	str.w	r3, [r9]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80054e4:	f8d9 3000 	ldr.w	r3, [r9]
 80054e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ec:	f8c9 3000 	str.w	r3, [r9]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80054f0:	f882 a000 	strb.w	sl, [r2]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80054f4:	696b      	ldr	r3, [r5, #20]
 80054f6:	04d8      	lsls	r0, r3, #19
 80054f8:	d5fc      	bpl.n	80054f4 <ST7789_SetWindow+0x1b4>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80054fa:	2201      	movs	r2, #1
 80054fc:	2102      	movs	r1, #2
 80054fe:	4822      	ldr	r0, [pc, #136]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(ColumnStart & 0xFF);  
 8005500:	fa5f f888 	uxtb.w	r8, r8
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005504:	f7fb fdb4 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005508:	682a      	ldr	r2, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800550a:	4b23      	ldr	r3, [pc, #140]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800550c:	f042 0201 	orr.w	r2, r2, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005510:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005594 <ST7789_SetWindow+0x254>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005514:	602a      	str	r2, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005516:	682a      	ldr	r2, [r5, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	602a      	str	r2, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800551e:	f883 8000 	strb.w	r8, [r3]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005522:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005526:	04d9      	lsls	r1, r3, #19
 8005528:	d5fb      	bpl.n	8005522 <ST7789_SetWindow+0x1e2>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800552a:	2201      	movs	r2, #1
 800552c:	2102      	movs	r1, #2
 800552e:	4816      	ldr	r0, [pc, #88]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(ColumnEnd >> 8);  
 8005530:	ea4f 2816 	mov.w	r8, r6, lsr #8
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005534:	f7fb fd9c 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005538:	f8d9 3000 	ldr.w	r3, [r9]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800553e:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005542:	4d14      	ldr	r5, [pc, #80]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005544:	f8c9 3000 	str.w	r3, [r9]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005548:	f8d9 3000 	ldr.w	r3, [r9]
 800554c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005550:	f8c9 3000 	str.w	r3, [r9]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005554:	f882 8000 	strb.w	r8, [r2]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005558:	696b      	ldr	r3, [r5, #20]
 800555a:	04da      	lsls	r2, r3, #19
 800555c:	d5fc      	bpl.n	8005558 <ST7789_SetWindow+0x218>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800555e:	2201      	movs	r2, #1
 8005560:	2102      	movs	r1, #2
 8005562:	4809      	ldr	r0, [pc, #36]	; (8005588 <ST7789_SetWindow+0x248>)
  ST7789_SendData(ColumnEnd & 0xFF);  
 8005564:	b2f6      	uxtb	r6, r6
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005566:	f7fb fd83 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800556a:	682b      	ldr	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800556c:	490a      	ldr	r1, [pc, #40]	; (8005598 <ST7789_SetWindow+0x258>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800556e:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005572:	4a08      	ldr	r2, [pc, #32]	; (8005594 <ST7789_SetWindow+0x254>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005574:	602b      	str	r3, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005576:	682b      	ldr	r3, [r5, #0]
 8005578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800557c:	602b      	str	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800557e:	700e      	strb	r6, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005580:	6953      	ldr	r3, [r2, #20]
 8005582:	04db      	lsls	r3, r3, #19
 8005584:	d5fc      	bpl.n	8005580 <ST7789_SetWindow+0x240>
 8005586:	e6ee      	b.n	8005366 <ST7789_SetWindow+0x26>
 8005588:	58020400 	.word	0x58020400
 800558c:	24000c8c 	.word	0x24000c8c
 8005590:	24000c8e 	.word	0x24000c8e
 8005594:	40003800 	.word	0x40003800
 8005598:	40003820 	.word	0x40003820
 800559c:	24000592 	.word	0x24000592
 80055a0:	24000590 	.word	0x24000590

080055a4 <ST7789_DrawImage>:
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if((x >= ST7789_Width) || (y >= ST7789_Height)){
 80055a6:	4e24      	ldr	r6, [pc, #144]	; (8005638 <ST7789_DrawImage+0x94>)
 80055a8:	f8b6 c000 	ldrh.w	ip, [r6]
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80055ac:	9e06      	ldr	r6, [sp, #24]
    if((x >= ST7789_Width) || (y >= ST7789_Height)){
 80055ae:	4584      	cmp	ip, r0
 80055b0:	d90e      	bls.n	80055d0 <ST7789_DrawImage+0x2c>
 80055b2:	4617      	mov	r7, r2
 80055b4:	4a21      	ldr	r2, [pc, #132]	; (800563c <ST7789_DrawImage+0x98>)
 80055b6:	461c      	mov	r4, r3
 80055b8:	460b      	mov	r3, r1
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	428a      	cmp	r2, r1
 80055be:	d907      	bls.n	80055d0 <ST7789_DrawImage+0x2c>
    if((x + w - 1) >= ST7789_Width){
 80055c0:	eb00 0e07 	add.w	lr, r0, r7
 80055c4:	45e6      	cmp	lr, ip
 80055c6:	dc03      	bgt.n	80055d0 <ST7789_DrawImage+0x2c>
    if((y + h - 1) >= ST7789_Height){
 80055c8:	eb01 0c04 	add.w	ip, r1, r4
 80055cc:	4594      	cmp	ip, r2
 80055ce:	dd00      	ble.n	80055d2 <ST7789_DrawImage+0x2e>
}
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ST7789_SetWindow(x, y, x+w-1, y+h-1);
 80055d2:	f104 3cff 	add.w	ip, r4, #4294967295
 80055d6:	1e7a      	subs	r2, r7, #1
    ST7789_SendDataMASS((uint8_t*)data, sizeof(uint16_t)*w*h);
 80055d8:	fb04 f407 	mul.w	r4, r4, r7
    ST7789_SetWindow(x, y, x+w-1, y+h-1);
 80055dc:	4463      	add	r3, ip
 80055de:	4402      	add	r2, r0
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b292      	uxth	r2, r2
 80055e4:	f7ff feac 	bl	8005340 <ST7789_SetWindow>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055ee:	4814      	ldr	r0, [pc, #80]	; (8005640 <ST7789_DrawImage+0x9c>)
 80055f0:	f7fb fd3e 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80055f4:	2201      	movs	r2, #1
 80055f6:	2102      	movs	r1, #2
 80055f8:	4811      	ldr	r0, [pc, #68]	; (8005640 <ST7789_DrawImage+0x9c>)
    ST7789_SendDataMASS((uint8_t*)data, sizeof(uint16_t)*w*h);
 80055fa:	4094      	lsls	r4, r2
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80055fc:	f7fb fd38 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005600:	4a10      	ldr	r2, [pc, #64]	; (8005644 <ST7789_DrawImage+0xa0>)
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6013      	str	r3, [r2, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005610:	6013      	str	r3, [r2, #0]
			while( buff_size ){
 8005612:	b14c      	cbz	r4, 8005628 <ST7789_DrawImage+0x84>
 8005614:	4434      	add	r4, r6
				*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = *buff++;
 8005616:	490c      	ldr	r1, [pc, #48]	; (8005648 <ST7789_DrawImage+0xa4>)
 8005618:	f816 3b01 	ldrb.w	r3, [r6], #1
 800561c:	700b      	strb	r3, [r1, #0]
				while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 800561e:	6953      	ldr	r3, [r2, #20]
 8005620:	04db      	lsls	r3, r3, #19
 8005622:	d5fc      	bpl.n	800561e <ST7789_DrawImage+0x7a>
			while( buff_size ){
 8005624:	42a6      	cmp	r6, r4
 8005626:	d1f7      	bne.n	8005618 <ST7789_DrawImage+0x74>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005628:	2201      	movs	r2, #1
 800562a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800562e:	4804      	ldr	r0, [pc, #16]	; (8005640 <ST7789_DrawImage+0x9c>)
}
 8005630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005634:	f7fb bd1c 	b.w	8001070 <HAL_GPIO_WritePin>
 8005638:	24000c8c 	.word	0x24000c8c
 800563c:	24000c8e 	.word	0x24000c8e
 8005640:	58020400 	.word	0x58020400
 8005644:	40003800 	.word	0x40003800
 8005648:	40003820 	.word	0x40003820

0800564c <ST7789_FillRect>:
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 8005650:	4c32      	ldr	r4, [pc, #200]	; (800571c <ST7789_FillRect+0xd0>)
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8005652:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 8005656:	8824      	ldrh	r4, [r4, #0]
 8005658:	42a0      	cmp	r0, r4
 800565a:	da55      	bge.n	8005708 <ST7789_FillRect+0xbc>
 800565c:	4d30      	ldr	r5, [pc, #192]	; (8005720 <ST7789_FillRect+0xd4>)
 800565e:	882d      	ldrh	r5, [r5, #0]
 8005660:	42a9      	cmp	r1, r5
 8005662:	da51      	bge.n	8005708 <ST7789_FillRect+0xbc>
  if ((x + w) > ST7789_Width){	  
 8005664:	1886      	adds	r6, r0, r2
	  w = ST7789_Width - x;
 8005666:	b280      	uxth	r0, r0
  if ((x + w) > ST7789_Width){	  
 8005668:	42b4      	cmp	r4, r6
 800566a:	db53      	blt.n	8005714 <ST7789_FillRect+0xc8>
 800566c:	b294      	uxth	r4, r2
  if ((y + h) > ST7789_Height){
 800566e:	18ce      	adds	r6, r1, r3
	  h = ST7789_Height - y;
 8005670:	b289      	uxth	r1, r1
  if ((y + h) > ST7789_Height){
 8005672:	42b5      	cmp	r5, r6
 8005674:	db4a      	blt.n	800570c <ST7789_FillRect+0xc0>
 8005676:	b29d      	uxth	r5, r3
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8005678:	440d      	add	r5, r1
 800567a:	4404      	add	r4, r0
  for (uint32_t i = 0; i < (h * w); i++){
 800567c:	fb03 f702 	mul.w	r7, r3, r2
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8005680:	1e6b      	subs	r3, r5, #1
 8005682:	1e62      	subs	r2, r4, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	b292      	uxth	r2, r2
 8005688:	f7ff fe5a 	bl	8005340 <ST7789_SetWindow>
  for (uint32_t i = 0; i < (h * w); i++){
 800568c:	2f00      	cmp	r7, #0
 800568e:	d03b      	beq.n	8005708 <ST7789_FillRect+0xbc>
    ST7789_SendData(*pBuff >> 8);  
 8005690:	ea4f 2a19 	mov.w	sl, r9, lsr #8
  for (uint32_t i = 0; i < (h * w); i++){
 8005694:	2600      	movs	r6, #0
 8005696:	fa5f f989 	uxtb.w	r9, r9
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 800569a:	4d22      	ldr	r5, [pc, #136]	; (8005724 <ST7789_FillRect+0xd8>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 800569c:	4c22      	ldr	r4, [pc, #136]	; (8005728 <ST7789_FillRect+0xdc>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 800569e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800572c <ST7789_FillRect+0xe0>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 80056a2:	2200      	movs	r2, #0
 80056a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7fb fce1 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80056ae:	2201      	movs	r2, #1
 80056b0:	2102      	movs	r1, #2
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7fb fcdc 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6023      	str	r3, [r4, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056c6:	6023      	str	r3, [r4, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80056c8:	f888 a000 	strb.w	sl, [r8]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80056cc:	6963      	ldr	r3, [r4, #20]
 80056ce:	04da      	lsls	r2, r3, #19
 80056d0:	d5fc      	bpl.n	80056cc <ST7789_FillRect+0x80>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80056d2:	2201      	movs	r2, #1
 80056d4:	2102      	movs	r1, #2
 80056d6:	4628      	mov	r0, r5
 80056d8:	f7fb fcca 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6023      	str	r3, [r4, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ea:	6023      	str	r3, [r4, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80056ec:	f888 9000 	strb.w	r9, [r8]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80056f0:	6963      	ldr	r3, [r4, #20]
 80056f2:	04db      	lsls	r3, r3, #19
 80056f4:	d5fc      	bpl.n	80056f0 <ST7789_FillRect+0xa4>
  for (uint32_t i = 0; i < (h * w); i++){
 80056f6:	3601      	adds	r6, #1
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 80056f8:	2201      	movs	r2, #1
 80056fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056fe:	4628      	mov	r0, r5
 8005700:	f7fb fcb6 	bl	8001070 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < (h * w); i++){
 8005704:	42be      	cmp	r6, r7
 8005706:	d1cc      	bne.n	80056a2 <ST7789_FillRect+0x56>
}
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  h = ST7789_Height - y;
 800570c:	1a6b      	subs	r3, r5, r1
 800570e:	b29d      	uxth	r5, r3
 8005710:	b21b      	sxth	r3, r3
 8005712:	e7b1      	b.n	8005678 <ST7789_FillRect+0x2c>
	  w = ST7789_Width - x;
 8005714:	1a22      	subs	r2, r4, r0
 8005716:	b294      	uxth	r4, r2
 8005718:	b212      	sxth	r2, r2
 800571a:	e7a8      	b.n	800566e <ST7789_FillRect+0x22>
 800571c:	24000c8c 	.word	0x24000c8c
 8005720:	24000c8e 	.word	0x24000c8e
 8005724:	58020400 	.word	0x58020400
 8005728:	40003800 	.word	0x40003800
 800572c:	40003820 	.word	0x40003820

08005730 <ST7789_FillScreen>:
void ST7789_FillScreen(uint16_t color){
 8005730:	b500      	push	{lr}
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005732:	2100      	movs	r1, #0
void ST7789_FillScreen(uint16_t color){
 8005734:	b083      	sub	sp, #12
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <ST7789_FillScreen+0x20>)
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <ST7789_FillScreen+0x24>)
 800573a:	9000      	str	r0, [sp, #0]
 800573c:	4608      	mov	r0, r1
 800573e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005742:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005746:	f7ff ff81 	bl	800564c <ST7789_FillRect>
}
 800574a:	b003      	add	sp, #12
 800574c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005750:	24000c8e 	.word	0x24000c8e
 8005754:	24000c8c 	.word	0x24000c8c

08005758 <ST7789_Clear>:
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, 0);
 8005758:	2100      	movs	r1, #0
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <ST7789_Clear+0x20>)
 800575c:	4a07      	ldr	r2, [pc, #28]	; (800577c <ST7789_Clear+0x24>)
 800575e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005762:	4608      	mov	r0, r1
 8005764:	f9b2 2000 	ldrsh.w	r2, [r2]
void ST7789_Clear(void){
 8005768:	b500      	push	{lr}
 800576a:	b083      	sub	sp, #12
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, 0);
 800576c:	9100      	str	r1, [sp, #0]
 800576e:	f7ff ff6d 	bl	800564c <ST7789_FillRect>
}
 8005772:	b003      	add	sp, #12
 8005774:	f85d fb04 	ldr.w	pc, [sp], #4
 8005778:	24000c8e 	.word	0x24000c8e
 800577c:	24000c8c 	.word	0x24000c8c

08005780 <ST7789_DrawPixel>:
//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005780:	2800      	cmp	r0, #0
 8005782:	db0d      	blt.n	80057a0 <ST7789_DrawPixel+0x20>
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <ST7789_DrawPixel+0x9c>)
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4298      	cmp	r0, r3
 800578a:	da09      	bge.n	80057a0 <ST7789_DrawPixel+0x20>
 800578c:	b28b      	uxth	r3, r1
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 800578e:	b570      	push	{r4, r5, r6, lr}
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005790:	0fcd      	lsrs	r5, r1, #31
 8005792:	d104      	bne.n	800579e <ST7789_DrawPixel+0x1e>
 8005794:	4614      	mov	r4, r2
 8005796:	4a22      	ldr	r2, [pc, #136]	; (8005820 <ST7789_DrawPixel+0xa0>)
 8005798:	8812      	ldrh	r2, [r2, #0]
 800579a:	4291      	cmp	r1, r2
 800579c:	db01      	blt.n	80057a2 <ST7789_DrawPixel+0x22>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
  ST7789_RamWrite(&color, 1);
}
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	4770      	bx	lr
  ST7789_SetWindow(x, y, x, y);
 80057a2:	b282      	uxth	r2, r0
 80057a4:	4619      	mov	r1, r3
    ST7789_SendData(*pBuff >> 8);  
 80057a6:	0a26      	lsrs	r6, r4, #8
  ST7789_SetWindow(x, y, x, y);
 80057a8:	4610      	mov	r0, r2
 80057aa:	f7ff fdc9 	bl	8005340 <ST7789_SetWindow>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 80057ae:	462a      	mov	r2, r5
 80057b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057b4:	481b      	ldr	r0, [pc, #108]	; (8005824 <ST7789_DrawPixel+0xa4>)
 80057b6:	f7fb fc5b 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80057ba:	2201      	movs	r2, #1
 80057bc:	2102      	movs	r1, #2
 80057be:	4819      	ldr	r0, [pc, #100]	; (8005824 <ST7789_DrawPixel+0xa4>)
 80057c0:	f7fb fc56 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <ST7789_DrawPixel+0xa8>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80057c6:	4919      	ldr	r1, [pc, #100]	; (800582c <ST7789_DrawPixel+0xac>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057c8:	681a      	ldr	r2, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80057ca:	461d      	mov	r5, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d8:	601a      	str	r2, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80057da:	700e      	strb	r6, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80057dc:	696b      	ldr	r3, [r5, #20]
 80057de:	04da      	lsls	r2, r3, #19
 80057e0:	d5fc      	bpl.n	80057dc <ST7789_DrawPixel+0x5c>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80057e2:	2201      	movs	r2, #1
 80057e4:	2102      	movs	r1, #2
 80057e6:	480f      	ldr	r0, [pc, #60]	; (8005824 <ST7789_DrawPixel+0xa4>)
    ST7789_SendData(*pBuff & 0xFF);
 80057e8:	b2e4      	uxtb	r4, r4
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80057ea:	f7fb fc41 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057ee:	682b      	ldr	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <ST7789_DrawPixel+0xac>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057f2:	f043 0301 	orr.w	r3, r3, #1
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 80057f6:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <ST7789_DrawPixel+0xa8>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80057f8:	602b      	str	r3, [r5, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005800:	602b      	str	r3, [r5, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005802:	700c      	strb	r4, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005804:	6953      	ldr	r3, [r2, #20]
 8005806:	04db      	lsls	r3, r3, #19
 8005808:	d5fc      	bpl.n	8005804 <ST7789_DrawPixel+0x84>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 800580a:	2201      	movs	r2, #1
 800580c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005810:	4804      	ldr	r0, [pc, #16]	; (8005824 <ST7789_DrawPixel+0xa4>)
}
 8005812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005816:	f7fb bc2b 	b.w	8001070 <HAL_GPIO_WritePin>
 800581a:	bf00      	nop
 800581c:	24000c8c 	.word	0x24000c8c
 8005820:	24000c8e 	.word	0x24000c8e
 8005824:	58020400 	.word	0x58020400
 8005828:	40003800 	.word	0x40003800
 800582c:	40003820 	.word	0x40003820

08005830 <ST7789_DrawLine>:
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	4616      	mov	r6, r2
 8005836:	b085      	sub	sp, #20
 8005838:	461f      	mov	r7, r3
 800583a:	460d      	mov	r5, r1
  if (x1 == x2){
 800583c:	42b0      	cmp	r0, r6
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800583e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  if (x1 == x2){
 8005842:	d06a      	beq.n	800591a <ST7789_DrawLine+0xea>
  if (y1 == y2){
 8005844:	4299      	cmp	r1, r3
 8005846:	4604      	mov	r4, r0
 8005848:	d05b      	beq.n	8005902 <ST7789_DrawLine+0xd2>
  const int16_t deltaY = abs(y2 - y1);
 800584a:	eba7 0801 	sub.w	r8, r7, r1
  const int16_t deltaX = abs(x2 - x1);
 800584e:	1a33      	subs	r3, r6, r0
  const int16_t signX = x1 < x2 ? 1 : -1;
 8005850:	f64f 7cff 	movw	ip, #65535	; 0xffff
  ST7789_DrawPixel(x2, y2, color);
 8005854:	4639      	mov	r1, r7
  const int16_t deltaY = abs(y2 - y1);
 8005856:	f1b8 0f00 	cmp.w	r8, #0
  const int16_t deltaX = abs(x2 - x1);
 800585a:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  ST7789_DrawPixel(x2, y2, color);
 800585e:	4630      	mov	r0, r6
 8005860:	9200      	str	r2, [sp, #0]
  const int16_t deltaY = abs(y2 - y1);
 8005862:	bfb8      	it	lt
 8005864:	f1c8 0800 	rsblt	r8, r8, #0
  const int16_t deltaX = abs(x2 - x1);
 8005868:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  const int16_t signX = x1 < x2 ? 1 : -1;
 800586c:	42b4      	cmp	r4, r6
 800586e:	bfac      	ite	ge
 8005870:	4663      	movge	r3, ip
 8005872:	2301      	movlt	r3, #1
  int16_t error = deltaX - deltaY;
 8005874:	fa1f fa8e 	uxth.w	sl, lr
  const int16_t signX = x1 < x2 ? 1 : -1;
 8005878:	9302      	str	r3, [sp, #8]
  const int16_t signY = y1 < y2 ? 1 : -1;
 800587a:	4663      	mov	r3, ip
  int16_t error = deltaX - deltaY;
 800587c:	fa1f f988 	uxth.w	r9, r8
  const int16_t signY = y1 < y2 ? 1 : -1;
 8005880:	42bd      	cmp	r5, r7
 8005882:	bfb8      	it	lt
 8005884:	2301      	movlt	r3, #1
  const int16_t deltaY = abs(y2 - y1);
 8005886:	fa0f f888 	sxth.w	r8, r8
  int16_t error = deltaX - deltaY;
 800588a:	ebaa 0b09 	sub.w	fp, sl, r9
  const int16_t signY = y1 < y2 ? 1 : -1;
 800588e:	9303      	str	r3, [sp, #12]
  const int16_t deltaX = abs(x2 - x1);
 8005890:	fa0f f38e 	sxth.w	r3, lr
 8005894:	f1c8 0800 	rsb	r8, r8, #0
  int16_t error = deltaX - deltaY;
 8005898:	fa0f fb8b 	sxth.w	fp, fp
  const int16_t deltaX = abs(x2 - x1);
 800589c:	9301      	str	r3, [sp, #4]
  ST7789_DrawPixel(x2, y2, color);
 800589e:	f7ff ff6f 	bl	8005780 <ST7789_DrawPixel>
 80058a2:	9a00      	ldr	r2, [sp, #0]
    ST7789_DrawPixel(x1, y1, color);
 80058a4:	4629      	mov	r1, r5
 80058a6:	4620      	mov	r0, r4
 80058a8:	9200      	str	r2, [sp, #0]
 80058aa:	f7ff ff69 	bl	8005780 <ST7789_DrawPixel>
      y1 += signY;
 80058ae:	9b03      	ldr	r3, [sp, #12]
      x1 += signX;
 80058b0:	9a02      	ldr	r2, [sp, #8]
      y1 += signY;
 80058b2:	eb03 0c05 	add.w	ip, r3, r5
    const int16_t error2 = error * 2;
 80058b6:	fa1f f38b 	uxth.w	r3, fp
      x1 += signX;
 80058ba:	eb02 0e04 	add.w	lr, r2, r4
    if (error2 > -deltaY) {
 80058be:	9a00      	ldr	r2, [sp, #0]
    const int16_t error2 = error * 2;
 80058c0:	0059      	lsls	r1, r3, #1
      error -= deltaY;
 80058c2:	eba3 0009 	sub.w	r0, r3, r9
    const int16_t error2 = error * 2;
 80058c6:	b209      	sxth	r1, r1
    if (error2 > -deltaY) {
 80058c8:	4541      	cmp	r1, r8
 80058ca:	dd04      	ble.n	80058d6 <ST7789_DrawLine+0xa6>
      x1 += signX;
 80058cc:	fa0f f48e 	sxth.w	r4, lr
      error -= deltaY;
 80058d0:	b283      	uxth	r3, r0
 80058d2:	fa0f fb80 	sxth.w	fp, r0
    if (error2 < deltaX){
 80058d6:	9801      	ldr	r0, [sp, #4]
      error += deltaX;
 80058d8:	4453      	add	r3, sl
    if (error2 < deltaX){
 80058da:	4288      	cmp	r0, r1
 80058dc:	dd0a      	ble.n	80058f4 <ST7789_DrawLine+0xc4>
      y1 += signY;
 80058de:	fa0f f58c 	sxth.w	r5, ip
      error += deltaX;
 80058e2:	fa0f fb83 	sxth.w	fp, r3
  while (x1 != x2 || y1 != y2) {
 80058e6:	42af      	cmp	r7, r5
 80058e8:	d1dc      	bne.n	80058a4 <ST7789_DrawLine+0x74>
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d1da      	bne.n	80058a4 <ST7789_DrawLine+0x74>
}
 80058ee:	b005      	add	sp, #20
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (x1 != x2 || y1 != y2) {
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d1d5      	bne.n	80058a4 <ST7789_DrawLine+0x74>
 80058f8:	42af      	cmp	r7, r5
 80058fa:	d1d3      	bne.n	80058a4 <ST7789_DrawLine+0x74>
}
 80058fc:	b005      	add	sp, #20
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (x1 > x2){
 8005902:	42b0      	cmp	r0, r6
 8005904:	dc16      	bgt.n	8005934 <ST7789_DrawLine+0x104>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8005906:	3601      	adds	r6, #1
 8005908:	920e      	str	r2, [sp, #56]	; 0x38
 800590a:	2301      	movs	r3, #1
 800590c:	1a36      	subs	r6, r6, r0
 800590e:	b232      	sxth	r2, r6
}
 8005910:	b005      	add	sp, #20
 8005912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8005916:	f7ff be99 	b.w	800564c <ST7789_FillRect>
    if (y1 > y2){
 800591a:	4299      	cmp	r1, r3
 800591c:	dd15      	ble.n	800594a <ST7789_DrawLine+0x11a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 800591e:	1acd      	subs	r5, r1, r3
 8005920:	920e      	str	r2, [sp, #56]	; 0x38
 8005922:	2201      	movs	r2, #1
 8005924:	4619      	mov	r1, r3
 8005926:	4415      	add	r5, r2
 8005928:	b22b      	sxth	r3, r5
}
 800592a:	b005      	add	sp, #20
 800592c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8005930:	f7ff be8c 	b.w	800564c <ST7789_FillRect>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 8005934:	1b84      	subs	r4, r0, r6
 8005936:	2301      	movs	r3, #1
 8005938:	920e      	str	r2, [sp, #56]	; 0x38
 800593a:	4630      	mov	r0, r6
 800593c:	441c      	add	r4, r3
 800593e:	b222      	sxth	r2, r4
}
 8005940:	b005      	add	sp, #20
 8005942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8005946:	f7ff be81 	b.w	800564c <ST7789_FillRect>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 800594a:	3701      	adds	r7, #1
 800594c:	920e      	str	r2, [sp, #56]	; 0x38
 800594e:	2201      	movs	r2, #1
 8005950:	1a7f      	subs	r7, r7, r1
 8005952:	b23b      	sxth	r3, r7
}
 8005954:	b005      	add	sp, #20
 8005956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 800595a:	f7ff be77 	b.w	800564c <ST7789_FillRect>
 800595e:	bf00      	nop

08005960 <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	b091      	sub	sp, #68	; 0x44
 8005966:	4605      	mov	r5, r0
		multiplier = 1;
	}

	/* Check available space in LCD */
	if (
		ST7789_Width <= ( x + Font->FontWidth) || ST7789_Height <= ( y + Font->FontHeight)){
 8005968:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8005c30 <ST7789_DrawChar+0x2d0>
 800596c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 800596e:	900f      	str	r0, [sp, #60]	; 0x3c
		ST7789_Width <= ( x + Font->FontWidth) || ST7789_Height <= ( y + Font->FontHeight)){
 8005970:	7820      	ldrb	r0, [r4, #0]
 8005972:	462c      	mov	r4, r5
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8005974:	9306      	str	r3, [sp, #24]
		ST7789_Width <= ( x + Font->FontWidth) || ST7789_Height <= ( y + Font->FontHeight)){
 8005976:	4404      	add	r4, r0
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8005978:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
		ST7789_Width <= ( x + Font->FontWidth) || ST7789_Height <= ( y + Font->FontHeight)){
 800597c:	f8b9 5000 	ldrh.w	r5, [r9]
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8005980:	930a      	str	r3, [sp, #40]	; 0x28
	if (
 8005982:	42a5      	cmp	r5, r4
char ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8005984:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8005988:	9203      	str	r2, [sp, #12]
 800598a:	930d      	str	r3, [sp, #52]	; 0x34
 800598c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
	if (
 8005990:	f340 80b5 	ble.w	8005afe <ST7789_DrawChar+0x19e>
		ST7789_Width <= ( x + Font->FontWidth) || ST7789_Height <= ( y + Font->FontHeight)){
 8005994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005996:	4da4      	ldr	r5, [pc, #656]	; (8005c28 <ST7789_DrawChar+0x2c8>)
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	882d      	ldrh	r5, [r5, #0]
 800599c:	18cc      	adds	r4, r1, r3
 800599e:	42a5      	cmp	r5, r4
 80059a0:	f340 80ad 	ble.w	8005afe <ST7789_DrawChar+0x19e>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {		
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8125 	beq.w	8005bf4 <ST7789_DrawChar+0x294>
    ST7789_SendData(*pBuff >> 8);  
 80059aa:	9c06      	ldr	r4, [sp, #24]
 80059ac:	2a01      	cmp	r2, #1
	uint32_t X = x, Y = y;
 80059ae:	910b      	str	r1, [sp, #44]	; 0x2c
    ST7789_SendData(*pBuff >> 8);  
 80059b0:	ea4f 2414 	mov.w	r4, r4, lsr #8
 80059b4:	bf38      	it	cc
 80059b6:	2201      	movcc	r2, #1
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 80059b8:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8005c34 <ST7789_DrawChar+0x2d4>
    ST7789_SendData(*pBuff >> 8);  
 80059bc:	9407      	str	r4, [sp, #28]
	for (i = 0; i < Font->FontHeight; i++) {		
 80059be:	2400      	movs	r4, #0
 80059c0:	920e      	str	r2, [sp, #56]	; 0x38
 80059c2:	940c      	str	r4, [sp, #48]	; 0x30
 80059c4:	460c      	mov	r4, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	18a2      	adds	r2, r4, r2
 80059ca:	b289      	uxth	r1, r1
 80059cc:	b292      	uxth	r2, r2
 80059ce:	9108      	str	r1, [sp, #32]
    ST7789_SendData(*pBuff >> 8);  
 80059d0:	9903      	ldr	r1, [sp, #12]
 80059d2:	9202      	str	r2, [sp, #8]
 80059d4:	0a09      	lsrs	r1, r1, #8
 80059d6:	9104      	str	r1, [sp, #16]
		
		if( ch < 127 ){			
 80059d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059da:	2a7e      	cmp	r2, #126	; 0x7e
 80059dc:	f200 810e 	bhi.w	8005bfc <ST7789_DrawChar+0x29c>
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 80059e0:	3a20      	subs	r2, #32
		else if( (uint8_t) ch > 191 ){
			// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
			// и если в шрифте который содержит сперва латиницу и спец символы и потом 
			// только кирилицу то нужно добавлять 95 если шрифт 
			// содержит только кирилицу то +96 не нужно
			b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80059e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80059e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80059e6:	6849      	ldr	r1, [r1, #4]
 80059e8:	fb03 4202 	mla	r2, r3, r2, r4
 80059ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80059f0:	9209      	str	r2, [sp, #36]	; 0x24
			// 161 эллемент  ( символ ё ) 
			b = Font->data[( 161 ) * Font->FontHeight + i];
		}
		//-------------------------------------------------------------------
		
		for (j = 0; j < Font->FontWidth; j++) {
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f000 80ef 	beq.w	8005bd6 <ST7789_DrawChar+0x276>
 80059f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059fa:	9a08      	ldr	r2, [sp, #32]
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	189d      	adds	r5, r3, r2
 8005a00:	2300      	movs	r3, #0
 8005a02:	b2ad      	uxth	r5, r5
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	e00f      	b.n	8005a28 <ST7789_DrawChar+0xc8>
							ST7789_DrawPixel(X+xx, Y+yy, TextColor);
					}
				}
				
			} 
			else if( TransparentBg ){
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d17b      	bne.n	8005b06 <ST7789_DrawChar+0x1a6>
		for (j = 0; j < Font->FontWidth; j++) {
 8005a0e:	9a08      	ldr	r2, [sp, #32]
 8005a10:	9b01      	ldr	r3, [sp, #4]
 8005a12:	4415      	add	r5, r2
 8005a14:	4413      	add	r3, r2
 8005a16:	9a05      	ldr	r2, [sp, #20]
 8005a18:	b2ad      	uxth	r5, r5
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	4290      	cmp	r0, r2
 8005a20:	9205      	str	r2, [sp, #20]
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	f240 80d5 	bls.w	8005bd2 <ST7789_DrawChar+0x272>
			if ((b << j) & 0x8000) {
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	9a05      	ldr	r2, [sp, #20]
 8005a2c:	4093      	lsls	r3, r2
 8005a2e:	041c      	lsls	r4, r3, #16
 8005a30:	d5ea      	bpl.n	8005a08 <ST7789_DrawChar+0xa8>
 8005a32:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005a36:	f8df a200 	ldr.w	sl, [pc, #512]	; 8005c38 <ST7789_DrawChar+0x2d8>
					for (xx = 0; xx < multiplier; xx++){
 8005a3a:	fa0f fb86 	sxth.w	fp, r6
		for (j = 0; j < Font->FontWidth; j++) {
 8005a3e:	9c01      	ldr	r4, [sp, #4]
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005a40:	0bf7      	lsrs	r7, r6, #15
							ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8005a42:	b223      	sxth	r3, r4
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	db4e      	blt.n	8005ae6 <ST7789_DrawChar+0x186>
 8005a48:	f8b9 2000 	ldrh.w	r2, [r9]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	da4a      	bge.n	8005ae6 <ST7789_DrawChar+0x186>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	d148      	bne.n	8005ae6 <ST7789_DrawChar+0x186>
 8005a54:	4b74      	ldr	r3, [pc, #464]	; (8005c28 <ST7789_DrawChar+0x2c8>)
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	459b      	cmp	fp, r3
 8005a5a:	da44      	bge.n	8005ae6 <ST7789_DrawChar+0x186>
  ST7789_SetWindow(x, y, x, y);
 8005a5c:	4633      	mov	r3, r6
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4631      	mov	r1, r6
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff fc6c 	bl	8005340 <ST7789_SetWindow>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005a68:	463a      	mov	r2, r7
 8005a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7fb fafe 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005a74:	2201      	movs	r2, #1
 8005a76:	2102      	movs	r1, #2
 8005a78:	4650      	mov	r0, sl
 8005a7a:	f7fb faf9 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005a7e:	f8d8 3000 	ldr.w	r3, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005a82:	9a04      	ldr	r2, [sp, #16]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	f8c8 3000 	str.w	r3, [r8]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a94:	f8c8 3000 	str.w	r3, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005a98:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <ST7789_DrawChar+0x2cc>)
 8005a9a:	701a      	strb	r2, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005a9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005aa0:	04d8      	lsls	r0, r3, #19
 8005aa2:	d5fb      	bpl.n	8005a9c <ST7789_DrawChar+0x13c>
    ST7789_SendData(*pBuff & 0xFF);
 8005aa4:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4650      	mov	r0, sl
    ST7789_SendData(*pBuff & 0xFF);
 8005aae:	9300      	str	r3, [sp, #0]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005ab0:	f7fb fade 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005ab4:	f8d8 2000 	ldr.w	r2, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005ab8:	9b00      	ldr	r3, [sp, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	f8c8 2000 	str.w	r2, [r8]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005ac2:	f8d8 2000 	ldr.w	r2, [r8]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	f8c8 2000 	str.w	r2, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005ace:	4a57      	ldr	r2, [pc, #348]	; (8005c2c <ST7789_DrawChar+0x2cc>)
 8005ad0:	7013      	strb	r3, [r2, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005ad2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	d5fb      	bpl.n	8005ad2 <ST7789_DrawChar+0x172>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005ada:	2201      	movs	r2, #1
 8005adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	f7fb fac5 	bl	8001070 <HAL_GPIO_WritePin>
					for (xx = 0; xx < multiplier; xx++){
 8005ae6:	3401      	adds	r4, #1
 8005ae8:	b2a4      	uxth	r4, r4
 8005aea:	42a5      	cmp	r5, r4
 8005aec:	d1a9      	bne.n	8005a42 <ST7789_DrawChar+0xe2>
				for (yy = 0; yy < multiplier; yy++){
 8005aee:	3601      	adds	r6, #1
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	b2b6      	uxth	r6, r6
 8005af4:	42b3      	cmp	r3, r6
 8005af6:	d1a0      	bne.n	8005a3a <ST7789_DrawChar+0xda>
 8005af8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005afa:	7818      	ldrb	r0, [r3, #0]
 8005afc:	e787      	b.n	8005a0e <ST7789_DrawChar+0xae>
		return 0;
 8005afe:	2000      	movs	r0, #0
		X = x;
		Y = Y + multiplier;
	}
	
	return ch;
}
 8005b00:	b011      	add	sp, #68	; 0x44
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005b0a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8005c38 <ST7789_DrawChar+0x2d8>
					for (xx = 0; xx < multiplier; xx++){
 8005b0e:	fa0f fb86 	sxth.w	fp, r6
		for (j = 0; j < Font->FontWidth; j++) {
 8005b12:	9c01      	ldr	r4, [sp, #4]
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005b14:	0bf7      	lsrs	r7, r6, #15
							ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8005b16:	b223      	sxth	r3, r4
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	db4e      	blt.n	8005bba <ST7789_DrawChar+0x25a>
 8005b1c:	f8b9 2000 	ldrh.w	r2, [r9]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	da4a      	bge.n	8005bba <ST7789_DrawChar+0x25a>
 8005b24:	2f00      	cmp	r7, #0
 8005b26:	d148      	bne.n	8005bba <ST7789_DrawChar+0x25a>
 8005b28:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <ST7789_DrawChar+0x2c8>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	459b      	cmp	fp, r3
 8005b2e:	da44      	bge.n	8005bba <ST7789_DrawChar+0x25a>
  ST7789_SetWindow(x, y, x, y);
 8005b30:	4633      	mov	r3, r6
 8005b32:	4622      	mov	r2, r4
 8005b34:	4631      	mov	r1, r6
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7ff fc02 	bl	8005340 <ST7789_SetWindow>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005b3c:	463a      	mov	r2, r7
 8005b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b42:	4650      	mov	r0, sl
 8005b44:	f7fb fa94 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005b48:	2201      	movs	r2, #1
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	4650      	mov	r0, sl
 8005b4e:	f7fb fa8f 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005b52:	f8d8 3000 	ldr.w	r3, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005b56:	9a07      	ldr	r2, [sp, #28]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	f8c8 3000 	str.w	r3, [r8]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005b60:	f8d8 3000 	ldr.w	r3, [r8]
 8005b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b68:	f8c8 3000 	str.w	r3, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <ST7789_DrawChar+0x2cc>)
 8005b6e:	701a      	strb	r2, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005b70:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b74:	04da      	lsls	r2, r3, #19
 8005b76:	d5fb      	bpl.n	8005b70 <ST7789_DrawChar+0x210>
    ST7789_SendData(*pBuff & 0xFF);
 8005b78:	f89d 3018 	ldrb.w	r3, [sp, #24]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	2102      	movs	r1, #2
 8005b80:	4650      	mov	r0, sl
    ST7789_SendData(*pBuff & 0xFF);
 8005b82:	9300      	str	r3, [sp, #0]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005b84:	f7fb fa74 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005b88:	f8d8 2000 	ldr.w	r2, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005b8c:	9b00      	ldr	r3, [sp, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	f8c8 2000 	str.w	r2, [r8]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005b96:	f8d8 2000 	ldr.w	r2, [r8]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9e:	f8c8 2000 	str.w	r2, [r8]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005ba2:	4a22      	ldr	r2, [pc, #136]	; (8005c2c <ST7789_DrawChar+0x2cc>)
 8005ba4:	7013      	strb	r3, [r2, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005ba6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005baa:	04db      	lsls	r3, r3, #19
 8005bac:	d5fb      	bpl.n	8005ba6 <ST7789_DrawChar+0x246>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	f7fb fa5b 	bl	8001070 <HAL_GPIO_WritePin>
					for (xx = 0; xx < multiplier; xx++){
 8005bba:	3401      	adds	r4, #1
 8005bbc:	b2a4      	uxth	r4, r4
 8005bbe:	42a5      	cmp	r5, r4
 8005bc0:	d1a9      	bne.n	8005b16 <ST7789_DrawChar+0x1b6>
				for (yy = 0; yy < multiplier; yy++){
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	b2b6      	uxth	r6, r6
 8005bc8:	42b3      	cmp	r3, r6
 8005bca:	d1a0      	bne.n	8005b0e <ST7789_DrawChar+0x1ae>
 8005bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bce:	7818      	ldrb	r0, [r3, #0]
 8005bd0:	e71d      	b.n	8005a0e <ST7789_DrawChar+0xae>
 8005bd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd4:	785b      	ldrb	r3, [r3, #1]
		Y = Y + multiplier;
 8005bd6:	9a02      	ldr	r2, [sp, #8]
 8005bd8:	9908      	ldr	r1, [sp, #32]
 8005bda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005bdc:	440a      	add	r2, r1
	for (i = 0; i < Font->FontHeight; i++) {		
 8005bde:	990c      	ldr	r1, [sp, #48]	; 0x30
		Y = Y + multiplier;
 8005be0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	for (i = 0; i < Font->FontHeight; i++) {		
 8005be2:	3101      	adds	r1, #1
 8005be4:	b292      	uxth	r2, r2
		Y = Y + multiplier;
 8005be6:	442c      	add	r4, r5
	for (i = 0; i < Font->FontHeight; i++) {		
 8005be8:	428b      	cmp	r3, r1
 8005bea:	910c      	str	r1, [sp, #48]	; 0x30
		Y = Y + multiplier;
 8005bec:	940b      	str	r4, [sp, #44]	; 0x2c
	for (i = 0; i < Font->FontHeight; i++) {		
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	f63f aef2 	bhi.w	80059d8 <ST7789_DrawChar+0x78>
		for (j = 0; j < Font->FontWidth; j++) {
 8005bf4:	980d      	ldr	r0, [sp, #52]	; 0x34
}
 8005bf6:	b011      	add	sp, #68	; 0x44
 8005bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( (uint8_t) ch > 191 ){
 8005bfc:	2abf      	cmp	r2, #191	; 0xbf
 8005bfe:	d901      	bls.n	8005c04 <ST7789_DrawChar+0x2a4>
			b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8005c00:	3a60      	subs	r2, #96	; 0x60
 8005c02:	e6ee      	b.n	80059e2 <ST7789_DrawChar+0x82>
		else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 8005c04:	2aa8      	cmp	r2, #168	; 0xa8
 8005c06:	d004      	beq.n	8005c12 <ST7789_DrawChar+0x2b2>
		else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8005c08:	2ab8      	cmp	r2, #184	; 0xb8
 8005c0a:	f47f aef2 	bne.w	80059f2 <ST7789_DrawChar+0x92>
			b = Font->data[( 161 ) * Font->FontHeight + i];
 8005c0e:	22a1      	movs	r2, #161	; 0xa1
 8005c10:	e000      	b.n	8005c14 <ST7789_DrawChar+0x2b4>
			b = Font->data[( 160 ) * Font->FontHeight + i];
 8005c12:	22a0      	movs	r2, #160	; 0xa0
			b = Font->data[( 161 ) * Font->FontHeight + i];
 8005c14:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005c16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c18:	6849      	ldr	r1, [r1, #4]
 8005c1a:	fb12 4203 	smlabb	r2, r2, r3, r4
 8005c1e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005c22:	9209      	str	r2, [sp, #36]	; 0x24
 8005c24:	e6e5      	b.n	80059f2 <ST7789_DrawChar+0x92>
 8005c26:	bf00      	nop
 8005c28:	24000c8e 	.word	0x24000c8e
 8005c2c:	40003820 	.word	0x40003820
 8005c30:	24000c8c 	.word	0x24000c8c
 8005c34:	40003800 	.word	0x40003800
 8005c38:	58020400 	.word	0x58020400

08005c3c <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
char ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b085      	sub	sp, #20
 8005c42:	4698      	mov	r8, r3
 8005c44:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8005c48:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005c4a:	2e01      	cmp	r6, #1
 8005c4c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
	
	if( multiplier < 1 ){
		multiplier = 1;
	}
	
	while (*str) {
 8005c50:	782b      	ldrb	r3, [r5, #0]
 8005c52:	bf38      	it	cc
 8005c54:	2601      	movcc	r6, #1
char ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8005c56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	while (*str) {
 8005c58:	b1e3      	cbz	r3, 8005c94 <ST7789_print+0x58>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	468b      	mov	fp, r1
 8005c5e:	4691      	mov	r9, r2
 8005c60:	e006      	b.n	8005c70 <ST7789_print+0x34>
		if ( ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str) != *str ){
			/* Return error */
			return *str;
		}
		
		x = x + (Font->FontWidth * multiplier);
 8005c62:	7838      	ldrb	r0, [r7, #0]
	while (*str) {
 8005c64:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		x = x + (Font->FontWidth * multiplier);
 8005c68:	fb00 4006 	mla	r0, r0, r6, r4
 8005c6c:	b284      	uxth	r4, r0
	while (*str) {
 8005c6e:	b18b      	cbz	r3, 8005c94 <ST7789_print+0x58>
		if ( ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str) != *str ){
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	464a      	mov	r2, r9
 8005c74:	4643      	mov	r3, r8
 8005c76:	4659      	mov	r1, fp
 8005c78:	4620      	mov	r0, r4
 8005c7a:	9602      	str	r6, [sp, #8]
 8005c7c:	9701      	str	r7, [sp, #4]
 8005c7e:	f8cd a000 	str.w	sl, [sp]
 8005c82:	f7ff fe6d 	bl	8005960 <ST7789_DrawChar>
 8005c86:	782b      	ldrb	r3, [r5, #0]
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	d0ea      	beq.n	8005c62 <ST7789_print+0x26>
		/* Increase string pointer */
		str++;
	}
	/* Everything OK, zero should be returned */
	return *str;
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	b005      	add	sp, #20
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
char ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	b005      	add	sp, #20
 8005c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop

08005ca0 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8005ca0:	b570      	push	{r4, r5, r6, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005ca2:	2200      	movs	r2, #0
void ST7789_rotation( uint8_t rotation ){
 8005ca4:	b082      	sub	sp, #8
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
void ST7789_rotation( uint8_t rotation ){
 8005caa:	4604      	mov	r4, r0
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);		
 8005cac:	4856      	ldr	r0, [pc, #344]	; (8005e08 <ST7789_rotation+0x168>)
 8005cae:	f7fb f9df 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4854      	ldr	r0, [pc, #336]	; (8005e08 <ST7789_rotation+0x168>)
 8005cb8:	f7fb f9da 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cbc:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <ST7789_rotation+0x16c>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 8005cbe:	4954      	ldr	r1, [pc, #336]	; (8005e10 <ST7789_rotation+0x170>)
 8005cc0:	2036      	movs	r0, #54	; 0x36
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cc2:	681a      	ldr	r2, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005cc4:	461d      	mov	r5, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Cmd;
 8005cd4:	7008      	strb	r0, [r1, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005cd6:	696b      	ldr	r3, [r5, #20]
 8005cd8:	04de      	lsls	r6, r3, #19
 8005cda:	d5fc      	bpl.n	8005cd6 <ST7789_rotation+0x36>
	ST7789_SendCmd(ST7789_MADCTL);

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8005cdc:	1e60      	subs	r0, r4, #1
 8005cde:	2803      	cmp	r0, #3
 8005ce0:	d828      	bhi.n	8005d34 <ST7789_rotation+0x94>
 8005ce2:	e8df f000 	tbb	[pc, r0]
 8005ce6:	567b      	.short	0x567b
 8005ce8:	0230      	.short	0x0230
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005cea:	2201      	movs	r2, #1
 8005cec:	2102      	movs	r1, #2
 8005cee:	4846      	ldr	r0, [pc, #280]	; (8005e08 <ST7789_rotation+0x168>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005cf0:	24a0      	movs	r4, #160	; 0xa0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005cf2:	f7fb f9bd 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <ST7789_rotation+0x16c>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005cf8:	4845      	ldr	r0, [pc, #276]	; (8005e10 <ST7789_rotation+0x170>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cfa:	6819      	ldr	r1, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005cfc:	461a      	mov	r2, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005cfe:	f041 0101 	orr.w	r1, r1, #1
 8005d02:	6019      	str	r1, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005d0a:	6019      	str	r1, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005d0c:	7004      	strb	r4, [r0, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005d0e:	6953      	ldr	r3, [r2, #20]
 8005d10:	04db      	lsls	r3, r3, #19
 8005d12:	d5fc      	bpl.n	8005d0e <ST7789_rotation+0x6e>
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
				ST7789_Width = 240;
				ST7789_Height = 240;
				ST7789_X_Start = 80;
				ST7789_Y_Start = 0;
 8005d14:	2100      	movs	r1, #0
 8005d16:	4c3f      	ldr	r4, [pc, #252]	; (8005e14 <ST7789_rotation+0x174>)
				ST7789_Width = 240;
 8005d18:	23f0      	movs	r3, #240	; 0xf0
				ST7789_Height = 240;
 8005d1a:	483f      	ldr	r0, [pc, #252]	; (8005e18 <ST7789_rotation+0x178>)
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d1c:	9100      	str	r1, [sp, #0]
				ST7789_X_Start = 80;
 8005d1e:	2550      	movs	r5, #80	; 0x50
				ST7789_Y_Start = 0;
 8005d20:	8021      	strh	r1, [r4, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d22:	461a      	mov	r2, r3
				ST7789_Width = 240;
 8005d24:	4e3d      	ldr	r6, [pc, #244]	; (8005e1c <ST7789_rotation+0x17c>)
				ST7789_X_Start = 80;
 8005d26:	4c3e      	ldr	r4, [pc, #248]	; (8005e20 <ST7789_rotation+0x180>)
				ST7789_Height = 240;
 8005d28:	8003      	strh	r3, [r0, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d2a:	4608      	mov	r0, r1
				ST7789_Width = 240;
 8005d2c:	8033      	strh	r3, [r6, #0]
				ST7789_X_Start = 80;
 8005d2e:	8025      	strh	r5, [r4, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d30:	f7ff fc8c 	bl	800564c <ST7789_FillRect>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005d34:	2201      	movs	r2, #1
 8005d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d3a:	4833      	ldr	r0, [pc, #204]	; (8005e08 <ST7789_rotation+0x168>)
	   default:
		 break;
	  }
	  
	  ST7789_Unselect();
}
 8005d3c:	b002      	add	sp, #8
 8005d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);	
 8005d42:	f7fb b995 	b.w	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2102      	movs	r1, #2
 8005d4a:	482f      	ldr	r0, [pc, #188]	; (8005e08 <ST7789_rotation+0x168>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005d4c:	24c0      	movs	r4, #192	; 0xc0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005d4e:	f7fb f98f 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <ST7789_rotation+0x16c>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005d54:	482e      	ldr	r0, [pc, #184]	; (8005e10 <ST7789_rotation+0x170>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005d56:	6819      	ldr	r1, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005d58:	461a      	mov	r2, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005d5a:	f041 0101 	orr.w	r1, r1, #1
 8005d5e:	6019      	str	r1, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005d66:	6019      	str	r1, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005d68:	7004      	strb	r4, [r0, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005d6a:	6953      	ldr	r3, [r2, #20]
 8005d6c:	04d9      	lsls	r1, r3, #19
 8005d6e:	d5fc      	bpl.n	8005d6a <ST7789_rotation+0xca>
				ST7789_X_Start = 0;
 8005d70:	2100      	movs	r1, #0
 8005d72:	4c2b      	ldr	r4, [pc, #172]	; (8005e20 <ST7789_rotation+0x180>)
				ST7789_Width = 240;
 8005d74:	23f0      	movs	r3, #240	; 0xf0
 8005d76:	4e29      	ldr	r6, [pc, #164]	; (8005e1c <ST7789_rotation+0x17c>)
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d78:	9100      	str	r1, [sp, #0]
				ST7789_Y_Start = 80;
 8005d7a:	2550      	movs	r5, #80	; 0x50
				ST7789_X_Start = 0;
 8005d7c:	8021      	strh	r1, [r4, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d7e:	461a      	mov	r2, r3
				ST7789_Height = 240;
 8005d80:	4825      	ldr	r0, [pc, #148]	; (8005e18 <ST7789_rotation+0x178>)
				ST7789_Y_Start = 80;
 8005d82:	4c24      	ldr	r4, [pc, #144]	; (8005e14 <ST7789_rotation+0x174>)
				ST7789_Height = 240;
 8005d84:	8003      	strh	r3, [r0, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d86:	4608      	mov	r0, r1
				ST7789_Width = 240;
 8005d88:	8033      	strh	r3, [r6, #0]
				ST7789_Y_Start = 80;
 8005d8a:	8025      	strh	r5, [r4, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005d8c:	f7ff fc5e 	bl	800564c <ST7789_FillRect>
}
 8005d90:	e7d0      	b.n	8005d34 <ST7789_rotation+0x94>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005d92:	2201      	movs	r2, #1
 8005d94:	2102      	movs	r1, #2
 8005d96:	481c      	ldr	r0, [pc, #112]	; (8005e08 <ST7789_rotation+0x168>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005d98:	2460      	movs	r4, #96	; 0x60
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005d9a:	f7fb f969 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <ST7789_rotation+0x16c>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005da0:	481b      	ldr	r0, [pc, #108]	; (8005e10 <ST7789_rotation+0x170>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005da2:	6819      	ldr	r1, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005da4:	461a      	mov	r2, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005da6:	f041 0101 	orr.w	r1, r1, #1
 8005daa:	6019      	str	r1, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005db2:	6019      	str	r1, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005db4:	7004      	strb	r4, [r0, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005db6:	6953      	ldr	r3, [r2, #20]
 8005db8:	04d8      	lsls	r0, r3, #19
 8005dba:	d5fc      	bpl.n	8005db6 <ST7789_rotation+0x116>
				ST7789_X_Start = 0;
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4c18      	ldr	r4, [pc, #96]	; (8005e20 <ST7789_rotation+0x180>)
				ST7789_Width = 240;
 8005dc0:	23f0      	movs	r3, #240	; 0xf0
 8005dc2:	4d16      	ldr	r5, [pc, #88]	; (8005e1c <ST7789_rotation+0x17c>)
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005dc4:	9100      	str	r1, [sp, #0]
				ST7789_Height = 240;
 8005dc6:	4814      	ldr	r0, [pc, #80]	; (8005e18 <ST7789_rotation+0x178>)
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005dc8:	461a      	mov	r2, r3
				ST7789_X_Start = 0;
 8005dca:	8021      	strh	r1, [r4, #0]
				ST7789_Y_Start = 0;
 8005dcc:	4c11      	ldr	r4, [pc, #68]	; (8005e14 <ST7789_rotation+0x174>)
				ST7789_Height = 240;
 8005dce:	8003      	strh	r3, [r0, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005dd0:	4608      	mov	r0, r1
				ST7789_Width = 240;
 8005dd2:	802b      	strh	r3, [r5, #0]
				ST7789_Y_Start = 0;
 8005dd4:	8021      	strh	r1, [r4, #0]
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8005dd6:	f7ff fc39 	bl	800564c <ST7789_FillRect>
}
 8005dda:	e7ab      	b.n	8005d34 <ST7789_rotation+0x94>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005ddc:	2201      	movs	r2, #1
 8005dde:	2102      	movs	r1, #2
 8005de0:	4809      	ldr	r0, [pc, #36]	; (8005e08 <ST7789_rotation+0x168>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005de2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005de4:	f7fb f944 	bl	8001070 <HAL_GPIO_WritePin>
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <ST7789_rotation+0x16c>)
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005dea:	4809      	ldr	r0, [pc, #36]	; (8005e10 <ST7789_rotation+0x170>)
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005dec:	6819      	ldr	r1, [r3, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005dee:	461a      	mov	r2, r3
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_SPE);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_SPE;
 8005df0:	f041 0101 	orr.w	r1, r1, #1
 8005df4:	6019      	str	r1, [r3, #0]
			SET_BIT(ST7789_SPI_CMSIS->CR1, SPI_CR1_CSTART);	// ST7789_SPI_CMSIS->CR1 |= SPI_CR1_CSTART;
 8005df6:	6819      	ldr	r1, [r3, #0]
 8005df8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005dfc:	6019      	str	r1, [r3, #0]
			*((__IO uint8_t *)&ST7789_SPI_CMSIS->TXDR )  = Data;
 8005dfe:	7004      	strb	r4, [r0, #0]
			while (!( ST7789_SPI_CMSIS -> SR & SPI_SR_TXC )){};
 8005e00:	6953      	ldr	r3, [r2, #20]
 8005e02:	04dc      	lsls	r4, r3, #19
 8005e04:	d5fc      	bpl.n	8005e00 <ST7789_rotation+0x160>
 8005e06:	e7d9      	b.n	8005dbc <ST7789_rotation+0x11c>
 8005e08:	58020400 	.word	0x58020400
 8005e0c:	40003800 	.word	0x40003800
 8005e10:	40003820 	.word	0x40003820
 8005e14:	24000592 	.word	0x24000592
 8005e18:	24000c8e 	.word	0x24000c8e
 8005e1c:	24000c8c 	.word	0x24000c8c
 8005e20:	24000590 	.word	0x24000590

08005e24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e24:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e26:	4903      	ldr	r1, [pc, #12]	; (8005e34 <MX_FATFS_Init+0x10>)
 8005e28:	4803      	ldr	r0, [pc, #12]	; (8005e38 <MX_FATFS_Init+0x14>)
 8005e2a:	f003 fac7 	bl	80093bc <FATFS_LinkDriver>
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <MX_FATFS_Init+0x18>)
 8005e30:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e32:	bd08      	pop	{r3, pc}
 8005e34:	24000c94 	.word	0x24000c94
 8005e38:	0801106c 	.word	0x0801106c
 8005e3c:	24000c90 	.word	0x24000c90

08005e40 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8005e40:	2000      	movs	r0, #0
 8005e42:	4770      	bx	lr

08005e44 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e44:	b530      	push	{r4, r5, lr}
 8005e46:	460d      	mov	r5, r1
 8005e48:	b083      	sub	sp, #12
 8005e4a:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	462a      	mov	r2, r5
 8005e52:	4623      	mov	r3, r4
 8005e54:	4803      	ldr	r0, [pc, #12]	; (8005e64 <BSP_SD_ReadBlocks+0x20>)
 8005e56:	f7fd f8fb 	bl	8003050 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8005e5a:	3800      	subs	r0, #0
 8005e5c:	bf18      	it	ne
 8005e5e:	2001      	movne	r0, #1
 8005e60:	b003      	add	sp, #12
 8005e62:	bd30      	pop	{r4, r5, pc}
 8005e64:	24000b84 	.word	0x24000b84

08005e68 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e68:	b530      	push	{r4, r5, lr}
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e70:	4601      	mov	r1, r0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	462a      	mov	r2, r5
 8005e76:	4623      	mov	r3, r4
 8005e78:	4803      	ldr	r0, [pc, #12]	; (8005e88 <BSP_SD_WriteBlocks+0x20>)
 8005e7a:	f7fd fa07 	bl	800328c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8005e7e:	3800      	subs	r0, #0
 8005e80:	bf18      	it	ne
 8005e82:	2001      	movne	r0, #1
 8005e84:	b003      	add	sp, #12
 8005e86:	bd30      	pop	{r4, r5, pc}
 8005e88:	24000b84 	.word	0x24000b84

08005e8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e8c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e8e:	4803      	ldr	r0, [pc, #12]	; (8005e9c <BSP_SD_GetCardState+0x10>)
 8005e90:	f7fd fee8 	bl	8003c64 <HAL_SD_GetCardState>
}
 8005e94:	3804      	subs	r0, #4
 8005e96:	bf18      	it	ne
 8005e98:	2001      	movne	r0, #1
 8005e9a:	bd08      	pop	{r3, pc}
 8005e9c:	24000b84 	.word	0x24000b84

08005ea0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005ea0:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005ea2:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <BSP_SD_GetCardInfo+0x8>)
 8005ea4:	f7fd bd88 	b.w	80039b8 <HAL_SD_GetCardInfo>
 8005ea8:	24000b84 	.word	0x24000b84

08005eac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005eac:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8005eb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005eb8:	b002      	add	sp, #8
 8005eba:	4770      	bx	lr

08005ebc <BSP_SD_Init>:
{
 8005ebc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005ebe:	f7ff fff5 	bl	8005eac <BSP_SD_IsDetected>
 8005ec2:	2801      	cmp	r0, #1
 8005ec4:	d001      	beq.n	8005eca <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 8005ec6:	2002      	movs	r0, #2
}
 8005ec8:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8005eca:	4807      	ldr	r0, [pc, #28]	; (8005ee8 <BSP_SD_Init+0x2c>)
 8005ecc:	f7fd fe66 	bl	8003b9c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1f9      	bne.n	8005ec8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005ed4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ed8:	4803      	ldr	r0, [pc, #12]	; (8005ee8 <BSP_SD_Init+0x2c>)
 8005eda:	f7fd fd81 	bl	80039e0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8005ede:	3800      	subs	r0, #0
 8005ee0:	bf18      	it	ne
 8005ee2:	2001      	movne	r0, #1
}
 8005ee4:	bd08      	pop	{r3, pc}
 8005ee6:	bf00      	nop
 8005ee8:	24000b84 	.word	0x24000b84

08005eec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005eec:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8005eee:	4c0a      	ldr	r4, [pc, #40]	; (8005f18 <SD_initialize+0x2c>)
 8005ef0:	2501      	movs	r5, #1
 8005ef2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005ef4:	f7ff ffe2 	bl	8005ebc <BSP_SD_Init>
 8005ef8:	b108      	cbz	r0, 8005efe <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005efa:	7820      	ldrb	r0, [r4, #0]
}
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8005efe:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005f00:	f7ff ffc4 	bl	8005e8c <BSP_SD_GetCardState>
 8005f04:	b918      	cbnz	r0, 8005f0e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8005f06:	7823      	ldrb	r3, [r4, #0]
 8005f08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f0c:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005f0e:	7823      	ldrb	r3, [r4, #0]
 8005f10:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8005f12:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005f14:	7820      	ldrb	r0, [r4, #0]
}
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	24000030 	.word	0x24000030

08005f1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f1c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4c05      	ldr	r4, [pc, #20]	; (8005f38 <SD_status+0x1c>)
 8005f22:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005f24:	f7ff ffb2 	bl	8005e8c <BSP_SD_GetCardState>
 8005f28:	b918      	cbnz	r0, 8005f32 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8005f2a:	7823      	ldrb	r3, [r4, #0]
 8005f2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f30:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005f32:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	24000030 	.word	0x24000030

08005f3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f3c:	b508      	push	{r3, lr}
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4611      	mov	r1, r2
 8005f42:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	f7ff ff7c 	bl	8005e44 <BSP_SD_ReadBlocks>
 8005f4c:	b108      	cbz	r0, 8005f52 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 8005f4e:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8005f50:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f52:	f7ff ff9b 	bl	8005e8c <BSP_SD_GetCardState>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d0fa      	beq.n	8005f50 <SD_read+0x14>
 8005f5a:	f7ff ff97 	bl	8005e8c <BSP_SD_GetCardState>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d1f7      	bne.n	8005f52 <SD_read+0x16>
 8005f62:	e7f5      	b.n	8005f50 <SD_read+0x14>

08005f64 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <SD_ioctl+0x58>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	07db      	lsls	r3, r3, #31
 8005f6a:	d411      	bmi.n	8005f90 <SD_ioctl+0x2c>
 8005f6c:	4608      	mov	r0, r1
{
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4614      	mov	r4, r2
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	2903      	cmp	r1, #3
 8005f76:	d81e      	bhi.n	8005fb6 <SD_ioctl+0x52>
 8005f78:	e8df f001 	tbb	[pc, r1]
 8005f7c:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f80:	a801      	add	r0, sp, #4
 8005f82:	f7ff ff8d 	bl	8005ea0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f86:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8005f88:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f8a:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005f8c:	b00a      	add	sp, #40	; 0x28
 8005f8e:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f90:	2003      	movs	r0, #3
}
 8005f92:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 8005f94:	a801      	add	r0, sp, #4
 8005f96:	f7ff ff83 	bl	8005ea0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f9a:	9b08      	ldr	r3, [sp, #32]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	0a5b      	lsrs	r3, r3, #9
 8005fa0:	6023      	str	r3, [r4, #0]
}
 8005fa2:	b00a      	add	sp, #40	; 0x28
 8005fa4:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005fa6:	a801      	add	r0, sp, #4
 8005fa8:	f7ff ff7a 	bl	8005ea0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005fac:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8005fae:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005fb0:	8023      	strh	r3, [r4, #0]
}
 8005fb2:	b00a      	add	sp, #40	; 0x28
 8005fb4:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005fb6:	2004      	movs	r0, #4
 8005fb8:	e7e8      	b.n	8005f8c <SD_ioctl+0x28>
 8005fba:	bf00      	nop
 8005fbc:	24000030 	.word	0x24000030

08005fc0 <SD_write>:
{
 8005fc0:	b508      	push	{r3, lr}
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	f7ff ff4c 	bl	8005e68 <BSP_SD_WriteBlocks>
 8005fd0:	b108      	cbz	r0, 8005fd6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 8005fd2:	2001      	movs	r0, #1
}
 8005fd4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005fd6:	f7ff ff59 	bl	8005e8c <BSP_SD_GetCardState>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d0fa      	beq.n	8005fd4 <SD_write+0x14>
 8005fde:	f7ff ff55 	bl	8005e8c <BSP_SD_GetCardState>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d1f7      	bne.n	8005fd6 <SD_write+0x16>
 8005fe6:	e7f5      	b.n	8005fd4 <SD_write+0x14>

08005fe8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <disk_status+0x10>)
 8005fea:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005fee:	4418      	add	r0, r3
 8005ff0:	6853      	ldr	r3, [r2, #4]
 8005ff2:	7a00      	ldrb	r0, [r0, #8]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4718      	bx	r3
 8005ff8:	240005bc 	.word	0x240005bc

08005ffc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005ffc:	4b08      	ldr	r3, [pc, #32]	; (8006020 <disk_initialize+0x24>)
 8005ffe:	5c1a      	ldrb	r2, [r3, r0]
 8006000:	b95a      	cbnz	r2, 800601a <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006002:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006006:	1819      	adds	r1, r3, r0
{
 8006008:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 800600a:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800600c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800600e:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006014:	7a08      	ldrb	r0, [r1, #8]
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	4718      	bx	r3
}
 800601a:	2000      	movs	r0, #0
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	240005bc 	.word	0x240005bc

08006024 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006024:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006026:	4c05      	ldr	r4, [pc, #20]	; (800603c <disk_read+0x18>)
 8006028:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800602c:	4420      	add	r0, r4
 800602e:	686c      	ldr	r4, [r5, #4]
 8006030:	7a00      	ldrb	r0, [r0, #8]
 8006032:	68a4      	ldr	r4, [r4, #8]
 8006034:	46a4      	mov	ip, r4
  return res;
}
 8006036:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006038:	4760      	bx	ip
 800603a:	bf00      	nop
 800603c:	240005bc 	.word	0x240005bc

08006040 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006040:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006042:	4c05      	ldr	r4, [pc, #20]	; (8006058 <disk_write+0x18>)
 8006044:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006048:	4420      	add	r0, r4
 800604a:	686c      	ldr	r4, [r5, #4]
 800604c:	7a00      	ldrb	r0, [r0, #8]
 800604e:	68e4      	ldr	r4, [r4, #12]
 8006050:	46a4      	mov	ip, r4
  return res;
}
 8006052:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006054:	4760      	bx	ip
 8006056:	bf00      	nop
 8006058:	240005bc 	.word	0x240005bc

0800605c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <disk_ioctl+0x18>)
{
 800605e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006060:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006064:	4418      	add	r0, r3
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	7a00      	ldrb	r0, [r0, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800606c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006070:	4718      	bx	r3
 8006072:	bf00      	nop
 8006074:	240005bc 	.word	0x240005bc

08006078 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800607c:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 800607e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8006082:	758f      	strb	r7, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006084:	69c3      	ldr	r3, [r0, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d066      	beq.n	8006158 <get_fileinfo+0xe0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800608a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800608c:	4606      	mov	r6, r0
 800608e:	460d      	mov	r5, r1
 8006090:	3301      	adds	r3, #1
 8006092:	d01e      	beq.n	80060d2 <get_fileinfo+0x5a>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006094:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006098:	8818      	ldrh	r0, [r3, #0]
 800609a:	2800      	cmp	r0, #0
 800609c:	d06c      	beq.n	8006178 <get_fileinfo+0x100>
 800609e:	f101 0715 	add.w	r7, r1, #21
 80060a2:	2401      	movs	r4, #1
 80060a4:	e000      	b.n	80060a8 <get_fileinfo+0x30>
 80060a6:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80060a8:	2100      	movs	r1, #0
 80060aa:	f003 f9ab 	bl	8009404 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80060ae:	1c63      	adds	r3, r4, #1
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d061      	beq.n	8006178 <get_fileinfo+0x100>
 80060b4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80060b8:	d05e      	beq.n	8006178 <get_fileinfo+0x100>
				fno->fname[i++] = (TCHAR)w;
 80060ba:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80060be:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80060c2:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d1ed      	bne.n	80060a6 <get_fileinfo+0x2e>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80060ca:	442c      	add	r4, r5
 80060cc:	2300      	movs	r3, #0
 80060ce:	75a3      	strb	r3, [r4, #22]
 80060d0:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 80060d2:	6a36      	ldr	r6, [r6, #32]
	i = j = 0;
 80060d4:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 80060d6:	f04f 082e 	mov.w	r8, #46	; 0x2e
 80060da:	1e70      	subs	r0, r6, #1
 80060dc:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 80060e0:	4602      	mov	r2, r0
 80060e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d01c      	beq.n	8006124 <get_fileinfo+0xac>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80060ea:	3202      	adds	r2, #2
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	eba2 0206 	sub.w	r2, r2, r6
 80060f2:	bf08      	it	eq
 80060f4:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80060f6:	2a09      	cmp	r2, #9
 80060f8:	d030      	beq.n	800615c <get_fileinfo+0xe4>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80060fa:	1929      	adds	r1, r5, r4
 80060fc:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 80060fe:	b987      	cbnz	r7, 8006122 <get_fileinfo+0xaa>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006100:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8006104:	f1be 0f19 	cmp.w	lr, #25
 8006108:	d80a      	bhi.n	8006120 <get_fileinfo+0xa8>
 800610a:	2a09      	cmp	r2, #9
 800610c:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8006110:	bf34      	ite	cc
 8006112:	2208      	movcc	r2, #8
 8006114:	2210      	movcs	r2, #16
 8006116:	ea1e 0f02 	tst.w	lr, r2
 800611a:	d001      	beq.n	8006120 <get_fileinfo+0xa8>
				c += 0x20;			/* To lower */
 800611c:	3320      	adds	r3, #32
 800611e:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8006120:	758b      	strb	r3, [r1, #22]
		}
		j++;
 8006122:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8006124:	4584      	cmp	ip, r0
 8006126:	d1db      	bne.n	80060e0 <get_fileinfo+0x68>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8006128:	1929      	adds	r1, r5, r4
	if (!lfv) {
 800612a:	b1ff      	cbz	r7, 800616c <get_fileinfo+0xf4>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800612c:	2300      	movs	r3, #0
 800612e:	724b      	strb	r3, [r1, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006130:	7af3      	ldrb	r3, [r6, #11]
 8006132:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 8006134:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 8006136:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 8006138:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 800613a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800613e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006142:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8006144:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 8006146:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 8006148:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 800614a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800614e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006152:	0c1a      	lsrs	r2, r3, #16
 8006154:	80eb      	strh	r3, [r5, #6]
 8006156:	80aa      	strh	r2, [r5, #4]
}
 8006158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800615c:	1929      	adds	r1, r5, r4
 800615e:	b90f      	cbnz	r7, 8006164 <get_fileinfo+0xec>
 8006160:	f881 8016 	strb.w	r8, [r1, #22]
			fno->altname[j++] = '.';
 8006164:	3401      	adds	r4, #1
 8006166:	f881 8009 	strb.w	r8, [r1, #9]
 800616a:	e7c6      	b.n	80060fa <get_fileinfo+0x82>
		fno->fname[j] = 0;
 800616c:	758f      	strb	r7, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800616e:	7b33      	ldrb	r3, [r6, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf08      	it	eq
 8006174:	4629      	moveq	r1, r5
 8006176:	e7d9      	b.n	800612c <get_fileinfo+0xb4>
			i = j = 0;
 8006178:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800617a:	2300      	movs	r3, #0
 800617c:	442c      	add	r4, r5
 800617e:	75a3      	strb	r3, [r4, #22]
 8006180:	7daf      	ldrb	r7, [r5, #22]
 8006182:	e7a6      	b.n	80060d2 <get_fileinfo+0x5a>

08006184 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006186:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006188:	b083      	sub	sp, #12
 800618a:	4604      	mov	r4, r0
 800618c:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800618e:	b973      	cbnz	r3, 80061ae <move_window.part.0+0x2a>
 8006190:	f100 0138 	add.w	r1, r0, #56	; 0x38
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006194:	2301      	movs	r3, #1
 8006196:	462a      	mov	r2, r5
 8006198:	7860      	ldrb	r0, [r4, #1]
 800619a:	f7ff ff43 	bl	8006024 <disk_read>
 800619e:	b910      	cbnz	r0, 80061a6 <move_window.part.0+0x22>
			fs->winsect = sector;
 80061a0:	6365      	str	r5, [r4, #52]	; 0x34
}
 80061a2:	b003      	add	sp, #12
 80061a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80061a6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061a8:	f04f 35ff 	mov.w	r5, #4294967295
 80061ac:	e7f8      	b.n	80061a0 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 80061ae:	6b46      	ldr	r6, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061b0:	f100 0138 	add.w	r1, r0, #56	; 0x38
 80061b4:	2301      	movs	r3, #1
 80061b6:	7840      	ldrb	r0, [r0, #1]
 80061b8:	4632      	mov	r2, r6
 80061ba:	9101      	str	r1, [sp, #4]
 80061bc:	f7ff ff40 	bl	8006040 <disk_write>
 80061c0:	b9b8      	cbnz	r0, 80061f2 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80061c4:	6a23      	ldr	r3, [r4, #32]
 80061c6:	1ab2      	subs	r2, r6, r2
 80061c8:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80061ca:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d2e1      	bcs.n	8006194 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061d0:	78a7      	ldrb	r7, [r4, #2]
 80061d2:	2f01      	cmp	r7, #1
 80061d4:	d801      	bhi.n	80061da <move_window.part.0+0x56>
 80061d6:	e7dd      	b.n	8006194 <move_window.part.0+0x10>
 80061d8:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
 80061da:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061dc:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80061de:	2301      	movs	r3, #1
 80061e0:	7860      	ldrb	r0, [r4, #1]
 80061e2:	4632      	mov	r2, r6
 80061e4:	9101      	str	r1, [sp, #4]
 80061e6:	f7ff ff2b 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061ea:	2f01      	cmp	r7, #1
 80061ec:	9901      	ldr	r1, [sp, #4]
 80061ee:	d1f3      	bne.n	80061d8 <move_window.part.0+0x54>
 80061f0:	e7d0      	b.n	8006194 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 80061f2:	2001      	movs	r0, #1
}
 80061f4:	b003      	add	sp, #12
 80061f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061f8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80061f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 80061fc:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8006204:	2b02      	cmp	r3, #2
 8006206:	d006      	beq.n	8006216 <put_fat.part.0+0x1e>
 8006208:	2b03      	cmp	r3, #3
 800620a:	d052      	beq.n	80062b2 <put_fat.part.0+0xba>
 800620c:	2b01      	cmp	r3, #1
 800620e:	d01b      	beq.n	8006248 <put_fat.part.0+0x50>
 8006210:	2002      	movs	r0, #2
}
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006216:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006218:	6b43      	ldr	r3, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800621a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800621e:	4299      	cmp	r1, r3
 8006220:	d003      	beq.n	800622a <put_fat.part.0+0x32>
 8006222:	f7ff ffaf 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 8006226:	2800      	cmp	r0, #0
 8006228:	d1f3      	bne.n	8006212 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800622a:	006d      	lsls	r5, r5, #1
 800622c:	f104 0338 	add.w	r3, r4, #56	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8006230:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 8006234:	2201      	movs	r2, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006236:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			break;
 800623a:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800623c:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800623e:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 8006240:	7059      	strb	r1, [r3, #1]
			fs->wflag = 1;
 8006242:	70e2      	strb	r2, [r4, #3]
}
 8006244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8006248:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800624c:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800624e:	6b43      	ldr	r3, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006250:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006254:	4299      	cmp	r1, r3
 8006256:	d003      	beq.n	8006260 <put_fat.part.0+0x68>
 8006258:	f7ff ff94 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 800625c:	2800      	cmp	r0, #0
 800625e:	d1d8      	bne.n	8006212 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006260:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8006262:	f107 0801 	add.w	r8, r7, #1
 8006266:	f104 0938 	add.w	r9, r4, #56	; 0x38
 800626a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800626e:	d545      	bpl.n	80062fc <put_fat.part.0+0x104>
 8006270:	f819 3007 	ldrb.w	r3, [r9, r7]
			fs->wflag = 1;
 8006274:	2201      	movs	r2, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800627e:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006282:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006284:	6b63      	ldr	r3, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006286:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 800628a:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800628c:	4299      	cmp	r1, r3
 800628e:	d004      	beq.n	800629a <put_fat.part.0+0xa2>
 8006290:	4620      	mov	r0, r4
 8006292:	f7ff ff77 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 8006296:	2800      	cmp	r0, #0
 8006298:	d1bb      	bne.n	8006212 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800629a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800629e:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 80062a2:	44c8      	add	r8, r9
			fs->wflag = 1;
 80062a4:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062a6:	f888 2000 	strb.w	r2, [r8]
			break;
 80062aa:	2000      	movs	r0, #0
			fs->wflag = 1;
 80062ac:	70e3      	strb	r3, [r4, #3]
}
 80062ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062b2:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80062b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062b6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d003      	beq.n	80062c6 <put_fat.part.0+0xce>
 80062be:	f7ff ff61 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d1a5      	bne.n	8006212 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062c6:	00ad      	lsls	r5, r5, #2
 80062c8:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80062cc:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
			fs->wflag = 1;
 80062d0:	f04f 0c01 	mov.w	ip, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062d4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			break;
 80062d8:	2000      	movs	r0, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062da:	194f      	adds	r7, r1, r5
	rv = rv << 8 | ptr[2];
 80062dc:	887b      	ldrh	r3, [r7, #2]
	rv = rv << 8 | ptr[0];
 80062de:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062e4:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 80062e6:	554b      	strb	r3, [r1, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 80062e8:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80062ea:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	70ba      	strb	r2, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80062f0:	7079      	strb	r1, [r7, #1]
	*ptr++ = (BYTE)val;
 80062f2:	70fb      	strb	r3, [r7, #3]
			fs->wflag = 1;
 80062f4:	f884 c003 	strb.w	ip, [r4, #3]
}
 80062f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062fc:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8006300:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006302:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006304:	6b63      	ldr	r3, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006306:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 800630a:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800630c:	4299      	cmp	r1, r3
 800630e:	d005      	beq.n	800631c <put_fat.part.0+0x124>
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff ff37 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 8006316:	2800      	cmp	r0, #0
 8006318:	f47f af7b 	bne.w	8006212 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800631c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006320:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8006324:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006326:	f898 1000 	ldrb.w	r1, [r8]
 800632a:	f021 060f 	bic.w	r6, r1, #15
 800632e:	4332      	orrs	r2, r6
 8006330:	e7b8      	b.n	80062a4 <put_fat.part.0+0xac>
 8006332:	bf00      	nop

08006334 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006334:	2901      	cmp	r1, #1
 8006336:	d90e      	bls.n	8006356 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800633a:	69c3      	ldr	r3, [r0, #28]
 800633c:	460c      	mov	r4, r1
 800633e:	4605      	mov	r5, r0
 8006340:	4299      	cmp	r1, r3
 8006342:	d206      	bcs.n	8006352 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8006344:	7803      	ldrb	r3, [r0, #0]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d046      	beq.n	80063d8 <get_fat.isra.0+0xa4>
 800634a:	2b03      	cmp	r3, #3
 800634c:	d02c      	beq.n	80063a8 <get_fat.isra.0+0x74>
 800634e:	2b01      	cmp	r3, #1
 8006350:	d003      	beq.n	800635a <get_fat.isra.0+0x26>
 8006352:	2001      	movs	r0, #1
}
 8006354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8006356:	2001      	movs	r0, #1
}
 8006358:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 800635a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800635e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006360:	6b42      	ldr	r2, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006362:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006366:	4291      	cmp	r1, r2
 8006368:	d005      	beq.n	8006376 <get_fat.isra.0+0x42>
 800636a:	f7ff ff0b 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800636e:	2800      	cmp	r0, #0
 8006370:	d13b      	bne.n	80063ea <get_fat.isra.0+0xb6>
 8006372:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006374:	6b6a      	ldr	r2, [r5, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8006376:	f3c7 0008 	ubfx	r0, r7, #0, #9
 800637a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800637c:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8006380:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006382:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006384:	f890 6038 	ldrb.w	r6, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006388:	d003      	beq.n	8006392 <get_fat.isra.0+0x5e>
 800638a:	4628      	mov	r0, r5
 800638c:	f7ff fefa 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006390:	bb58      	cbnz	r0, 80063ea <get_fat.isra.0+0xb6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006392:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006396:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006398:	443d      	add	r5, r7
 800639a:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 800639e:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063a2:	d52f      	bpl.n	8006404 <get_fat.isra.0+0xd0>
 80063a4:	0900      	lsrs	r0, r0, #4
}
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <get_fat.isra.0+0x86>
 80063b4:	f7ff fee6 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063b8:	b9b8      	cbnz	r0, 80063ea <get_fat.isra.0+0xb6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80063ba:	00a4      	lsls	r4, r4, #2
 80063bc:	3538      	adds	r5, #56	; 0x38
 80063be:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80063c2:	192a      	adds	r2, r5, r4
	rv = rv << 8 | ptr[0];
 80063c4:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 80063c6:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80063c8:	7853      	ldrb	r3, [r2, #1]
 80063ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80063ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80063d2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80063d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063da:	6b43      	ldr	r3, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063dc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063e0:	4299      	cmp	r1, r3
 80063e2:	d005      	beq.n	80063f0 <get_fat.isra.0+0xbc>
 80063e4:	f7ff fece 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063e8:	b110      	cbz	r0, 80063f0 <get_fat.isra.0+0xbc>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80063ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063f0:	0064      	lsls	r4, r4, #1
 80063f2:	3538      	adds	r5, #56	; 0x38
 80063f4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80063f8:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80063fa:	5d28      	ldrb	r0, [r5, r4]
 80063fc:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8006402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006404:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8006408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640a:	bf00      	nop

0800640c <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800640c:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006412:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006414:	b37b      	cbz	r3, 8006476 <dir_next.constprop.0+0x6a>
 8006416:	3520      	adds	r5, #32
 8006418:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800641c:	d22b      	bcs.n	8006476 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800641e:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8006422:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006424:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006426:	b137      	cbz	r7, 8006436 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006428:	3638      	adds	r6, #56	; 0x38
	return FR_OK;
 800642a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800642c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800642e:	443e      	add	r6, r7
 8006430:	6226      	str	r6, [r4, #32]
}
 8006432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8006436:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8006438:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800643a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800643c:	b1f1      	cbz	r1, 800647c <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800643e:	8973      	ldrh	r3, [r6, #10]
 8006440:	3b01      	subs	r3, #1
 8006442:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8006446:	d1ef      	bne.n	8006428 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ff73 	bl	8006334 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800644e:	2801      	cmp	r0, #1
 8006450:	d91c      	bls.n	800648c <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d01c      	beq.n	8006490 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006456:	69f3      	ldr	r3, [r6, #28]
 8006458:	4298      	cmp	r0, r3
 800645a:	d213      	bcs.n	8006484 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800645c:	3b02      	subs	r3, #2
	clst -= 2;
 800645e:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8006460:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006462:	429a      	cmp	r2, r3
 8006464:	d204      	bcs.n	8006470 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 8006466:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800646a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800646c:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clust2sect(fs, clst);
 8006470:	f8c4 801c 	str.w	r8, [r4, #28]
 8006474:	e7d8      	b.n	8006428 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006476:	2004      	movs	r0, #4
}
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800647c:	8933      	ldrh	r3, [r6, #8]
 800647e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8006482:	d8d1      	bhi.n	8006428 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 8006484:	2300      	movs	r3, #0
 8006486:	2004      	movs	r0, #4
 8006488:	61e3      	str	r3, [r4, #28]
 800648a:	e7d2      	b.n	8006432 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800648c:	2002      	movs	r0, #2
 800648e:	e7d0      	b.n	8006432 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006490:	2001      	movs	r0, #1
 8006492:	e7ce      	b.n	8006432 <dir_next.constprop.0+0x26>

08006494 <dir_read.constprop.0>:
FRESULT dir_read (
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8006498:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 800649c:	b083      	sub	sp, #12
 800649e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80064a0:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 80064a2:	f1ba 0f00 	cmp.w	sl, #0
 80064a6:	d064      	beq.n	8006572 <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 80064a8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80064ac:	f106 0838 	add.w	r8, r6, #56	; 0x38
 80064b0:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80064b2:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80064b4:	4555      	cmp	r5, sl
 80064b6:	d015      	beq.n	80064e4 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064b8:	78f3      	ldrb	r3, [r6, #3]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8102 	bne.w	80066c4 <dir_read.constprop.0+0x230>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064c0:	2301      	movs	r3, #1
 80064c2:	4652      	mov	r2, sl
 80064c4:	4641      	mov	r1, r8
 80064c6:	7870      	ldrb	r0, [r6, #1]
 80064c8:	f7ff fdac 	bl	8006024 <disk_read>
 80064cc:	b140      	cbz	r0, 80064e0 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80064d2:	2001      	movs	r0, #1
			fs->winsect = sector;
 80064d4:	6373      	str	r3, [r6, #52]	; 0x34
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80064d6:	2300      	movs	r3, #0
 80064d8:	61e3      	str	r3, [r4, #28]
}
 80064da:	b003      	add	sp, #12
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80064e0:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80064e4:	6a21      	ldr	r1, [r4, #32]
 80064e6:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	d042      	beq.n	8006572 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80064ec:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80064ee:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80064f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f4:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80064f6:	d005      	beq.n	8006504 <dir_read.constprop.0+0x70>
 80064f8:	2a2e      	cmp	r2, #46	; 0x2e
 80064fa:	d003      	beq.n	8006504 <dir_read.constprop.0+0x70>
 80064fc:	f023 0020 	bic.w	r0, r3, #32
 8006500:	2808      	cmp	r0, #8
 8006502:	d13d      	bne.n	8006580 <dir_read.constprop.0+0xec>
 8006504:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8006506:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006508:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800650a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 800650e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006512:	d22e      	bcs.n	8006572 <dir_read.constprop.0+0xde>
 8006514:	f1ba 0f00 	cmp.w	sl, #0
 8006518:	d02b      	beq.n	8006572 <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800651a:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800651e:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006520:	bb4a      	cbnz	r2, 8006576 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 8006522:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8006526:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8006528:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800652c:	b969      	cbnz	r1, 800654a <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800652e:	891a      	ldrh	r2, [r3, #8]
 8006530:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8006534:	d91d      	bls.n	8006572 <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006536:	3338      	adds	r3, #56	; 0x38
	dp->dptr = ofs;						/* Current entry */
 8006538:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800653a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800653c:	f1ba 0f00 	cmp.w	sl, #0
 8006540:	d1b7      	bne.n	80064b2 <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006542:	2000      	movs	r0, #0
}
 8006544:	b003      	add	sp, #12
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800654a:	895a      	ldrh	r2, [r3, #10]
 800654c:	3a01      	subs	r2, #1
 800654e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8006552:	d1f0      	bne.n	8006536 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006554:	4618      	mov	r0, r3
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	f7ff feec 	bl	8006334 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800655c:	2801      	cmp	r0, #1
 800655e:	f240 80e6 	bls.w	800672e <dir_read.constprop.0+0x29a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	f000 80b5 	beq.w	80066d2 <dir_read.constprop.0+0x23e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	4290      	cmp	r0, r2
 800656e:	f0c0 80d1 	bcc.w	8006714 <dir_read.constprop.0+0x280>
	FRESULT res = FR_NO_FILE;
 8006572:	2004      	movs	r0, #4
 8006574:	e7af      	b.n	80064d6 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006576:	3338      	adds	r3, #56	; 0x38
	dp->dptr = ofs;						/* Current entry */
 8006578:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800657a:	441a      	add	r2, r3
 800657c:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 800657e:	e798      	b.n	80064b2 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006580:	2b0f      	cmp	r3, #15
 8006582:	f040 80dc 	bne.w	800673e <dir_read.constprop.0+0x2aa>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006586:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 8006588:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800658a:	f140 80a4 	bpl.w	80066d6 <dir_read.constprop.0+0x242>
						c &= (BYTE)~LLEF; ord = c;
 800658e:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8006592:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 8006596:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006598:	7b4b      	ldrb	r3, [r1, #13]
 800659a:	454b      	cmp	r3, r9
 800659c:	d1b3      	bne.n	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 800659e:	7eca      	ldrb	r2, [r1, #27]
 80065a0:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80065a2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80065a6:	d1ae      	bne.n	8006506 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80065a8:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 80065aa:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 80065b0:	7848      	ldrb	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80065b2:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 80065b4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80065b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80065bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80065c0:	2bfe      	cmp	r3, #254	; 0xfe
 80065c2:	d8a0      	bhi.n	8006506 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065c4:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	f82e 0013 	strh.w	r0, [lr, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 80065ce:	f891 a004 	ldrb.w	sl, [r1, #4]
 80065d2:	f891 c003 	ldrb.w	ip, [r1, #3]
 80065d6:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		if (wc) {
 80065da:	2800      	cmp	r0, #0
 80065dc:	f040 80b7 	bne.w	800674e <dir_read.constprop.0+0x2ba>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80065e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065e4:	459c      	cmp	ip, r3
 80065e6:	d18e      	bne.n	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80065e8:	798b      	ldrb	r3, [r1, #6]
 80065ea:	f891 b005 	ldrb.w	fp, [r1, #5]
 80065ee:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80065f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065f6:	459b      	cmp	fp, r3
 80065f8:	d185      	bne.n	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80065fa:	7a0b      	ldrb	r3, [r1, #8]
 80065fc:	f891 a007 	ldrb.w	sl, [r1, #7]
 8006600:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006608:	459a      	cmp	sl, r3
 800660a:	f47f af7c 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 800660e:	7a8b      	ldrb	r3, [r1, #10]
 8006610:	f891 c009 	ldrb.w	ip, [r1, #9]
 8006614:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800661c:	459c      	cmp	ip, r3
 800661e:	f47f af72 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8006622:	7bcb      	ldrb	r3, [r1, #15]
 8006624:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8006628:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800662c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006630:	459b      	cmp	fp, r3
 8006632:	f47f af68 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8006636:	7c4b      	ldrb	r3, [r1, #17]
 8006638:	f891 a010 	ldrb.w	sl, [r1, #16]
 800663c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006644:	459a      	cmp	sl, r3
 8006646:	f47f af5e 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 800664a:	7ccb      	ldrb	r3, [r1, #19]
 800664c:	f891 c012 	ldrb.w	ip, [r1, #18]
 8006650:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006658:	459c      	cmp	ip, r3
 800665a:	f47f af54 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 800665e:	7d4b      	ldrb	r3, [r1, #21]
 8006660:	f891 a014 	ldrb.w	sl, [r1, #20]
 8006664:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800666c:	459a      	cmp	sl, r3
 800666e:	f47f af4a 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8006672:	7dcb      	ldrb	r3, [r1, #23]
 8006674:	f891 c016 	ldrb.w	ip, [r1, #22]
 8006678:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800667c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006680:	459c      	cmp	ip, r3
 8006682:	f47f af40 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8006686:	7e4b      	ldrb	r3, [r1, #25]
 8006688:	f891 a018 	ldrb.w	sl, [r1, #24]
 800668c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006694:	459a      	cmp	sl, r3
 8006696:	f47f af36 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 800669a:	7f4b      	ldrb	r3, [r1, #29]
 800669c:	f891 c01c 	ldrb.w	ip, [r1, #28]
 80066a0:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80066a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066a8:	459c      	cmp	ip, r3
 80066aa:	f47f af2c 	bne.w	8006506 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80066ae:	7fcb      	ldrb	r3, [r1, #31]
 80066b0:	f891 a01e 	ldrb.w	sl, [r1, #30]
 80066b4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80066b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066bc:	459a      	cmp	sl, r3
 80066be:	f000 8101 	beq.w	80068c4 <dir_read.constprop.0+0x430>
 80066c2:	e720      	b.n	8006506 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066c4:	2301      	movs	r3, #1
 80066c6:	462a      	mov	r2, r5
 80066c8:	4641      	mov	r1, r8
 80066ca:	7870      	ldrb	r0, [r6, #1]
 80066cc:	f7ff fcb8 	bl	8006040 <disk_write>
 80066d0:	b128      	cbz	r0, 80066de <dir_read.constprop.0+0x24a>
	FRESULT res = FR_NO_FILE;
 80066d2:	2001      	movs	r0, #1
 80066d4:	e6ff      	b.n	80064d6 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80066d6:	42ba      	cmp	r2, r7
 80066d8:	f47f af15 	bne.w	8006506 <dir_read.constprop.0+0x72>
 80066dc:	e75c      	b.n	8006598 <dir_read.constprop.0+0x104>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066de:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80066e0:	6a33      	ldr	r3, [r6, #32]
 80066e2:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80066e4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066e6:	429a      	cmp	r2, r3
 80066e8:	f4bf aeea 	bcs.w	80064c0 <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066ec:	f896 b002 	ldrb.w	fp, [r6, #2]
 80066f0:	f1bb 0f01 	cmp.w	fp, #1
 80066f4:	d801      	bhi.n	80066fa <dir_read.constprop.0+0x266>
 80066f6:	e6e3      	b.n	80064c0 <dir_read.constprop.0+0x2c>
 80066f8:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
 80066fa:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066fc:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8006700:	2301      	movs	r3, #1
 8006702:	4641      	mov	r1, r8
 8006704:	462a      	mov	r2, r5
 8006706:	7870      	ldrb	r0, [r6, #1]
 8006708:	f7ff fc9a 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800670c:	f1bb 0f01 	cmp.w	fp, #1
 8006710:	d1f2      	bne.n	80066f8 <dir_read.constprop.0+0x264>
 8006712:	e6d5      	b.n	80064c0 <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006714:	3a02      	subs	r2, #2
	clst -= 2;
 8006716:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8006718:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800671a:	4291      	cmp	r1, r2
 800671c:	d209      	bcs.n	8006732 <dir_read.constprop.0+0x29e>
	return clst * fs->csize + fs->database;
 800671e:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 8006722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006724:	fb01 2a0a 	mla	sl, r1, sl, r2
				dp->sect = clust2sect(fs, clst);
 8006728:	f8c4 a01c 	str.w	sl, [r4, #28]
 800672c:	e703      	b.n	8006536 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800672e:	2002      	movs	r0, #2
 8006730:	e6d1      	b.n	80064d6 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006732:	3338      	adds	r3, #56	; 0x38
				dp->sect = clust2sect(fs, clst);
 8006734:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8006738:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800673a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800673c:	e701      	b.n	8006542 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800673e:	2f00      	cmp	r7, #0
 8006740:	f000 80cb 	beq.w	80068da <dir_read.constprop.0+0x446>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	2000      	movs	r0, #0
 800674a:	6323      	str	r3, [r4, #48]	; 0x30
 800674c:	e6c5      	b.n	80064da <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800674e:	2aff      	cmp	r2, #255	; 0xff
 8006750:	f000 810d 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006754:	f82e c012 	strh.w	ip, [lr, r2, lsl #1]
 8006758:	0050      	lsls	r0, r2, #1
	rv = rv << 8 | ptr[0];
 800675a:	f891 a006 	ldrb.w	sl, [r1, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800675e:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 8006760:	f891 b005 	ldrb.w	fp, [r1, #5]
 8006764:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8006768:	f1bc 0f00 	cmp.w	ip, #0
 800676c:	f43f af41 	beq.w	80065f2 <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006770:	2aff      	cmp	r2, #255	; 0xff
 8006772:	f000 80fc 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006776:	4470      	add	r0, lr
 8006778:	1cda      	adds	r2, r3, #3
 800677a:	f8a0 b002 	strh.w	fp, [r0, #2]
	rv = rv << 8 | ptr[0];
 800677e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8006782:	f891 a007 	ldrb.w	sl, [r1, #7]
 8006786:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 800678a:	f1bb 0f00 	cmp.w	fp, #0
 800678e:	f43f af39 	beq.w	8006604 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006792:	2aff      	cmp	r2, #255	; 0xff
 8006794:	f000 80eb 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006798:	f8a0 a004 	strh.w	sl, [r0, #4]
 800679c:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 800679e:	f891 b00a 	ldrb.w	fp, [r1, #10]
 80067a2:	f891 c009 	ldrb.w	ip, [r1, #9]
 80067a6:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 80067aa:	f1ba 0f00 	cmp.w	sl, #0
 80067ae:	f43f af33 	beq.w	8006618 <dir_read.constprop.0+0x184>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80067b2:	2aff      	cmp	r2, #255	; 0xff
 80067b4:	f000 80db 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80067b8:	f8a0 c006 	strh.w	ip, [r0, #6]
 80067bc:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 80067be:	f891 a00f 	ldrb.w	sl, [r1, #15]
 80067c2:	f891 b00e 	ldrb.w	fp, [r1, #14]
 80067c6:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 80067ca:	f1bc 0f00 	cmp.w	ip, #0
 80067ce:	f43f af2d 	beq.w	800662c <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80067d2:	2aff      	cmp	r2, #255	; 0xff
 80067d4:	f000 80cb 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80067d8:	f8a0 b008 	strh.w	fp, [r0, #8]
 80067dc:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 80067de:	f891 c011 	ldrb.w	ip, [r1, #17]
 80067e2:	f891 a010 	ldrb.w	sl, [r1, #16]
 80067e6:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 80067ea:	f1bb 0f00 	cmp.w	fp, #0
 80067ee:	f43f af27 	beq.w	8006640 <dir_read.constprop.0+0x1ac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80067f2:	2aff      	cmp	r2, #255	; 0xff
 80067f4:	f000 80bb 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80067f8:	f8a0 a00a 	strh.w	sl, [r0, #10]
 80067fc:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 80067fe:	f891 b013 	ldrb.w	fp, [r1, #19]
 8006802:	f891 c012 	ldrb.w	ip, [r1, #18]
 8006806:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 800680a:	f1ba 0f00 	cmp.w	sl, #0
 800680e:	f43f af21 	beq.w	8006654 <dir_read.constprop.0+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006812:	2aff      	cmp	r2, #255	; 0xff
 8006814:	f000 80ab 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006818:	f8a0 c00c 	strh.w	ip, [r0, #12]
 800681c:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 8006820:	f891 b015 	ldrb.w	fp, [r1, #21]
 8006824:	f891 a014 	ldrb.w	sl, [r1, #20]
 8006828:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 800682c:	f1bc 0f00 	cmp.w	ip, #0
 8006830:	f43f af1a 	beq.w	8006668 <dir_read.constprop.0+0x1d4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006834:	2aff      	cmp	r2, #255	; 0xff
 8006836:	f000 809a 	beq.w	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800683a:	f8a0 a00e 	strh.w	sl, [r0, #14]
 800683e:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8006842:	f891 b017 	ldrb.w	fp, [r1, #23]
 8006846:	f891 c016 	ldrb.w	ip, [r1, #22]
 800684a:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 800684e:	f1ba 0f00 	cmp.w	sl, #0
 8006852:	f43f af13 	beq.w	800667c <dir_read.constprop.0+0x1e8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006856:	2aff      	cmp	r2, #255	; 0xff
 8006858:	f43f ae55 	beq.w	8006506 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800685c:	f8a0 c010 	strh.w	ip, [r0, #16]
 8006860:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 8006864:	f891 b019 	ldrb.w	fp, [r1, #25]
 8006868:	f891 a018 	ldrb.w	sl, [r1, #24]
 800686c:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8006870:	f1bc 0f00 	cmp.w	ip, #0
 8006874:	f43f af0c 	beq.w	8006690 <dir_read.constprop.0+0x1fc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006878:	2aff      	cmp	r2, #255	; 0xff
 800687a:	d078      	beq.n	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800687c:	f8a0 a012 	strh.w	sl, [r0, #18]
 8006880:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8006884:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8006888:	f891 c01c 	ldrb.w	ip, [r1, #28]
 800688c:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8006890:	f1ba 0f00 	cmp.w	sl, #0
 8006894:	f43f af06 	beq.w	80066a4 <dir_read.constprop.0+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006898:	2aff      	cmp	r2, #255	; 0xff
 800689a:	d068      	beq.n	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800689c:	f8a0 c014 	strh.w	ip, [r0, #20]
 80068a0:	f103 020c 	add.w	r2, r3, #12
	rv = rv << 8 | ptr[0];
 80068a4:	f891 b01f 	ldrb.w	fp, [r1, #31]
 80068a8:	f891 a01e 	ldrb.w	sl, [r1, #30]
 80068ac:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 80068b0:	f1bc 0f00 	cmp.w	ip, #0
 80068b4:	f43f af00 	beq.w	80066b8 <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80068b8:	2aff      	cmp	r2, #255	; 0xff
 80068ba:	d058      	beq.n	800696e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80068bc:	f103 020d 	add.w	r2, r3, #13
 80068c0:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80068c4:	780b      	ldrb	r3, [r1, #0]
 80068c6:	0659      	lsls	r1, r3, #25
 80068c8:	d504      	bpl.n	80068d4 <dir_read.constprop.0+0x440>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80068ca:	2aff      	cmp	r2, #255	; 0xff
 80068cc:	d04f      	beq.n	800696e <dir_read.constprop.0+0x4da>
		lfnbuf[i] = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f82e 3012 	strh.w	r3, [lr, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80068d4:	3f01      	subs	r7, #1
 80068d6:	b2ff      	uxtb	r7, r7
 80068d8:	e616      	b.n	8006508 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80068da:	780a      	ldrb	r2, [r1, #0]
 80068dc:	784e      	ldrb	r6, [r1, #1]
 80068de:	01d3      	lsls	r3, r2, #7
 80068e0:	788d      	ldrb	r5, [r1, #2]
 80068e2:	78c8      	ldrb	r0, [r1, #3]
 80068e4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80068e8:	199a      	adds	r2, r3, r6
 80068ea:	790e      	ldrb	r6, [r1, #4]
 80068ec:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80068f0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80068f4:	fa55 f283 	uxtab	r2, r5, r3
 80068f8:	794d      	ldrb	r5, [r1, #5]
 80068fa:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80068fe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006902:	fa50 f283 	uxtab	r2, r0, r3
 8006906:	7988      	ldrb	r0, [r1, #6]
 8006908:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800690c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006910:	fa56 f283 	uxtab	r2, r6, r3
 8006914:	79ce      	ldrb	r6, [r1, #7]
 8006916:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800691a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800691e:	fa55 f283 	uxtab	r2, r5, r3
 8006922:	7a0d      	ldrb	r5, [r1, #8]
 8006924:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006928:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800692c:	fa50 f283 	uxtab	r2, r0, r3
 8006930:	7a48      	ldrb	r0, [r1, #9]
 8006932:	7a89      	ldrb	r1, [r1, #10]
 8006934:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006938:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800693c:	fa56 f283 	uxtab	r2, r6, r3
 8006940:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006944:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006948:	fa55 f283 	uxtab	r2, r5, r3
 800694c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006950:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006954:	fa50 f283 	uxtab	r2, r0, r3
 8006958:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800695c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006960:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006964:	b2db      	uxtb	r3, r3
 8006966:	4599      	cmp	r9, r3
 8006968:	f47f aeec 	bne.w	8006744 <dir_read.constprop.0+0x2b0>
 800696c:	e5e9      	b.n	8006542 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800696e:	4617      	mov	r7, r2
 8006970:	e5ca      	b.n	8006508 <dir_read.constprop.0+0x74>
 8006972:	bf00      	nop

08006974 <sync_fs>:
{
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006976:	78c3      	ldrb	r3, [r0, #3]
{
 8006978:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800697a:	b95b      	cbnz	r3, 8006994 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800697c:	7823      	ldrb	r3, [r4, #0]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d029      	beq.n	80069d6 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006982:	2200      	movs	r2, #0
 8006984:	7860      	ldrb	r0, [r4, #1]
 8006986:	4611      	mov	r1, r2
 8006988:	f7ff fb68 	bl	800605c <disk_ioctl>
			res = FR_DISK_ERR;
 800698c:	3800      	subs	r0, #0
 800698e:	bf18      	it	ne
 8006990:	2001      	movne	r0, #1
}
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006994:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006996:	f100 0738 	add.w	r7, r0, #56	; 0x38
 800699a:	2301      	movs	r3, #1
 800699c:	7840      	ldrb	r0, [r0, #1]
 800699e:	462a      	mov	r2, r5
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7ff fb4d 	bl	8006040 <disk_write>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d150      	bne.n	8006a4c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80069ac:	6a23      	ldr	r3, [r4, #32]
 80069ae:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80069b0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d2e2      	bcs.n	800697c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069b6:	78a6      	ldrb	r6, [r4, #2]
 80069b8:	2e01      	cmp	r6, #1
 80069ba:	d801      	bhi.n	80069c0 <sync_fs+0x4c>
 80069bc:	e7de      	b.n	800697c <sync_fs+0x8>
 80069be:	6a23      	ldr	r3, [r4, #32]
					wsect += fs->fsize;
 80069c0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069c2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80069c4:	2301      	movs	r3, #1
 80069c6:	4639      	mov	r1, r7
 80069c8:	462a      	mov	r2, r5
 80069ca:	7860      	ldrb	r0, [r4, #1]
 80069cc:	f7ff fb38 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069d0:	2e01      	cmp	r6, #1
 80069d2:	d1f4      	bne.n	80069be <sync_fs+0x4a>
 80069d4:	e7d2      	b.n	800697c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069d6:	7926      	ldrb	r6, [r4, #4]
 80069d8:	2e01      	cmp	r6, #1
 80069da:	d1d2      	bne.n	8006982 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 80069dc:	f104 0338 	add.w	r3, r4, #56	; 0x38
	BYTE *d = (BYTE*)dst;
 80069e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e4:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80069e6:	2755      	movs	r7, #85	; 0x55
 80069e8:	4618      	mov	r0, r3
 80069ea:	f002 fdb1 	bl	8009550 <memset>
 80069ee:	4603      	mov	r3, r0
			fs->winsect = fs->volbase + 1;
 80069f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80069f2:	4619      	mov	r1, r3
 80069f4:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 80069f6:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80069f8:	f884 7236 	strb.w	r7, [r4, #566]	; 0x236
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80069fc:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
			fs->winsect = fs->volbase + 1;
 8006a00:	6362      	str	r2, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8006a02:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8006a06:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8006a0a:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006a0c:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
	*ptr++ = (BYTE)val; val >>= 8;
 8006a10:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006a12:	f884 c221 	strb.w	ip, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 8006a16:	f884 6222 	strb.w	r6, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val; val >>= 8;
 8006a1a:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val;
 8006a1c:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8006a20:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006a22:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006a24:	f884 6225 	strb.w	r6, [r4, #549]	; 0x225
	*ptr++ = (BYTE)val; val >>= 8;
 8006a28:	f884 5226 	strb.w	r5, [r4, #550]	; 0x226
	*ptr++ = (BYTE)val;
 8006a2c:	26aa      	movs	r6, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8006a2e:	f884 0227 	strb.w	r0, [r4, #551]	; 0x227
	*ptr++ = (BYTE)val; val >>= 8;
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <sync_fs+0xdc>)
 8006a34:	4807      	ldr	r0, [pc, #28]	; (8006a54 <sync_fs+0xe0>)
	*ptr++ = (BYTE)val;
 8006a36:	f884 6237 	strb.w	r6, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8006a3a:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 8006a3e:	63a5      	str	r5, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a40:	7860      	ldrb	r0, [r4, #1]
 8006a42:	f7ff fafd 	bl	8006040 <disk_write>
			fs->fsi_flag = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	7123      	strb	r3, [r4, #4]
 8006a4a:	e79a      	b.n	8006982 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8006a4c:	2001      	movs	r0, #1
}
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	41615252 	.word	0x41615252
 8006a54:	61417272 	.word	0x61417272

08006a58 <create_chain>:
{
 8006a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 8006a5e:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 8006a60:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8006a64:	2900      	cmp	r1, #0
 8006a66:	f040 80be 	bne.w	8006be6 <create_chain+0x18e>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a6a:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a6e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006a72:	b9ce      	cbnz	r6, 8006aa8 <create_chain+0x50>
 8006a74:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8006a76:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8006a78:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d318      	bcc.n	8006ab0 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 8006a7e:	2e01      	cmp	r6, #1
 8006a80:	f240 80ad 	bls.w	8006bde <create_chain+0x186>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a84:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8006a88:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a8a:	69eb      	ldr	r3, [r5, #28]
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d907      	bls.n	8006aa0 <create_chain+0x48>
		switch (fs->fs_type) {
 8006a90:	782b      	ldrb	r3, [r5, #0]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	f000 808e 	beq.w	8006bb4 <create_chain+0x15c>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d044      	beq.n	8006b26 <create_chain+0xce>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d00c      	beq.n	8006aba <create_chain+0x62>
 8006aa0:	2401      	movs	r4, #1
}
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006aa8:	42b3      	cmp	r3, r6
 8006aaa:	bf98      	it	ls
 8006aac:	2601      	movls	r6, #1
 8006aae:	e7e2      	b.n	8006a76 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ab0:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ab2:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ab6:	d9f3      	bls.n	8006aa0 <create_chain+0x48>
 8006ab8:	e7e7      	b.n	8006a8a <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 8006aba:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006abe:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ac0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ac2:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d005      	beq.n	8006ad6 <create_chain+0x7e>
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7ff fb5a 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ad0:	bb20      	cbnz	r0, 8006b1c <create_chain+0xc4>
 8006ad2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006ad4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8006ad6:	f3cb 0008 	ubfx	r0, fp, #0, #9
 8006ada:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ade:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8006ae2:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ae4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006ae6:	f890 a038 	ldrb.w	sl, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006aea:	d003      	beq.n	8006af4 <create_chain+0x9c>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff fb49 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006af2:	b998      	cbnz	r0, 8006b1c <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006af4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006af8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006afa:	445d      	add	r5, fp
 8006afc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8006b00:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b04:	d57f      	bpl.n	8006c06 <create_chain+0x1ae>
 8006b06:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8006b08:	b343      	cbz	r3, 8006b5c <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d0c8      	beq.n	8006aa0 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b0e:	42a6      	cmp	r6, r4
 8006b10:	d065      	beq.n	8006bde <create_chain+0x186>
 8006b12:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b16:	e7af      	b.n	8006a78 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b18:	2801      	cmp	r0, #1
 8006b1a:	d1c1      	bne.n	8006aa0 <create_chain+0x48>
 8006b1c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006b20:	4620      	mov	r0, r4
 8006b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b26:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b2a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	d004      	beq.n	8006b3c <create_chain+0xe4>
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7ff fb26 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1ef      	bne.n	8006b1c <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b3c:	00a3      	lsls	r3, r4, #2
 8006b3e:	3538      	adds	r5, #56	; 0x38
 8006b40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006b44:	18e9      	adds	r1, r5, r3
	rv = rv << 8 | ptr[0];
 8006b46:	5ceb      	ldrb	r3, [r5, r3]
	rv = rv << 8 | ptr[2];
 8006b48:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 8006b4a:	784a      	ldrb	r2, [r1, #1]
 8006b4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8006b50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1d6      	bne.n	8006b0a <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d99d      	bls.n	8006aa0 <create_chain+0x48>
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7ff fb44 	bl	80061f8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8006b70:	b958      	cbnz	r0, 8006b8a <create_chain+0x132>
 8006b72:	b157      	cbz	r7, 8006b8a <create_chain+0x132>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b74:	2f01      	cmp	r7, #1
 8006b76:	d993      	bls.n	8006aa0 <create_chain+0x48>
 8006b78:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b7c:	429f      	cmp	r7, r3
 8006b7e:	d28f      	bcs.n	8006aa0 <create_chain+0x48>
 8006b80:	4639      	mov	r1, r7
 8006b82:	4622      	mov	r2, r4
 8006b84:	4640      	mov	r0, r8
 8006b86:	f7ff fb37 	bl	80061f8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1c4      	bne.n	8006b18 <create_chain+0xc0>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b8e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b92:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006b96:	3b02      	subs	r3, #2
		fs->last_clst = ncl;
 8006b98:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d802      	bhi.n	8006ba6 <create_chain+0x14e>
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8006ba6:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	f888 3004 	strb.w	r3, [r8, #4]
 8006bb2:	e776      	b.n	8006aa2 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bb4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bb6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bb8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	d004      	beq.n	8006bca <create_chain+0x172>
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f7ff fadf 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1a8      	bne.n	8006b1c <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bca:	0063      	lsls	r3, r4, #1
 8006bcc:	3538      	adds	r5, #56	; 0x38
 8006bce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006bd2:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8006bd4:	5ceb      	ldrb	r3, [r5, r3]
 8006bd6:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 8006bdc:	e794      	b.n	8006b08 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 8006bde:	2400      	movs	r4, #0
}
 8006be0:	4620      	mov	r0, r4
 8006be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006be6:	4640      	mov	r0, r8
 8006be8:	f7ff fba4 	bl	8006334 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bec:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006bee:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bf0:	f67f af56 	bls.w	8006aa0 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bf4:	1c41      	adds	r1, r0, #1
 8006bf6:	d091      	beq.n	8006b1c <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bf8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	f63f af50 	bhi.w	8006aa2 <create_chain+0x4a>
 8006c02:	463e      	mov	r6, r7
 8006c04:	e737      	b.n	8006a76 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0a:	e77d      	b.n	8006b08 <create_chain+0xb0>

08006c0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c0c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c0e:	f04f 36ff 	mov.w	r6, #4294967295
 8006c12:	2300      	movs	r3, #0
{
 8006c14:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c16:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c18:	70c3      	strb	r3, [r0, #3]
 8006c1a:	6346      	str	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c1c:	d00c      	beq.n	8006c38 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006c1e:	460d      	mov	r5, r1
 8006c20:	460a      	mov	r2, r1
 8006c22:	2301      	movs	r3, #1
 8006c24:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8006c28:	7840      	ldrb	r0, [r0, #1]
 8006c2a:	f7ff f9fb 	bl	8006024 <disk_read>
 8006c2e:	b110      	cbz	r0, 8006c36 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c30:	2004      	movs	r0, #4
			fs->winsect = sector;
 8006c32:	6366      	str	r6, [r4, #52]	; 0x34
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8006c36:	6365      	str	r5, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 8006c38:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c3c:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006c40:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8006c44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d12a      	bne.n	8006ca2 <check_fs+0x96>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006c50:	2be9      	cmp	r3, #233	; 0xe9
 8006c52:	d007      	beq.n	8006c64 <check_fs+0x58>
 8006c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c56:	4a15      	ldr	r2, [pc, #84]	; (8006cac <check_fs+0xa0>)
 8006c58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d001      	beq.n	8006c64 <check_fs+0x58>
	return 2;
 8006c60:	2002      	movs	r0, #2
}
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 8006c64:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 8006c68:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 8006c6c:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 8006c70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c74:	490e      	ldr	r1, [pc, #56]	; (8006cb0 <check_fs+0xa4>)
	rv = rv << 8 | ptr[0];
 8006c76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	428b      	cmp	r3, r1
 8006c80:	d011      	beq.n	8006ca6 <check_fs+0x9a>
	rv = rv << 8 | ptr[2];
 8006c82:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 8006c86:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 8006c8a:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 8006c8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c92:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <check_fs+0xa8>)
	rv = rv << 8 | ptr[0];
 8006c94:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c98:	4290      	cmp	r0, r2
 8006c9a:	bf14      	ite	ne
 8006c9c:	2002      	movne	r0, #2
 8006c9e:	2000      	moveq	r0, #0
}
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ca2:	2003      	movs	r0, #3
}
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ca6:	2000      	movs	r0, #0
}
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	bf00      	nop
 8006cac:	009000eb 	.word	0x009000eb
 8006cb0:	00544146 	.word	0x00544146
 8006cb4:	33544146 	.word	0x33544146

08006cb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 8006cbc:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8006cc2:	b18b      	cbz	r3, 8006ce8 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cc4:	781e      	ldrb	r6, [r3, #0]
 8006cc6:	2e1f      	cmp	r6, #31
 8006cc8:	d912      	bls.n	8006cf0 <find_volume+0x38>
 8006cca:	2e3a      	cmp	r6, #58	; 0x3a
 8006ccc:	d010      	beq.n	8006cf0 <find_volume+0x38>
 8006cce:	461d      	mov	r5, r3
 8006cd0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8006cd4:	2c1f      	cmp	r4, #31
 8006cd6:	d90d      	bls.n	8006cf4 <find_volume+0x3c>
 8006cd8:	2c3a      	cmp	r4, #58	; 0x3a
 8006cda:	d1f9      	bne.n	8006cd0 <find_volume+0x18>
			i = *tp++ - '0';
 8006cdc:	3301      	adds	r3, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	d102      	bne.n	8006ce8 <find_volume+0x30>
 8006ce2:	2e30      	cmp	r6, #48	; 0x30
 8006ce4:	f000 8132 	beq.w	8006f4c <find_volume+0x294>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ce8:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8006cea:	4628      	mov	r0, r5
 8006cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cf0:	4634      	mov	r4, r6
 8006cf2:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cf4:	2c3a      	cmp	r4, #58	; 0x3a
 8006cf6:	d0f1      	beq.n	8006cdc <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cf8:	4bbd      	ldr	r3, [pc, #756]	; (8006ff0 <find_volume+0x338>)
 8006cfa:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	f000 8121 	beq.w	8006f44 <find_volume+0x28c>
	*rfs = fs;							/* Return pointer to the file system object */
 8006d02:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d04:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d08:	7823      	ldrb	r3, [r4, #0]
 8006d0a:	b17b      	cbz	r3, 8006d2c <find_volume+0x74>
		stat = disk_status(fs->drv);
 8006d0c:	7860      	ldrb	r0, [r4, #1]
 8006d0e:	f7ff f96b 	bl	8005fe8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d12:	07c1      	lsls	r1, r0, #31
 8006d14:	d40a      	bmi.n	8006d2c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	f000 8103 	beq.w	8006f22 <find_volume+0x26a>
 8006d1c:	f010 0504 	ands.w	r5, r0, #4
 8006d20:	f000 80ff 	beq.w	8006f22 <find_volume+0x26a>
				return FR_WRITE_PROTECTED;
 8006d24:	250a      	movs	r5, #10
}
 8006d26:	4628      	mov	r0, r5
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d30:	f7ff f964 	bl	8005ffc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d34:	07c2      	lsls	r2, r0, #31
 8006d36:	f100 80f7 	bmi.w	8006f28 <find_volume+0x270>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d3a:	b10d      	cbz	r5, 8006d40 <find_volume+0x88>
 8006d3c:	0743      	lsls	r3, r0, #29
 8006d3e:	d4f1      	bmi.n	8006d24 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d40:	2100      	movs	r1, #0
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff ff62 	bl	8006c0c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d48:	2802      	cmp	r0, #2
 8006d4a:	f000 80a7 	beq.w	8006e9c <find_volume+0x1e4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d4e:	2804      	cmp	r0, #4
 8006d50:	f000 80f6 	beq.w	8006f40 <find_volume+0x288>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006d54:	2801      	cmp	r0, #1
 8006d56:	f200 80e3 	bhi.w	8006f20 <find_volume+0x268>
	bsect = 0;
 8006d5a:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 8006d5c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8006d60:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	f040 80d8 	bne.w	8006f20 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8006d70:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 8006d74:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d78:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8006d7c:	d109      	bne.n	8006d92 <find_volume+0xda>
	rv = rv << 8 | ptr[2];
 8006d7e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 8006d82:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 8006d86:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 8006d8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006d8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d92:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8006d96:	6223      	str	r3, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006d98:	1e42      	subs	r2, r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d9a:	70a0      	strb	r0, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	f200 80bf 	bhi.w	8006f20 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006da2:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 8006da6:	b2ba      	uxth	r2, r7
 8006da8:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	f000 80b8 	beq.w	8006f20 <find_volume+0x268>
 8006db0:	1e7a      	subs	r2, r7, #1
 8006db2:	423a      	tst	r2, r7
 8006db4:	f040 80b4 	bne.w	8006f20 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8006db8:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8006dbc:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 8006dc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006dc4:	f012 0f0f 	tst.w	r2, #15
	rv = rv << 8 | ptr[0];
 8006dc8:	4694      	mov	ip, r2
 8006dca:	b216      	sxth	r6, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006dcc:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006dce:	f040 80a7 	bne.w	8006f20 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8006dd2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8006dd6:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006dda:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8006dde:	d109      	bne.n	8006df4 <find_volume+0x13c>
	rv = rv << 8 | ptr[2];
 8006de0:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 8006de4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 8006de8:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8006dec:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8006df0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006df4:	f894 e047 	ldrb.w	lr, [r4, #71]	; 0x47
 8006df8:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006dfc:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 8006e00:	f000 808e 	beq.w	8006f20 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e04:	fb03 f000 	mul.w	r0, r3, r0
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e08:	eb01 1e1c 	add.w	lr, r1, ip, lsr #4
 8006e0c:	4486      	add	lr, r0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e0e:	4572      	cmp	r2, lr
 8006e10:	f0c0 8086 	bcc.w	8006f20 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e14:	eba2 020e 	sub.w	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e18:	42ba      	cmp	r2, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e1a:	fbb2 f8f7 	udiv	r8, r2, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e1e:	d37f      	bcc.n	8006f20 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006e20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006e24:	4590      	cmp	r8, r2
 8006e26:	f200 80a4 	bhi.w	8006f72 <find_volume+0x2ba>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e2a:	f640 72f5 	movw	r2, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e2e:	4429      	add	r1, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8006e30:	eb0e 0605 	add.w	r6, lr, r5
		fs->volbase = bsect;							/* Volume start sector */
 8006e34:	6265      	str	r5, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e36:	4590      	cmp	r8, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e38:	f108 0202 	add.w	r2, r8, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e3c:	62a1      	str	r1, [r4, #40]	; 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e3e:	61e2      	str	r2, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 8006e40:	6326      	str	r6, [r4, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e42:	f200 80cb 	bhi.w	8006fdc <find_volume+0x324>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006e46:	f1bc 0f00 	cmp.w	ip, #0
 8006e4a:	d069      	beq.n	8006f20 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e4c:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8006e50:	f002 0201 	and.w	r2, r2, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006e54:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e56:	2001      	movs	r0, #1
 8006e58:	eb02 0255 	add.w	r2, r2, r5, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006e5c:	62e1      	str	r1, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e5e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8006e62:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 8006e66:	d35b      	bcc.n	8006f20 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e68:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8006e6c:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e6e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8006e72:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e74:	495f      	ldr	r1, [pc, #380]	; (8006ff4 <find_volume+0x33c>)
	fs->cdir = 0;			/* Initialize current directory */
 8006e76:	2500      	movs	r5, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e78:	4a5f      	ldr	r2, [pc, #380]	; (8006ff8 <find_volume+0x340>)
	fs->id = ++Fsid;		/* File system mount ID */
 8006e7a:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8006e7c:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e7e:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e80:	6810      	ldr	r0, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8006e82:	61a5      	str	r5, [r4, #24]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e84:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e86:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 8006e88:	800b      	strh	r3, [r1, #0]
 8006e8a:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e8c:	6913      	ldr	r3, [r2, #16]
 8006e8e:	bf08      	it	eq
 8006e90:	6015      	streq	r5, [r2, #0]
 8006e92:	2500      	movs	r5, #0
 8006e94:	429c      	cmp	r4, r3
 8006e96:	d144      	bne.n	8006f22 <find_volume+0x26a>
 8006e98:	6115      	str	r5, [r2, #16]
 8006e9a:	e042      	b.n	8006f22 <find_volume+0x26a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e9c:	f894 11fa 	ldrb.w	r1, [r4, #506]	; 0x1fa
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d051      	beq.n	8006f48 <find_volume+0x290>
	rv = rv << 8 | ptr[2];
 8006ea4:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
	rv = rv << 8 | ptr[1];
 8006ea8:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
	rv = rv << 8 | ptr[0];
 8006eac:	f894 81fe 	ldrb.w	r8, [r4, #510]	; 0x1fe
	rv = rv << 8 | ptr[1];
 8006eb0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8006eb4:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eb8:	f894 520a 	ldrb.w	r5, [r4, #522]	; 0x20a
 8006ebc:	b14d      	cbz	r5, 8006ed2 <find_volume+0x21a>
	rv = rv << 8 | ptr[2];
 8006ebe:	f8b4 2210 	ldrh.w	r2, [r4, #528]	; 0x210
	rv = rv << 8 | ptr[1];
 8006ec2:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
	rv = rv << 8 | ptr[0];
 8006ec6:	f894 520e 	ldrb.w	r5, [r4, #526]	; 0x20e
	rv = rv << 8 | ptr[1];
 8006eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006ece:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ed2:	f894 721a 	ldrb.w	r7, [r4, #538]	; 0x21a
 8006ed6:	b14f      	cbz	r7, 8006eec <find_volume+0x234>
	rv = rv << 8 | ptr[2];
 8006ed8:	f8b4 2220 	ldrh.w	r2, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 8006edc:	f894 321f 	ldrb.w	r3, [r4, #543]	; 0x21f
	rv = rv << 8 | ptr[0];
 8006ee0:	f894 721e 	ldrb.w	r7, [r4, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 8006ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006ee8:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eec:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
 8006ef0:	b14e      	cbz	r6, 8006f06 <find_volume+0x24e>
	rv = rv << 8 | ptr[2];
 8006ef2:	f8b4 2230 	ldrh.w	r2, [r4, #560]	; 0x230
	rv = rv << 8 | ptr[1];
 8006ef6:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
	rv = rv << 8 | ptr[0];
 8006efa:	f894 622e 	ldrb.w	r6, [r4, #558]	; 0x22e
	rv = rv << 8 | ptr[1];
 8006efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006f02:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	d122      	bne.n	8006f52 <find_volume+0x29a>
 8006f0c:	b135      	cbz	r5, 8006f1c <find_volume+0x264>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7ff fe7b 	bl	8006c0c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f16:	2801      	cmp	r0, #1
 8006f18:	f67f af20 	bls.w	8006d5c <find_volume+0xa4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f1c:	bb0f      	cbnz	r7, 8006f62 <find_volume+0x2aa>
 8006f1e:	b93e      	cbnz	r6, 8006f30 <find_volume+0x278>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f20:	250d      	movs	r5, #13
}
 8006f22:	4628      	mov	r0, r5
 8006f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f28:	2503      	movs	r5, #3
}
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f30:	4631      	mov	r1, r6
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff fe6a 	bl	8006c0c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f38:	2801      	cmp	r0, #1
 8006f3a:	d957      	bls.n	8006fec <find_volume+0x334>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f3c:	2804      	cmp	r0, #4
 8006f3e:	d1ef      	bne.n	8006f20 <find_volume+0x268>
 8006f40:	2501      	movs	r5, #1
 8006f42:	e7ee      	b.n	8006f22 <find_volume+0x26a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f44:	250c      	movs	r5, #12
 8006f46:	e7ec      	b.n	8006f22 <find_volume+0x26a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f48:	4688      	mov	r8, r1
 8006f4a:	e7b5      	b.n	8006eb8 <find_volume+0x200>
					*path = ++tt;
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f50:	e6d2      	b.n	8006cf8 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f52:	4641      	mov	r1, r8
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff fe59 	bl	8006c0c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f5a:	2801      	cmp	r0, #1
 8006f5c:	d8d6      	bhi.n	8006f0c <find_volume+0x254>
 8006f5e:	4645      	mov	r5, r8
 8006f60:	e6fc      	b.n	8006d5c <find_volume+0xa4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f62:	4639      	mov	r1, r7
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7ff fe51 	bl	8006c0c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f6a:	2801      	cmp	r0, #1
 8006f6c:	d8d7      	bhi.n	8006f1e <find_volume+0x266>
 8006f6e:	463d      	mov	r5, r7
 8006f70:	e6f4      	b.n	8006d5c <find_volume+0xa4>
	rv = rv << 8 | ptr[0];
 8006f72:	f894 c063 	ldrb.w	ip, [r4, #99]	; 0x63
		fs->database = bsect + sysect;					/* Data start sector */
 8006f76:	eb0e 0205 	add.w	r2, lr, r5
	rv = rv << 8 | ptr[0];
 8006f7a:	f894 7062 	ldrb.w	r7, [r4, #98]	; 0x62
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f7e:	f108 0002 	add.w	r0, r8, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8006f82:	6322      	str	r2, [r4, #48]	; 0x30
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f84:	4429      	add	r1, r5
	rv = rv << 8 | ptr[0];
 8006f86:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f8a:	61e0      	str	r0, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f8c:	62a1      	str	r1, [r4, #40]	; 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f8e:	ea46 0207 	orr.w	r2, r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 8006f92:	6265      	str	r5, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f94:	b212      	sxth	r2, r2
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d1c2      	bne.n	8006f20 <find_volume+0x268>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006f9a:	0082      	lsls	r2, r0, #2
	rv = rv << 8 | ptr[2];
 8006f9c:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	rv = rv << 8 | ptr[1];
 8006fa0:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
	rv = rv << 8 | ptr[0];
 8006fa4:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fa8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 8006fac:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fb0:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
	rv = rv << 8 | ptr[0];
 8006fb4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006fb8:	62e1      	str	r1, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fba:	d3b1      	bcc.n	8006f20 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8006fbc:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 8006fc4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
		fs->fsi_flag = 0x80;
 8006fc8:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006fca:	6162      	str	r2, [r4, #20]
	rv = rv << 8 | ptr[0];
 8006fcc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006fd0:	6122      	str	r2, [r4, #16]
		fs->fsi_flag = 0x80;
 8006fd2:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d011      	beq.n	8006ffc <find_volume+0x344>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006fd8:	2003      	movs	r0, #3
 8006fda:	e74b      	b.n	8006e74 <find_volume+0x1bc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006fdc:	f1bc 0f00 	cmp.w	ip, #0
 8006fe0:	d09e      	beq.n	8006f20 <find_volume+0x268>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006fe2:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006fe4:	0052      	lsls	r2, r2, #1
 8006fe6:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006fe8:	62e1      	str	r1, [r4, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006fea:	e738      	b.n	8006e5e <find_volume+0x1a6>
 8006fec:	4635      	mov	r5, r6
 8006fee:	e6b5      	b.n	8006d5c <find_volume+0xa4>
 8006ff0:	24000594 	.word	0x24000594
 8006ff4:	240005b8 	.word	0x240005b8
 8006ff8:	24000598 	.word	0x24000598
			&& move_window(fs, bsect + 1) == FR_OK)
 8006ffc:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007000:	4299      	cmp	r1, r3
 8007002:	d004      	beq.n	800700e <find_volume+0x356>
 8007004:	4620      	mov	r0, r4
 8007006:	f7ff f8bd 	bl	8006184 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800700a:	2800      	cmp	r0, #0
 800700c:	d1e4      	bne.n	8006fd8 <find_volume+0x320>
	rv = rv << 8 | ptr[0];
 800700e:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007012:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8007016:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 800701a:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 800701c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 8007020:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007022:	4293      	cmp	r3, r2
 8007024:	d1d8      	bne.n	8006fd8 <find_volume+0x320>
	rv = rv << 8 | ptr[2];
 8007026:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
	rv = rv << 8 | ptr[1];
 8007028:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	rv = rv << 8 | ptr[0];
 800702c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 8007030:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007034:	4914      	ldr	r1, [pc, #80]	; (8007088 <find_volume+0x3d0>)
	rv = rv << 8 | ptr[0];
 8007036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800703a:	428b      	cmp	r3, r1
 800703c:	d1cc      	bne.n	8006fd8 <find_volume+0x320>
	rv = rv << 8 | ptr[2];
 800703e:	f8b4 121e 	ldrh.w	r1, [r4, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 8007042:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
	rv = rv << 8 | ptr[0];
 8007046:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 800704a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800704e:	490f      	ldr	r1, [pc, #60]	; (800708c <find_volume+0x3d4>)
	rv = rv << 8 | ptr[0];
 8007050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007054:	428b      	cmp	r3, r1
 8007056:	d1bf      	bne.n	8006fd8 <find_volume+0x320>
	rv = rv << 8 | ptr[1];
 8007058:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800705c:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 800705e:	f894 3225 	ldrb.w	r3, [r4, #549]	; 0x225
	rv = rv << 8 | ptr[2];
 8007062:	f8b4 5222 	ldrh.w	r5, [r4, #546]	; 0x222
 8007066:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 800706a:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 800706e:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 8007072:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8007076:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800707a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800707e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007082:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007086:	e6f5      	b.n	8006e74 <find_volume+0x1bc>
 8007088:	41615252 	.word	0x41615252
 800708c:	61417272 	.word	0x61417272

08007090 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007090:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007094:	d274      	bcs.n	8007180 <dir_sdi+0xf0>
 8007096:	06ca      	lsls	r2, r1, #27
{
 8007098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800709e:	d151      	bne.n	8007144 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070a0:	6885      	ldr	r5, [r0, #8]
 80070a2:	4607      	mov	r7, r0
	FATFS *fs = dp->obj.fs;
 80070a4:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 80070a8:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	d04d      	beq.n	800714a <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070ae:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070b2:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070b6:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80070ba:	f0c0 8099 	bcc.w	80071f0 <dir_sdi+0x160>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80070be:	2d01      	cmp	r5, #1
 80070c0:	d940      	bls.n	8007144 <dir_sdi+0xb4>
 80070c2:	4646      	mov	r6, r8
 80070c4:	e03b      	b.n	800713e <dir_sdi+0xae>
		switch (fs->fs_type) {
 80070c6:	7833      	ldrb	r3, [r6, #0]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d07a      	beq.n	80071c2 <dir_sdi+0x132>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d05f      	beq.n	8007190 <dir_sdi+0x100>
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d137      	bne.n	8007144 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 80070d4:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070da:	6b72      	ldr	r2, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070dc:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070e0:	4291      	cmp	r1, r2
 80070e2:	d006      	beq.n	80070f2 <dir_sdi+0x62>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff f84d 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d17d      	bne.n	80071ea <dir_sdi+0x15a>
 80070ee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80070f0:	6b72      	ldr	r2, [r6, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 80070f2:	f3ca 0008 	ubfx	r0, sl, #0, #9
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070fa:	eb03 215a 	add.w	r1, r3, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80070fe:	4430      	add	r0, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007100:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8007102:	f890 b038 	ldrb.w	fp, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007106:	d004      	beq.n	8007112 <dir_sdi+0x82>
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff f83b 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800710e:	2800      	cmp	r0, #0
 8007110:	d16b      	bne.n	80071ea <dir_sdi+0x15a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007112:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8007116:	4456      	add	r6, sl
 8007118:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 800711c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007120:	07eb      	lsls	r3, r5, #31
 8007122:	d573      	bpl.n	800720c <dir_sdi+0x17c>
 8007124:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007128:	2d01      	cmp	r5, #1
 800712a:	d90b      	bls.n	8007144 <dir_sdi+0xb4>
 800712c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007130:	42ab      	cmp	r3, r5
 8007132:	d907      	bls.n	8007144 <dir_sdi+0xb4>
			ofs -= csz;
 8007134:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007138:	45a1      	cmp	r9, r4
 800713a:	d85b      	bhi.n	80071f4 <dir_sdi+0x164>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800713c:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800713e:	69f3      	ldr	r3, [r6, #28]
 8007140:	42ab      	cmp	r3, r5
 8007142:	d8c0      	bhi.n	80070c6 <dir_sdi+0x36>
		switch (fs->fs_type) {
 8007144:	2002      	movs	r0, #2
}
 8007146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800714a:	f898 3000 	ldrb.w	r3, [r8]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d818      	bhi.n	8007184 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007152:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007156:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800715a:	d9f3      	bls.n	8007144 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 800715c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8007160:	61f9      	str	r1, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8007162:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007164:	2900      	cmp	r1, #0
 8007166:	d0ed      	beq.n	8007144 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007168:	f108 0838 	add.w	r8, r8, #56	; 0x38
 800716c:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007170:	eb01 2154 	add.w	r1, r1, r4, lsr #9
	return FR_OK;
 8007174:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007176:	4443      	add	r3, r8
 8007178:	e9c7 1307 	strd	r1, r3, [r7, #28]
}
 800717c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8007180:	2002      	movs	r0, #2
}
 8007182:	4770      	bx	lr
		clst = fs->dirbase;
 8007184:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0e2      	beq.n	8007152 <dir_sdi+0xc2>
 800718c:	461d      	mov	r5, r3
 800718e:	e78e      	b.n	80070ae <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007190:	6ab1      	ldr	r1, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007192:	6b73      	ldr	r3, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007194:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007198:	4299      	cmp	r1, r3
 800719a:	d003      	beq.n	80071a4 <dir_sdi+0x114>
 800719c:	4630      	mov	r0, r6
 800719e:	f7fe fff1 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071a2:	bb10      	cbnz	r0, 80071ea <dir_sdi+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80071a4:	00ad      	lsls	r5, r5, #2
 80071a6:	3638      	adds	r6, #56	; 0x38
 80071a8:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80071ac:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[0];
 80071ae:	5d75      	ldrb	r5, [r6, r5]
	rv = rv << 8 | ptr[2];
 80071b0:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80071b2:	7853      	ldrb	r3, [r2, #1]
 80071b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80071b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80071bc:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 80071c0:	e7b2      	b.n	8007128 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80071c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071c6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80071ca:	4299      	cmp	r1, r3
 80071cc:	d003      	beq.n	80071d6 <dir_sdi+0x146>
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7fe ffd8 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071d4:	b948      	cbnz	r0, 80071ea <dir_sdi+0x15a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80071d6:	006d      	lsls	r5, r5, #1
 80071d8:	3638      	adds	r6, #56	; 0x38
 80071da:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80071de:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[0];
 80071e0:	5d75      	ldrb	r5, [r6, r5]
 80071e2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80071e4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 80071e8:	e79e      	b.n	8007128 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071ea:	2001      	movs	r0, #1
}
 80071ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	f8d8 301c 	ldr.w	r3, [r8, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071f4:	3b02      	subs	r3, #2
	clst -= 2;
 80071f6:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d20a      	bcs.n	8007212 <dir_sdi+0x182>
	return clst * fs->csize + fs->database;
 80071fc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8007200:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8007204:	fb02 3101 	mla	r1, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 8007208:	61f9      	str	r1, [r7, #28]
 800720a:	e7aa      	b.n	8007162 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800720c:	f3cb 050b 	ubfx	r5, fp, #0, #12
 8007210:	e78a      	b.n	8007128 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8007212:	2300      	movs	r3, #0
 8007214:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007218:	e794      	b.n	8007144 <dir_sdi+0xb4>
 800721a:	bf00      	nop

0800721c <dir_find>:
{
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007220:	2100      	movs	r1, #0
{
 8007222:	b087      	sub	sp, #28
 8007224:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007226:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007228:	f7ff ff32 	bl	8007090 <dir_sdi>
	if (res != FR_OK) return res;
 800722c:	4681      	mov	r9, r0
 800722e:	b9e0      	cbnz	r0, 800726a <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007230:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	69e7      	ldr	r7, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800723a:	f64f 7bff 	movw	fp, #65535	; 0xffff
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800723e:	46c1      	mov	r9, r8
 8007240:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007242:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8007244:	42bd      	cmp	r5, r7
 8007246:	d015      	beq.n	8007274 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007248:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800724a:	f106 0138 	add.w	r1, r6, #56	; 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 8086 	bne.w	8007360 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007254:	2301      	movs	r3, #1
 8007256:	463a      	mov	r2, r7
 8007258:	7870      	ldrb	r0, [r6, #1]
 800725a:	f7fe fee3 	bl	8006024 <disk_read>
 800725e:	b140      	cbz	r0, 8007272 <dir_find+0x56>
			fs->winsect = sector;
 8007260:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8007264:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sector;
 8007268:	6373      	str	r3, [r6, #52]	; 0x34
}
 800726a:	4648      	mov	r0, r9
 800726c:	b007      	add	sp, #28
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8007272:	6377      	str	r7, [r6, #52]	; 0x34
		c = dp->dir[DIR_Name];
 8007274:	6a25      	ldr	r5, [r4, #32]
 8007276:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007278:	b34f      	cbz	r7, 80072ce <dir_find+0xb2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800727a:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800727c:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800727e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8007282:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007284:	d004      	beq.n	8007290 <dir_find+0x74>
 8007286:	0712      	lsls	r2, r2, #28
 8007288:	d527      	bpl.n	80072da <dir_find+0xbe>
 800728a:	2b0f      	cmp	r3, #15
 800728c:	f000 8095 	beq.w	80073ba <dir_find+0x19e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007298:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800729a:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800729c:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800729e:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072a0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80072a4:	d213      	bcs.n	80072ce <dir_find+0xb2>
 80072a6:	b197      	cbz	r7, 80072ce <dir_find+0xb2>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072a8:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80072ac:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072ae:	b94a      	cbnz	r2, 80072c4 <dir_find+0xa8>
		dp->sect++;				/* Next sector */
 80072b0:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 80072b2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80072b4:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80072b6:	2900      	cmp	r1, #0
 80072b8:	d15e      	bne.n	8007378 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072ba:	8919      	ldrh	r1, [r3, #8]
 80072bc:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 80072c0:	f240 813f 	bls.w	8007542 <dir_find+0x326>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80072c4:	3338      	adds	r3, #56	; 0x38
	dp->dptr = ofs;						/* Current entry */
 80072c6:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80072c8:	4413      	add	r3, r2
 80072ca:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 80072cc:	e7b9      	b.n	8007242 <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80072ce:	f04f 0904 	mov.w	r9, #4
}
 80072d2:	4648      	mov	r0, r9
 80072d4:	b007      	add	sp, #28
 80072d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d06d      	beq.n	80073ba <dir_find+0x19e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072de:	f1b9 0f00 	cmp.w	r9, #0
 80072e2:	f000 80e4 	beq.w	80074ae <dir_find+0x292>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072e6:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 80072ea:	f019 0901 	ands.w	r9, r9, #1
 80072ee:	d1cf      	bne.n	8007290 <dir_find+0x74>
	} while (--cnt && r == 0);
 80072f0:	782a      	ldrb	r2, [r5, #0]
 80072f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d1ca      	bne.n	8007290 <dir_find+0x74>
 80072fa:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80072fe:	786b      	ldrb	r3, [r5, #1]
 8007300:	429a      	cmp	r2, r3
 8007302:	d1c5      	bne.n	8007290 <dir_find+0x74>
 8007304:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007308:	78ab      	ldrb	r3, [r5, #2]
 800730a:	429a      	cmp	r2, r3
 800730c:	d1c0      	bne.n	8007290 <dir_find+0x74>
 800730e:	78ea      	ldrb	r2, [r5, #3]
 8007310:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8007314:	429a      	cmp	r2, r3
 8007316:	d1bb      	bne.n	8007290 <dir_find+0x74>
 8007318:	792a      	ldrb	r2, [r5, #4]
 800731a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800731e:	429a      	cmp	r2, r3
 8007320:	d1b6      	bne.n	8007290 <dir_find+0x74>
 8007322:	796a      	ldrb	r2, [r5, #5]
 8007324:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007328:	429a      	cmp	r2, r3
 800732a:	d1b1      	bne.n	8007290 <dir_find+0x74>
 800732c:	79aa      	ldrb	r2, [r5, #6]
 800732e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007332:	429a      	cmp	r2, r3
 8007334:	d1ac      	bne.n	8007290 <dir_find+0x74>
 8007336:	79ea      	ldrb	r2, [r5, #7]
 8007338:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800733c:	429a      	cmp	r2, r3
 800733e:	d1a7      	bne.n	8007290 <dir_find+0x74>
 8007340:	7a2a      	ldrb	r2, [r5, #8]
 8007342:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007346:	429a      	cmp	r2, r3
 8007348:	d1a2      	bne.n	8007290 <dir_find+0x74>
 800734a:	7a6a      	ldrb	r2, [r5, #9]
 800734c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007350:	429a      	cmp	r2, r3
 8007352:	d19d      	bne.n	8007290 <dir_find+0x74>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007354:	7aaa      	ldrb	r2, [r5, #10]
 8007356:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800735a:	429a      	cmp	r2, r3
 800735c:	d198      	bne.n	8007290 <dir_find+0x74>
 800735e:	e784      	b.n	800726a <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007360:	2301      	movs	r3, #1
 8007362:	462a      	mov	r2, r5
 8007364:	7870      	ldrb	r0, [r6, #1]
 8007366:	9101      	str	r1, [sp, #4]
 8007368:	f7fe fe6a 	bl	8006040 <disk_write>
 800736c:	9901      	ldr	r1, [sp, #4]
 800736e:	2800      	cmp	r0, #0
 8007370:	d07d      	beq.n	800746e <dir_find+0x252>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007372:	f04f 0901 	mov.w	r9, #1
 8007376:	e778      	b.n	800726a <dir_find+0x4e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007378:	8958      	ldrh	r0, [r3, #10]
 800737a:	3801      	subs	r0, #1
 800737c:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8007380:	d1a0      	bne.n	80072c4 <dir_find+0xa8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007382:	4618      	mov	r0, r3
 8007384:	9202      	str	r2, [sp, #8]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	f7fe ffd4 	bl	8006334 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800738c:	2801      	cmp	r0, #1
 800738e:	f240 80dd 	bls.w	800754c <dir_find+0x330>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d0ed      	beq.n	8007372 <dir_find+0x156>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	69d9      	ldr	r1, [r3, #28]
 800739a:	4288      	cmp	r0, r1
 800739c:	f080 80d1 	bcs.w	8007542 <dir_find+0x326>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073a0:	3902      	subs	r1, #2
	clst -= 2;
 80073a2:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073a4:	9a02      	ldr	r2, [sp, #8]
 80073a6:	428f      	cmp	r7, r1
				dp->clust = clst;		/* Initialize data for new cluster */
 80073a8:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073aa:	f080 80d2 	bcs.w	8007552 <dir_find+0x336>
	return clst * fs->csize + fs->database;
 80073ae:	8958      	ldrh	r0, [r3, #10]
 80073b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073b2:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 80073b6:	61e7      	str	r7, [r4, #28]
 80073b8:	e784      	b.n	80072c4 <dir_find+0xa8>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80073ba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80073be:	0658      	lsls	r0, r3, #25
 80073c0:	f53f af6b 	bmi.w	800729a <dir_find+0x7e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80073c4:	0679      	lsls	r1, r7, #25
 80073c6:	d54d      	bpl.n	8007464 <dir_find+0x248>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80073c8:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80073ca:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80073ce:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80073d2:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073d4:	7b6b      	ldrb	r3, [r5, #13]
 80073d6:	4543      	cmp	r3, r8
 80073d8:	d146      	bne.n	8007468 <dir_find+0x24c>
	rv = rv << 8 | ptr[0];
 80073da:	7eea      	ldrb	r2, [r5, #27]
 80073dc:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80073de:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80073e2:	d141      	bne.n	8007468 <dir_find+0x24c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80073e4:	f895 a000 	ldrb.w	sl, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80073e8:	2101      	movs	r1, #1
 80073ea:	4b65      	ldr	r3, [pc, #404]	; (8007580 <dir_find+0x364>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80073ec:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073f0:	68f0      	ldr	r0, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80073f2:	9704      	str	r7, [sp, #16]
 80073f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f8:	9403      	str	r4, [sp, #12]
 80073fa:	4607      	mov	r7, r0
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073fc:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80073fe:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8007402:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8007406:	e9cd 8601 	strd	r8, r6, [sp, #4]
 800740a:	4654      	mov	r4, sl
 800740c:	46aa      	mov	sl, r5
 800740e:	461d      	mov	r5, r3
 8007410:	460b      	mov	r3, r1
 8007412:	e011      	b.n	8007438 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007414:	2cfe      	cmp	r4, #254	; 0xfe
 8007416:	4648      	mov	r0, r9
 8007418:	d81e      	bhi.n	8007458 <dir_find+0x23c>
 800741a:	f002 f815 	bl	8009448 <ff_wtoupper>
 800741e:	4606      	mov	r6, r0
 8007420:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8007424:	4644      	mov	r4, r8
 8007426:	f002 f80f 	bl	8009448 <ff_wtoupper>
 800742a:	4286      	cmp	r6, r0
	rv = rv << 8 | ptr[0];
 800742c:	464b      	mov	r3, r9
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800742e:	d113      	bne.n	8007458 <dir_find+0x23c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007430:	4a54      	ldr	r2, [pc, #336]	; (8007584 <dir_find+0x368>)
 8007432:	42aa      	cmp	r2, r5
 8007434:	f000 808f 	beq.w	8007556 <dir_find+0x33a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007438:	f815 0b01 	ldrb.w	r0, [r5], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800743c:	f104 0801 	add.w	r8, r4, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007440:	eb0a 0e00 	add.w	lr, sl, r0
	rv = rv << 8 | ptr[0];
 8007444:	f81a 9000 	ldrb.w	r9, [sl, r0]
 8007448:	f89e 0001 	ldrb.w	r0, [lr, #1]
 800744c:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
		if (wc) {
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1df      	bne.n	8007414 <dir_find+0x1f8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007454:	45d9      	cmp	r9, fp
 8007456:	d0eb      	beq.n	8007430 <dir_find+0x214>
 8007458:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 800745c:	9c03      	ldr	r4, [sp, #12]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800745e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007462:	e71a      	b.n	800729a <dir_find+0x7e>
 8007464:	45b9      	cmp	r9, r7
 8007466:	d0b5      	beq.n	80073d4 <dir_find+0x1b8>
 8007468:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800746c:	e715      	b.n	800729a <dir_find+0x7e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800746e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007470:	6a33      	ldr	r3, [r6, #32]
 8007472:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8007474:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007476:	429a      	cmp	r2, r3
 8007478:	f4bf aeec 	bcs.w	8007254 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800747c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007480:	f1ba 0f01 	cmp.w	sl, #1
 8007484:	f67f aee6 	bls.w	8007254 <dir_find+0x38>
 8007488:	9401      	str	r4, [sp, #4]
 800748a:	460c      	mov	r4, r1
 800748c:	e000      	b.n	8007490 <dir_find+0x274>
 800748e:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
 8007490:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007492:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007496:	2301      	movs	r3, #1
 8007498:	4621      	mov	r1, r4
 800749a:	462a      	mov	r2, r5
 800749c:	7870      	ldrb	r0, [r6, #1]
 800749e:	f7fe fdcf 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074a2:	f1ba 0f01 	cmp.w	sl, #1
 80074a6:	d1f2      	bne.n	800748e <dir_find+0x272>
 80074a8:	4621      	mov	r1, r4
 80074aa:	9c01      	ldr	r4, [sp, #4]
 80074ac:	e6d2      	b.n	8007254 <dir_find+0x38>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80074ae:	782b      	ldrb	r3, [r5, #0]
 80074b0:	786f      	ldrb	r7, [r5, #1]
 80074b2:	01da      	lsls	r2, r3, #7
 80074b4:	78a8      	ldrb	r0, [r5, #2]
 80074b6:	78e9      	ldrb	r1, [r5, #3]
 80074b8:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
 80074bc:	19da      	adds	r2, r3, r7
 80074be:	792f      	ldrb	r7, [r5, #4]
 80074c0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80074c4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80074c8:	fa50 f383 	uxtab	r3, r0, r3
 80074cc:	7968      	ldrb	r0, [r5, #5]
 80074ce:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80074d2:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80074d6:	fa51 f283 	uxtab	r2, r1, r3
 80074da:	79a9      	ldrb	r1, [r5, #6]
 80074dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80074e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80074e4:	fa57 f383 	uxtab	r3, r7, r3
 80074e8:	79ef      	ldrb	r7, [r5, #7]
 80074ea:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80074ee:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80074f2:	fa50 f283 	uxtab	r2, r0, r3
 80074f6:	7a68      	ldrb	r0, [r5, #9]
 80074f8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80074fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007500:	7a2a      	ldrb	r2, [r5, #8]
 8007502:	fa51 f383 	uxtab	r3, r1, r3
 8007506:	f3c3 0146 	ubfx	r1, r3, #1, #7
 800750a:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 800750e:	fa57 f183 	uxtab	r1, r7, r3
 8007512:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8007516:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800751a:	7aa9      	ldrb	r1, [r5, #10]
 800751c:	fa52 f383 	uxtab	r3, r2, r3
 8007520:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007524:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8007528:	fa50 f283 	uxtab	r2, r0, r3
 800752c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007530:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007534:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4598      	cmp	r8, r3
 800753c:	f47f aed3 	bne.w	80072e6 <dir_find+0xca>
 8007540:	e693      	b.n	800726a <dir_find+0x4e>
				dp->sect = 0; return FR_NO_FILE;
 8007542:	2300      	movs	r3, #0
 8007544:	f04f 0904 	mov.w	r9, #4
 8007548:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800754a:	e68e      	b.n	800726a <dir_find+0x4e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800754c:	f04f 0902 	mov.w	r9, #2
 8007550:	e68b      	b.n	800726a <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007552:	4617      	mov	r7, r2
 8007554:	e72f      	b.n	80073b6 <dir_find+0x19a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007556:	4655      	mov	r5, sl
 8007558:	4619      	mov	r1, r3
 800755a:	46a2      	mov	sl, r4
 800755c:	9f04      	ldr	r7, [sp, #16]
 800755e:	782b      	ldrb	r3, [r5, #0]
 8007560:	9c03      	ldr	r4, [sp, #12]
 8007562:	065a      	lsls	r2, r3, #25
 8007564:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 8007568:	d500      	bpl.n	800756c <dir_find+0x350>
 800756a:	b919      	cbnz	r1, 8007574 <dir_find+0x358>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800756c:	3f01      	subs	r7, #1
 800756e:	fa5f f987 	uxtb.w	r9, r7
 8007572:	e692      	b.n	800729a <dir_find+0x7e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f6      	beq.n	800756c <dir_find+0x350>
 800757e:	e773      	b.n	8007468 <dir_find+0x24c>
 8007580:	08011114 	.word	0x08011114
 8007584:	08011121 	.word	0x08011121

08007588 <follow_path>:
{
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800758c:	780b      	ldrb	r3, [r1, #0]
{
 800758e:	b083      	sub	sp, #12
 8007590:	460e      	mov	r6, r1
 8007592:	4607      	mov	r7, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8007594:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8007596:	f8d0 b000 	ldr.w	fp, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800759a:	d038      	beq.n	800760e <follow_path+0x86>
 800759c:	2b5c      	cmp	r3, #92	; 0x5c
 800759e:	d038      	beq.n	8007612 <follow_path+0x8a>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80075a0:	f8db 3018 	ldr.w	r3, [fp, #24]
 80075a4:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075a6:	7833      	ldrb	r3, [r6, #0]
 80075a8:	2b1f      	cmp	r3, #31
 80075aa:	d93b      	bls.n	8007624 <follow_path+0x9c>
	FATFS *fs = obj->fs;
 80075ac:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 80075ae:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80075b0:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
 80075b4:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 80075b6:	f240 8131 	bls.w	800781c <follow_path+0x294>
 80075ba:	f1a9 0a02 	sub.w	sl, r9, #2
 80075be:	46b0      	mov	r8, r6
		w = p[si++];					/* Get a character */
 80075c0:	2501      	movs	r5, #1
 80075c2:	e008      	b.n	80075d6 <follow_path+0x4e>
		lfn[di++] = w;					/* Store the Unicode character */
 80075c4:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 80075c8:	1c6b      	adds	r3, r5, #1
 80075ca:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80075ce:	281f      	cmp	r0, #31
 80075d0:	f240 812b 	bls.w	800782a <follow_path+0x2a2>
		w = p[si++];					/* Get a character */
 80075d4:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80075d6:	282f      	cmp	r0, #47	; 0x2f
 80075d8:	f105 34ff 	add.w	r4, r5, #4294967295
 80075dc:	d02c      	beq.n	8007638 <follow_path+0xb0>
 80075de:	285c      	cmp	r0, #92	; 0x5c
 80075e0:	d02a      	beq.n	8007638 <follow_path+0xb0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80075e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80075e6:	d00e      	beq.n	8007606 <follow_path+0x7e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80075e8:	2101      	movs	r1, #1
 80075ea:	f001 ff0b 	bl	8009404 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80075ee:	b150      	cbz	r0, 8007606 <follow_path+0x7e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80075f0:	287f      	cmp	r0, #127	; 0x7f
 80075f2:	d8e7      	bhi.n	80075c4 <follow_path+0x3c>
	while (*str && *str != chr) str++;
 80075f4:	2322      	movs	r3, #34	; 0x22
 80075f6:	4acd      	ldr	r2, [pc, #820]	; (800792c <follow_path+0x3a4>)
 80075f8:	e003      	b.n	8007602 <follow_path+0x7a>
 80075fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0e0      	beq.n	80075c4 <follow_path+0x3c>
 8007602:	4298      	cmp	r0, r3
 8007604:	d1f9      	bne.n	80075fa <follow_path+0x72>
						res = FR_OK;
 8007606:	2006      	movs	r0, #6
}
 8007608:	b003      	add	sp, #12
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800760e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8007612:	2b2f      	cmp	r3, #47	; 0x2f
 8007614:	d0fb      	beq.n	800760e <follow_path+0x86>
 8007616:	2b5c      	cmp	r3, #92	; 0x5c
 8007618:	d0f9      	beq.n	800760e <follow_path+0x86>
		obj->sclust = 0;					/* Start from root directory */
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800761e:	7833      	ldrb	r3, [r6, #0]
 8007620:	2b1f      	cmp	r3, #31
 8007622:	d8c3      	bhi.n	80075ac <follow_path+0x24>
		dp->fn[NSFLAG] = NS_NONAME;
 8007624:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8007626:	4638      	mov	r0, r7
 8007628:	2100      	movs	r1, #0
		dp->fn[NSFLAG] = NS_NONAME;
 800762a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800762e:	b003      	add	sp, #12
 8007630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8007634:	f7ff bd2c 	b.w	8007090 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007638:	5d73      	ldrb	r3, [r6, r5]
 800763a:	1972      	adds	r2, r6, r5
 800763c:	2b5c      	cmp	r3, #92	; 0x5c
 800763e:	d002      	beq.n	8007646 <follow_path+0xbe>
 8007640:	2b2f      	cmp	r3, #47	; 0x2f
 8007642:	f040 815a 	bne.w	80078fa <follow_path+0x372>
 8007646:	3501      	adds	r5, #1
 8007648:	4435      	add	r5, r6
 800764a:	462e      	mov	r6, r5
 800764c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007650:	2b2f      	cmp	r3, #47	; 0x2f
 8007652:	d0fa      	beq.n	800764a <follow_path+0xc2>
 8007654:	2b5c      	cmp	r3, #92	; 0x5c
 8007656:	d0f8      	beq.n	800764a <follow_path+0xc2>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8007658:	2c01      	cmp	r4, #1
 800765a:	f04f 0320 	mov.w	r3, #32
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800765e:	f04f 0800 	mov.w	r8, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8007662:	f000 80ea 	beq.w	800783a <follow_path+0x2b2>
 8007666:	2c02      	cmp	r4, #2
 8007668:	f040 80d5 	bne.w	8007816 <follow_path+0x28e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800766c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8007670:	2a2e      	cmp	r2, #46	; 0x2e
 8007672:	f000 812b 	beq.w	80078cc <follow_path+0x344>
 8007676:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 800767a:	e002      	b.n	8007682 <follow_path+0xfa>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800767c:	3c01      	subs	r4, #1
 800767e:	f000 80cd 	beq.w	800781c <follow_path+0x294>
		w = lfn[di - 1];
 8007682:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8007686:	2b20      	cmp	r3, #32
 8007688:	d0f8      	beq.n	800767c <follow_path+0xf4>
 800768a:	2b2e      	cmp	r3, #46	; 0x2e
 800768c:	d0f6      	beq.n	800767c <follow_path+0xf4>
		*d++ = (BYTE)val;
 800768e:	2320      	movs	r3, #32
 8007690:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8007694:	2100      	movs	r1, #0
 8007696:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 800769a:	627a      	str	r2, [r7, #36]	; 0x24
 800769c:	62ba      	str	r2, [r7, #40]	; 0x28
 800769e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80076a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80076a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80076aa:	f8b9 0000 	ldrh.w	r0, [r9]
 80076ae:	282e      	cmp	r0, #46	; 0x2e
 80076b0:	d002      	beq.n	80076b8 <follow_path+0x130>
 80076b2:	4298      	cmp	r0, r3
 80076b4:	f040 8116 	bne.w	80078e4 <follow_path+0x35c>
 80076b8:	464a      	mov	r2, r9
 80076ba:	2300      	movs	r3, #0
 80076bc:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80076c0:	461d      	mov	r5, r3
 80076c2:	3301      	adds	r3, #1
 80076c4:	2820      	cmp	r0, #32
 80076c6:	d0f9      	beq.n	80076bc <follow_path+0x134>
 80076c8:	282e      	cmp	r0, #46	; 0x2e
 80076ca:	d0f7      	beq.n	80076bc <follow_path+0x134>
	if (si) cf |= NS_LOSS | NS_LFN;
 80076cc:	f048 0803 	orr.w	r8, r8, #3
 80076d0:	3502      	adds	r5, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80076d2:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 80076d6:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80076da:	2a2e      	cmp	r2, #46	; 0x2e
 80076dc:	d001      	beq.n	80076e2 <follow_path+0x15a>
 80076de:	3c01      	subs	r4, #1
 80076e0:	d1f9      	bne.n	80076d6 <follow_path+0x14e>
		if (!w) break;					/* Break on end of the LFN */
 80076e2:	b390      	cbz	r0, 800774a <follow_path+0x1c2>
 80076e4:	2300      	movs	r3, #0
 80076e6:	2208      	movs	r2, #8
 80076e8:	46bc      	mov	ip, r7
 80076ea:	4631      	mov	r1, r6
 80076ec:	469a      	mov	sl, r3
 80076ee:	461f      	mov	r7, r3
 80076f0:	464e      	mov	r6, r9
 80076f2:	465b      	mov	r3, fp
 80076f4:	4691      	mov	r9, r2
 80076f6:	46e3      	mov	fp, ip
 80076f8:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80076fa:	2820      	cmp	r0, #32
 80076fc:	d003      	beq.n	8007706 <follow_path+0x17e>
 80076fe:	282e      	cmp	r0, #46	; 0x2e
 8007700:	d13a      	bne.n	8007778 <follow_path+0x1f0>
 8007702:	42ac      	cmp	r4, r5
 8007704:	d038      	beq.n	8007778 <follow_path+0x1f0>
			cf |= NS_LOSS | NS_LFN; continue;
 8007706:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800770a:	f836 0015 	ldrh.w	r0, [r6, r5, lsl #1]
 800770e:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 8007710:	2800      	cmp	r0, #0
 8007712:	d1f2      	bne.n	80076fa <follow_path+0x172>
 8007714:	4659      	mov	r1, fp
 8007716:	469b      	mov	fp, r3
 8007718:	463b      	mov	r3, r7
 800771a:	4616      	mov	r6, r2
 800771c:	460f      	mov	r7, r1
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800771e:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8007722:	464a      	mov	r2, r9
 8007724:	29e5      	cmp	r1, #229	; 0xe5
 8007726:	d102      	bne.n	800772e <follow_path+0x1a6>
 8007728:	2105      	movs	r1, #5
 800772a:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800772e:	2a08      	cmp	r2, #8
 8007730:	f000 80aa 	beq.w	8007888 <follow_path+0x300>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007734:	f003 020c 	and.w	r2, r3, #12
 8007738:	2a0c      	cmp	r2, #12
 800773a:	d004      	beq.n	8007746 <follow_path+0x1be>
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	2b03      	cmp	r3, #3
 8007742:	f040 80ab 	bne.w	800789c <follow_path+0x314>
 8007746:	f048 0802 	orr.w	r8, r8, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800774a:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff fd64 	bl	800721c <dir_find>
			ns = dp->fn[NSFLAG];
 8007754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007758:	b368      	cbz	r0, 80077b6 <follow_path+0x22e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800775a:	2804      	cmp	r0, #4
 800775c:	f47f af54 	bne.w	8007608 <follow_path+0x80>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8007760:	069c      	lsls	r4, r3, #26
 8007762:	f140 80de 	bpl.w	8007922 <follow_path+0x39a>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8007766:	0759      	lsls	r1, r3, #29
 8007768:	d541      	bpl.n	80077ee <follow_path+0x266>
						dp->fn[NSFLAG] = NS_NONAME;
 800776a:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 800776c:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8007772:	b003      	add	sp, #12
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007778:	45ca      	cmp	sl, r9
 800777a:	d23b      	bcs.n	80077f4 <follow_path+0x26c>
 800777c:	1b61      	subs	r1, r4, r5
 800777e:	fab1 f181 	clz	r1, r1
 8007782:	0949      	lsrs	r1, r1, #5
 8007784:	2900      	cmp	r1, #0
 8007786:	d135      	bne.n	80077f4 <follow_path+0x26c>
		if (w >= 0x80) {				/* Non ASCII character */
 8007788:	287f      	cmp	r0, #127	; 0x7f
 800778a:	d86d      	bhi.n	8007868 <follow_path+0x2e0>
	while (*str && *str != chr) str++;
 800778c:	212b      	movs	r1, #43	; 0x2b
 800778e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8007934 <follow_path+0x3ac>
 8007792:	e004      	b.n	800779e <follow_path+0x216>
 8007794:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8007798:	2900      	cmp	r1, #0
 800779a:	f000 808f 	beq.w	80078bc <follow_path+0x334>
 800779e:	4281      	cmp	r1, r0
 80077a0:	d1f8      	bne.n	8007794 <follow_path+0x20c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80077a2:	f048 0803 	orr.w	r8, r8, #3
 80077a6:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80077a8:	eb0b 010a 	add.w	r1, fp, sl
 80077ac:	f10a 0a01 	add.w	sl, sl, #1
 80077b0:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80077b4:	e7a9      	b.n	800770a <follow_path+0x182>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077b6:	075a      	lsls	r2, r3, #29
 80077b8:	f53f af26 	bmi.w	8007608 <follow_path+0x80>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077bc:	79bb      	ldrb	r3, [r7, #6]
 80077be:	06db      	lsls	r3, r3, #27
 80077c0:	f140 80ad 	bpl.w	800791e <follow_path+0x396>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	f10b 0338 	add.w	r3, fp, #56	; 0x38
	if (fs->fs_type == FS_FAT32) {
 80077ca:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 80077d2:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077d4:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 80077d6:	7ed8      	ldrb	r0, [r3, #27]
 80077d8:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80077da:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80077de:	d105      	bne.n	80077ec <follow_path+0x264>
	rv = rv << 8 | ptr[0];
 80077e0:	7d59      	ldrb	r1, [r3, #21]
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80077e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80077e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077ec:	60ba      	str	r2, [r7, #8]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	7833      	ldrb	r3, [r6, #0]
 80077f2:	e6dc      	b.n	80075ae <follow_path+0x26>
			if (ni == 11) {				/* Long extension */
 80077f4:	f1b9 0f0b 	cmp.w	r9, #11
 80077f8:	f000 8081 	beq.w	80078fe <follow_path+0x376>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80077fc:	42ac      	cmp	r4, r5
 80077fe:	d002      	beq.n	8007806 <follow_path+0x27e>
 8007800:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8007804:	d386      	bcc.n	8007714 <follow_path+0x18c>
			b <<= 2; continue;
 8007806:	00bf      	lsls	r7, r7, #2
 8007808:	4625      	mov	r5, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800780a:	f04f 090b 	mov.w	r9, #11
 800780e:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8007812:	b2ff      	uxtb	r7, r7
 8007814:	e779      	b.n	800770a <follow_path+0x182>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007816:	2c00      	cmp	r4, #0
 8007818:	f47f af2d 	bne.w	8007676 <follow_path+0xee>
	lfn[di] = 0;						/* LFN is created */
 800781c:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800781e:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8007820:	f8a9 3000 	strh.w	r3, [r9]
}
 8007824:	b003      	add	sp, #12
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
 800782a:	462c      	mov	r4, r5
 800782c:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800782e:	f04f 0804 	mov.w	r8, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8007832:	2324      	movs	r3, #36	; 0x24
	if ((di == 1 && lfn[di - 1] == '.') ||
 8007834:	2c01      	cmp	r4, #1
 8007836:	f47f af16 	bne.w	8007666 <follow_path+0xde>
 800783a:	f8b9 2000 	ldrh.w	r2, [r9]
 800783e:	2a2e      	cmp	r2, #46	; 0x2e
 8007840:	f47f af19 	bne.w	8007676 <follow_path+0xee>
		lfn[di] = 0;
 8007844:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 8007846:	f242 022e 	movw	r2, #8238	; 0x202e
		lfn[di] = 0;
 800784a:	f8a9 1002 	strh.w	r1, [r9, #2]
			dp->fn[i] = (i < di) ? '.' : ' ';
 800784e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8007850:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8007854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			dp->fn[i] = (i < di) ? '.' : ' ';
 8007858:	2320      	movs	r3, #32
 800785a:	f8c7 2026 	str.w	r2, [r7, #38]	; 0x26
 800785e:	f8c7 202a 	str.w	r2, [r7, #42]	; 0x2a
 8007862:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if (res != FR_OK) break;
 8007866:	e772      	b.n	800774e <follow_path+0x1c6>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007868:	e9cd 3200 	strd	r3, r2, [sp]
 800786c:	f001 fdca 	bl	8009404 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007870:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007874:	b1f8      	cbz	r0, 80078b6 <follow_path+0x32e>
 8007876:	492e      	ldr	r1, [pc, #184]	; (8007930 <follow_path+0x3a8>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8007878:	f048 0802 	orr.w	r8, r8, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800787c:	4408      	add	r0, r1
 800787e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007882:	2800      	cmp	r0, #0
 8007884:	d08d      	beq.n	80077a2 <follow_path+0x21a>
 8007886:	e781      	b.n	800778c <follow_path+0x204>
	if (ni == 8) b <<= 2;
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800788e:	2a0c      	cmp	r2, #12
 8007890:	f43f af59 	beq.w	8007746 <follow_path+0x1be>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007894:	f018 0f02 	tst.w	r8, #2
 8007898:	d008      	beq.n	80078ac <follow_path+0x324>
 800789a:	e756      	b.n	800774a <follow_path+0x1c2>
 800789c:	f018 0f02 	tst.w	r8, #2
 80078a0:	f47f af53 	bne.w	800774a <follow_path+0x1c2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf08      	it	eq
 80078a8:	f048 0810 	orreq.w	r8, r8, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80078ac:	2a04      	cmp	r2, #4
 80078ae:	bf08      	it	eq
 80078b0:	f048 0808 	orreq.w	r8, r8, #8
 80078b4:	e749      	b.n	800774a <follow_path+0x1c2>
			cf |= NS_LFN;				/* Force create LFN entry */
 80078b6:	f048 0802 	orr.w	r8, r8, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80078ba:	e772      	b.n	80077a2 <follow_path+0x21a>
				if (IsUpper(w)) {		/* ASCII large capital */
 80078bc:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80078c0:	2919      	cmp	r1, #25
 80078c2:	d811      	bhi.n	80078e8 <follow_path+0x360>
					b |= 2;
 80078c4:	f047 0702 	orr.w	r7, r7, #2
 80078c8:	b2c0      	uxtb	r0, r0
 80078ca:	e76d      	b.n	80077a8 <follow_path+0x220>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80078cc:	f8b9 2000 	ldrh.w	r2, [r9]
 80078d0:	2a2e      	cmp	r2, #46	; 0x2e
 80078d2:	f47f aed0 	bne.w	8007676 <follow_path+0xee>
		lfn[di] = 0;
 80078d6:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 80078d8:	f642 622e 	movw	r2, #11822	; 0x2e2e
		lfn[di] = 0;
 80078dc:	f8a9 1004 	strh.w	r1, [r9, #4]
			dp->fn[i] = (i < di) ? '.' : ' ';
 80078e0:	84ba      	strh	r2, [r7, #36]	; 0x24
 80078e2:	e7b5      	b.n	8007850 <follow_path+0x2c8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80078e4:	2501      	movs	r5, #1
 80078e6:	e6f4      	b.n	80076d2 <follow_path+0x14a>
					if (IsLower(w)) {	/* ASCII small capital */
 80078e8:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80078ec:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80078ee:	bf9c      	itt	ls
 80078f0:	3820      	subls	r0, #32
 80078f2:	f047 0701 	orrls.w	r7, r7, #1
 80078f6:	b2c0      	uxtb	r0, r0
 80078f8:	e756      	b.n	80077a8 <follow_path+0x220>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078fa:	4616      	mov	r6, r2
 80078fc:	e6ac      	b.n	8007658 <follow_path+0xd0>
				cf |= NS_LOSS | NS_LFN; break;
 80078fe:	4659      	mov	r1, fp
 8007900:	4616      	mov	r6, r2
 8007902:	469b      	mov	fp, r3
 8007904:	f048 0803 	orr.w	r8, r8, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007908:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 800790c:	463b      	mov	r3, r7
 800790e:	460f      	mov	r7, r1
 8007910:	2ae5      	cmp	r2, #229	; 0xe5
 8007912:	f47f af0f 	bne.w	8007734 <follow_path+0x1ac>
 8007916:	2205      	movs	r2, #5
 8007918:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800791c:	e70a      	b.n	8007734 <follow_path+0x1ac>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800791e:	2005      	movs	r0, #5
 8007920:	e672      	b.n	8007608 <follow_path+0x80>
 8007922:	f013 0f04 	tst.w	r3, #4
 8007926:	bf08      	it	eq
 8007928:	2005      	moveq	r0, #5
 800792a:	e66d      	b.n	8007608 <follow_path+0x80>
 800792c:	08011080 	.word	0x08011080
 8007930:	08011094 	.word	0x08011094
 8007934:	0801108c 	.word	0x0801108c

08007938 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007938:	2901      	cmp	r1, #1
{
 800793a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800793e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007940:	d90f      	bls.n	8007962 <remove_chain+0x2a>
 8007942:	69eb      	ldr	r3, [r5, #28]
 8007944:	460c      	mov	r4, r1
 8007946:	428b      	cmp	r3, r1
 8007948:	d90b      	bls.n	8007962 <remove_chain+0x2a>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800794a:	4606      	mov	r6, r0
 800794c:	b962      	cbnz	r2, 8007968 <remove_chain+0x30>
 800794e:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007950:	429c      	cmp	r4, r3
 8007952:	d206      	bcs.n	8007962 <remove_chain+0x2a>
		switch (fs->fs_type) {
 8007954:	783b      	ldrb	r3, [r7, #0]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d07a      	beq.n	8007a50 <remove_chain+0x118>
 800795a:	2b03      	cmp	r3, #3
 800795c:	d05e      	beq.n	8007a1c <remove_chain+0xe4>
 800795e:	2b01      	cmp	r3, #1
 8007960:	d011      	beq.n	8007986 <remove_chain+0x4e>
 8007962:	2002      	movs	r0, #2
}
 8007964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007968:	4293      	cmp	r3, r2
 800796a:	d9fa      	bls.n	8007962 <remove_chain+0x2a>
 800796c:	2a01      	cmp	r2, #1
 800796e:	d9f8      	bls.n	8007962 <remove_chain+0x2a>
 8007970:	4611      	mov	r1, r2
 8007972:	4628      	mov	r0, r5
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	f7fe fc3e 	bl	80061f8 <put_fat.part.0>
		if (res != FR_OK) return res;
 800797c:	2800      	cmp	r0, #0
 800797e:	d1f1      	bne.n	8007964 <remove_chain+0x2c>
 8007980:	6837      	ldr	r7, [r6, #0]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	e7e4      	b.n	8007950 <remove_chain+0x18>
			bc = (UINT)clst; bc += bc / 2;
 8007986:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800798c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800798e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007992:	4291      	cmp	r1, r2
 8007994:	d006      	beq.n	80079a4 <remove_chain+0x6c>
 8007996:	4638      	mov	r0, r7
 8007998:	f7fe fbf4 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800799c:	2800      	cmp	r0, #0
 800799e:	d16c      	bne.n	8007a7a <remove_chain+0x142>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 80079a4:	f3c8 0008 	ubfx	r0, r8, #0, #9
 80079a8:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079ac:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80079b0:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079b2:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80079b4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079b8:	d004      	beq.n	80079c4 <remove_chain+0x8c>
 80079ba:	4638      	mov	r0, r7
 80079bc:	f7fe fbe2 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d15a      	bne.n	8007a7a <remove_chain+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079c4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079c8:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80079ca:	4447      	add	r7, r8
 80079cc:	f897 8038 	ldrb.w	r8, [r7, #56]	; 0x38
 80079d0:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079d4:	d553      	bpl.n	8007a7e <remove_chain+0x146>
 80079d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 80079da:	f1b8 0f00 	cmp.w	r8, #0
 80079de:	d051      	beq.n	8007a84 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80079e0:	f1b8 0f01 	cmp.w	r8, #1
 80079e4:	d0bd      	beq.n	8007962 <remove_chain+0x2a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80079e6:	69eb      	ldr	r3, [r5, #28]
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d9ba      	bls.n	8007962 <remove_chain+0x2a>
 80079ec:	4621      	mov	r1, r4
 80079ee:	2200      	movs	r2, #0
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7fe fc01 	bl	80061f8 <put_fat.part.0>
			if (res != FR_OK) return res;
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d1b4      	bne.n	8007964 <remove_chain+0x2c>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80079fa:	69ea      	ldr	r2, [r5, #28]
 80079fc:	696b      	ldr	r3, [r5, #20]
 80079fe:	1e91      	subs	r1, r2, #2
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d205      	bcs.n	8007a10 <remove_chain+0xd8>
			fs->fsi_flag |= 1;
 8007a04:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 8007a06:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8007a08:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8007a0c:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8007a0e:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007a10:	4542      	cmp	r2, r8
 8007a12:	d937      	bls.n	8007a84 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a14:	6837      	ldr	r7, [r6, #0]
 8007a16:	4644      	mov	r4, r8
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	e799      	b.n	8007950 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a20:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a24:	4299      	cmp	r1, r3
 8007a26:	d003      	beq.n	8007a30 <remove_chain+0xf8>
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7fe fbab 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a2e:	bb20      	cbnz	r0, 8007a7a <remove_chain+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a30:	00a3      	lsls	r3, r4, #2
 8007a32:	3738      	adds	r7, #56	; 0x38
 8007a34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a38:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8007a3a:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 8007a3e:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8007a40:	7853      	ldrb	r3, [r2, #1]
 8007a42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8007a46:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a4a:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8007a4e:	e7c4      	b.n	80079da <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a54:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	d003      	beq.n	8007a64 <remove_chain+0x12c>
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f7fe fb91 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a62:	b950      	cbnz	r0, 8007a7a <remove_chain+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a64:	0063      	lsls	r3, r4, #1
 8007a66:	3738      	adds	r7, #56	; 0x38
 8007a68:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a6c:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8007a6e:	f817 8003 	ldrb.w	r8, [r7, r3]
 8007a72:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a74:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 8007a78:	e7af      	b.n	80079da <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e772      	b.n	8007964 <remove_chain+0x2c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a7e:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8007a82:	e7aa      	b.n	80079da <remove_chain+0xa2>
	return FR_OK;
 8007a84:	2000      	movs	r0, #0
 8007a86:	e76d      	b.n	8007964 <remove_chain+0x2c>

08007a88 <dir_register>:
{
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007a8c:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 8007a90:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007a92:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 8007a96:	f040 8334 	bne.w	8008102 <dir_register+0x67a>
	FATFS *fs = dp->obj.fs;
 8007a9a:	6803      	ldr	r3, [r0, #0]
 8007a9c:	4681      	mov	r9, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007a9e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8007aa2:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007aa4:	f8bc 3000 	ldrh.w	r3, [ip]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8348 	beq.w	800813e <dir_register+0x6b6>
 8007aae:	4663      	mov	r3, ip
 8007ab0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d1fa      	bne.n	8007ab0 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 8007aba:	f109 0a24 	add.w	sl, r9, #36	; 0x24
	if (cnt) {
 8007abe:	ab10      	add	r3, sp, #64	; 0x40
 8007ac0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8007ac4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007ac8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8007acc:	07d9      	lsls	r1, r3, #31
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	f100 809a 	bmi.w	8007c08 <dir_register+0x180>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ad4:	f013 0302 	ands.w	r3, r3, #2
 8007ad8:	9f00      	ldr	r7, [sp, #0]
 8007ada:	f000 82ba 	beq.w	8008052 <dir_register+0x5ca>
 8007ade:	4b74      	ldr	r3, [pc, #464]	; (8007cb0 <dir_register+0x228>)
 8007ae0:	350c      	adds	r5, #12
	res = dir_sdi(dp, 0);
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ae6:	fba3 3505 	umull	r3, r5, r3, r5
 8007aea:	08ab      	lsrs	r3, r5, #2
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8007af2:	f7ff facd 	bl	8007090 <dir_sdi>
	if (res == FR_OK) {
 8007af6:	4683      	mov	fp, r0
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f040 82b5 	bne.w	8008068 <dir_register+0x5e0>
						fs->wflag = 1;
 8007afe:	f8cd a00c 	str.w	sl, [sp, #12]
		n = 0;
 8007b02:	4680      	mov	r8, r0
 8007b04:	f8d9 101c 	ldr.w	r1, [r9, #28]
						fs->wflag = 1;
 8007b08:	46a3      	mov	fp, r4
 8007b0a:	46ba      	mov	sl, r7
 8007b0c:	9002      	str	r0, [sp, #8]
 8007b0e:	e029      	b.n	8007b64 <dir_register+0xdc>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b10:	fab3 f283 	clz	r2, r3
 8007b14:	0952      	lsrs	r2, r2, #5
 8007b16:	b3a3      	cbz	r3, 8007b82 <dir_register+0xfa>
				n = 0;					/* Not a blank entry. Restart to search */
 8007b18:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b1a:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b1e:	f8d9 101c 	ldr.w	r1, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b22:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b24:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8007b28:	f080 82a1 	bcs.w	800806e <dir_register+0x5e6>
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	f000 829e 	beq.w	800806e <dir_register+0x5e6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b32:	f3c4 0708 	ubfx	r7, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8007b36:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b3a:	b967      	cbnz	r7, 8007b56 <dir_register+0xce>
		dp->sect++;				/* Next sector */
 8007b3c:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 8007b3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
		dp->sect++;				/* Next sector */
 8007b42:	f8c9 101c 	str.w	r1, [r9, #28]
		if (!dp->clust) {		/* Static table */
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 82ab 	bne.w	80080a2 <dir_register+0x61a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b4c:	8932      	ldrh	r2, [r6, #8]
 8007b4e:	ebb2 1f54 	cmp.w	r2, r4, lsr #5
 8007b52:	f240 82f1 	bls.w	8008138 <dir_register+0x6b0>
 8007b56:	f106 0538 	add.w	r5, r6, #56	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b5a:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 8007b5c:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b60:	f8c9 5020 	str.w	r5, [r9, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b64:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	d005      	beq.n	8007b78 <dir_register+0xf0>
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f7fe fb09 	bl	8006184 <move_window.part.0>
			if (res != FR_OK) break;
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f040 82e5 	bne.w	8008142 <dir_register+0x6ba>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b78:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2be5      	cmp	r3, #229	; 0xe5
 8007b80:	d1c6      	bne.n	8007b10 <dir_register+0x88>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b82:	f108 0801 	add.w	r8, r8, #1
 8007b86:	45c3      	cmp	fp, r8
 8007b88:	d1c7      	bne.n	8007b1a <dir_register+0x92>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007b8a:	9b01      	ldr	r3, [sp, #4]
 8007b8c:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 82bc 	bne.w	800810e <dir_register+0x686>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b96:	9b00      	ldr	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 8007b98:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	d005      	beq.n	8007bae <dir_register+0x126>
 8007ba2:	9800      	ldr	r0, [sp, #0]
 8007ba4:	f7fe faee 	bl	8006184 <move_window.part.0>
		if (res == FR_OK) {
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	f040 82ba 	bne.w	8008122 <dir_register+0x69a>
	BYTE *d = (BYTE*)dst;
 8007bae:	2220      	movs	r2, #32
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8007bb6:	f001 fccb 	bl	8009550 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007bba:	f8d9 3020 	ldr.w	r3, [r9, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	4592      	cmp	sl, r2
 8007bc2:	d204      	bcs.n	8007bce <dir_register+0x146>
 8007bc4:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	f0c0 8489 	bcc.w	80084e0 <dir_register+0xa58>
			*d++ = *s++;
 8007bce:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
}
 8007bde:	4658      	mov	r0, fp
			*d++ = *s++;
 8007be0:	721a      	strb	r2, [r3, #8]
 8007be2:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
 8007be6:	725a      	strb	r2, [r3, #9]
 8007be8:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
 8007bec:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8007bee:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007bf0:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 8007bf4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8007bf8:	f003 0318 	and.w	r3, r3, #24
 8007bfc:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	70da      	strb	r2, [r3, #3]
}
 8007c02:	b011      	add	sp, #68	; 0x44
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007c08:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		for (n = 1; n < 100; n++) {
 8007c12:	2701      	movs	r7, #1
 8007c14:	9201      	str	r2, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c16:	f04f 0820 	mov.w	r8, #32
 8007c1a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007c1e:	468b      	mov	fp, r1
 8007c20:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8007c24:	9204      	str	r2, [sp, #16]
 8007c26:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8007c2a:	9509      	str	r5, [sp, #36]	; 0x24
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	9203      	str	r2, [sp, #12]
 8007c30:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8007c34:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
 8007c38:	9202      	str	r2, [sp, #8]
 8007c3a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
				if (sr & 0x10000) sr ^= 0x11021;
 8007c3e:	4c1d      	ldr	r4, [pc, #116]	; (8007cb4 <dir_register+0x22c>)
 8007c40:	9207      	str	r2, [sp, #28]
 8007c42:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007c46:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007c4a:	9206      	str	r2, [sp, #24]
 8007c4c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8007c50:	9205      	str	r2, [sp, #20]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007c52:	4662      	mov	r2, ip
			*d++ = *s++;
 8007c54:	9801      	ldr	r0, [sp, #4]
 8007c56:	2100      	movs	r1, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007c58:	2f05      	cmp	r7, #5
			*d++ = *s++;
 8007c5a:	f889 602e 	strb.w	r6, [r9, #46]	; 0x2e
 8007c5e:	f8a9 002c 	strh.w	r0, [r9, #44]	; 0x2c
 8007c62:	460b      	mov	r3, r1
 8007c64:	9804      	ldr	r0, [sp, #16]
 8007c66:	f360 0107 	bfi	r1, r0, #0, #8
 8007c6a:	9806      	ldr	r0, [sp, #24]
 8007c6c:	f360 0307 	bfi	r3, r0, #0, #8
 8007c70:	9803      	ldr	r0, [sp, #12]
 8007c72:	f360 210f 	bfi	r1, r0, #8, #8
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	f360 230f 	bfi	r3, r0, #8, #8
 8007c7c:	9802      	ldr	r0, [sp, #8]
 8007c7e:	f36b 4317 	bfi	r3, fp, #16, #8
 8007c82:	f360 4117 	bfi	r1, r0, #16, #8
 8007c86:	9807      	ldr	r0, [sp, #28]
 8007c88:	f365 631f 	bfi	r3, r5, #24, #8
 8007c8c:	f360 611f 	bfi	r1, r0, #24, #8
 8007c90:	e9c9 1309 	strd	r1, r3, [r9, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007c94:	f240 8158 	bls.w	8007f48 <dir_register+0x4c0>
		while (*lfn) {	/* Create a CRC */
 8007c98:	8813      	ldrh	r3, [r2, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8154 	beq.w	8007f48 <dir_register+0x4c0>
				sr = (sr << 1) + (wc & 1);
 8007ca0:	f003 0101 	and.w	r1, r3, #1
 8007ca4:	4694      	mov	ip, r2
				wc >>= 1;
 8007ca6:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 8007ca8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007cac:	e00c      	b.n	8007cc8 <dir_register+0x240>
 8007cae:	bf00      	nop
 8007cb0:	4ec4ec4f 	.word	0x4ec4ec4f
 8007cb4:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 8007cb8:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 8007cbc:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 8007cbe:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007cc2:	0412      	lsls	r2, r2, #16
 8007cc4:	bf48      	it	mi
 8007cc6:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007cc8:	f000 0001 	and.w	r0, r0, #1
				wc >>= 1;
 8007ccc:	089a      	lsrs	r2, r3, #2
				sr = (sr << 1) + (wc & 1);
 8007cce:	eb00 0041 	add.w	r0, r0, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007cd2:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8007cd4:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 8007cd8:	ea4f 02d3 	mov.w	r2, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8007cdc:	bf48      	it	mi
 8007cde:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8007ce0:	f002 0201 	and.w	r2, r2, #1
 8007ce4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007ce8:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8007cea:	ea4f 1013 	mov.w	r0, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8007cee:	bf48      	it	mi
 8007cf0:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007cf2:	f000 0001 	and.w	r0, r0, #1
 8007cf6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007cfa:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007cfc:	ea4f 1153 	mov.w	r1, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8007d00:	bf48      	it	mi
 8007d02:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8007d04:	f001 0101 	and.w	r1, r1, #1
 8007d08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d0c:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8007d0e:	ea4f 1293 	mov.w	r2, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8007d12:	bf48      	it	mi
 8007d14:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8007d16:	f002 0201 	and.w	r2, r2, #1
 8007d1a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d1e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8007d20:	ea4f 10d3 	mov.w	r0, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8007d24:	bf48      	it	mi
 8007d26:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007d28:	f000 0001 	and.w	r0, r0, #1
 8007d2c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d30:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007d32:	ea4f 2113 	mov.w	r1, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8007d36:	bf48      	it	mi
 8007d38:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8007d3a:	f001 0101 	and.w	r1, r1, #1
 8007d3e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d42:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8007d44:	ea4f 2253 	mov.w	r2, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8007d48:	bf48      	it	mi
 8007d4a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8007d4c:	f002 0201 	and.w	r2, r2, #1
 8007d50:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d54:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8007d56:	ea4f 2093 	mov.w	r0, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8007d5a:	bf48      	it	mi
 8007d5c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007d5e:	f000 0001 	and.w	r0, r0, #1
 8007d62:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d66:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007d68:	ea4f 21d3 	mov.w	r1, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8007d6c:	bf48      	it	mi
 8007d6e:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8007d70:	f001 0101 	and.w	r1, r1, #1
 8007d74:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d78:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8007d7a:	ea4f 3213 	mov.w	r2, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8007d7e:	bf48      	it	mi
 8007d80:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8007d82:	f002 0201 	and.w	r2, r2, #1
 8007d86:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d8a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8007d8c:	ea4f 3053 	mov.w	r0, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8007d90:	bf48      	it	mi
 8007d92:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007d94:	f000 0001 	and.w	r0, r0, #1
 8007d98:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007d9c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007d9e:	ea4f 3193 	mov.w	r1, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8007da2:	bf48      	it	mi
 8007da4:	4062      	eormi	r2, r4
				wc >>= 1;
 8007da6:	0bdb      	lsrs	r3, r3, #15
				sr = (sr << 1) + (wc & 1);
 8007da8:	f001 0101 	and.w	r1, r1, #1
 8007dac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007db0:	0412      	lsls	r2, r2, #16
 8007db2:	bf48      	it	mi
 8007db4:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8007db6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007dba:	0400      	lsls	r0, r0, #16
 8007dbc:	bf48      	it	mi
 8007dbe:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8007dc0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007dc4:	0409      	lsls	r1, r1, #16
		while (*lfn) {	/* Create a CRC */
 8007dc6:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8007dca:	bf48      	it	mi
 8007dcc:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f47f af72 	bne.w	8007cb8 <dir_register+0x230>
		c = (BYTE)((seq % 16) + '0');
 8007dd4:	f002 010f 	and.w	r1, r2, #15
 8007dd8:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007ddc:	2b39      	cmp	r3, #57	; 0x39
 8007dde:	bf88      	it	hi
 8007de0:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8007de4:	2a0f      	cmp	r2, #15
		seq /= 16;
 8007de6:	ea4f 1112 	mov.w	r1, r2, lsr #4
		ns[i--] = c;
 8007dea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	} while (seq);
 8007dee:	f240 8144 	bls.w	800807a <dir_register+0x5f2>
		c = (BYTE)((seq % 16) + '0');
 8007df2:	f001 000f 	and.w	r0, r1, #15
 8007df6:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007dfa:	2b39      	cmp	r3, #57	; 0x39
 8007dfc:	bf88      	it	hi
 8007dfe:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8007e02:	290f      	cmp	r1, #15
		seq /= 16;
 8007e04:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 8007e08:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	} while (seq);
 8007e0c:	f240 813a 	bls.w	8008084 <dir_register+0x5fc>
		c = (BYTE)((seq % 16) + '0');
 8007e10:	f000 010f 	and.w	r1, r0, #15
 8007e14:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007e18:	2b39      	cmp	r3, #57	; 0x39
 8007e1a:	bf88      	it	hi
 8007e1c:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8007e20:	280f      	cmp	r0, #15
		seq /= 16;
 8007e22:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 8007e26:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	} while (seq);
 8007e2a:	f240 8130 	bls.w	800808e <dir_register+0x606>
		c = (BYTE)((seq % 16) + '0');
 8007e2e:	f001 000f 	and.w	r0, r1, #15
 8007e32:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007e36:	2b39      	cmp	r3, #57	; 0x39
 8007e38:	bf88      	it	hi
 8007e3a:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8007e3e:	290f      	cmp	r1, #15
		seq /= 16;
 8007e40:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 8007e44:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	} while (seq);
 8007e48:	f240 8126 	bls.w	8008098 <dir_register+0x610>
		c = (BYTE)((seq % 16) + '0');
 8007e4c:	f000 010f 	and.w	r1, r0, #15
 8007e50:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007e54:	2b39      	cmp	r3, #57	; 0x39
 8007e56:	bf88      	it	hi
 8007e58:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8007e5c:	280f      	cmp	r0, #15
		seq /= 16;
 8007e5e:	ea4f 5112 	mov.w	r1, r2, lsr #20
		ns[i--] = c;
 8007e62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	} while (seq);
 8007e66:	f240 8142 	bls.w	80080ee <dir_register+0x666>
		c = (BYTE)((seq % 16) + '0');
 8007e6a:	f001 000f 	and.w	r0, r1, #15
 8007e6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007e72:	2b39      	cmp	r3, #57	; 0x39
 8007e74:	bf88      	it	hi
 8007e76:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8007e7a:	290f      	cmp	r1, #15
		seq /= 16;
 8007e7c:	ea4f 6012 	mov.w	r0, r2, lsr #24
		ns[i--] = c;
 8007e80:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	} while (seq);
 8007e84:	f240 8138 	bls.w	80080f8 <dir_register+0x670>
		c = (BYTE)((seq % 16) + '0');
 8007e88:	f000 010f 	and.w	r1, r0, #15
		seq /= 16;
 8007e8c:	0f12      	lsrs	r2, r2, #28
		c = (BYTE)((seq % 16) + '0');
 8007e8e:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007e92:	2b39      	cmp	r3, #57	; 0x39
 8007e94:	bf88      	it	hi
 8007e96:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8007e9a:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007e9c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	} while (seq);
 8007ea0:	d954      	bls.n	8007f4c <dir_register+0x4c4>
		c = (BYTE)((seq % 16) + '0');
 8007ea2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8007ea6:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 8007ea8:	2b39      	cmp	r3, #57	; 0x39
 8007eaa:	bf88      	it	hi
 8007eac:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007eb8:	f109 0123 	add.w	r1, r9, #35	; 0x23
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e002      	b.n	8007ec6 <dir_register+0x43e>
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <dir_register+0x446>
 8007ec6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007eca:	2820      	cmp	r0, #32
 8007ecc:	d1f8      	bne.n	8007ec0 <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ece:	2a07      	cmp	r2, #7
 8007ed0:	d941      	bls.n	8007f56 <dir_register+0x4ce>
 8007ed2:	1c59      	adds	r1, r3, #1
 8007ed4:	f80a 8003 	strb.w	r8, [sl, r3]
	} while (j < 8);
 8007ed8:	2907      	cmp	r1, #7
 8007eda:	d829      	bhi.n	8007f30 <dir_register+0x4a8>
 8007edc:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ede:	f101 0001 	add.w	r0, r1, #1
 8007ee2:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8007ee6:	d023      	beq.n	8007f30 <dir_register+0x4a8>
 8007ee8:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007eea:	f100 0101 	add.w	r1, r0, #1
 8007eee:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8007ef2:	d01d      	beq.n	8007f30 <dir_register+0x4a8>
 8007ef4:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ef6:	f101 0001 	add.w	r0, r1, #1
 8007efa:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8007efe:	d017      	beq.n	8007f30 <dir_register+0x4a8>
 8007f00:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f02:	f100 0101 	add.w	r1, r0, #1
 8007f06:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8007f0a:	d011      	beq.n	8007f30 <dir_register+0x4a8>
 8007f0c:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f0e:	f101 0001 	add.w	r0, r1, #1
 8007f12:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8007f16:	d00b      	beq.n	8007f30 <dir_register+0x4a8>
 8007f18:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f1a:	f100 0101 	add.w	r1, r0, #1
 8007f1e:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8007f22:	d005      	beq.n	8007f30 <dir_register+0x4a8>
 8007f24:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f26:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8007f2a:	d101      	bne.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f2c:	f889 802b 	strb.w	r8, [r9, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007f30:	4648      	mov	r0, r9
 8007f32:	f7ff f973 	bl	800721c <dir_find>
			if (res != FR_OK) break;
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d17e      	bne.n	8008038 <dir_register+0x5b0>
		for (n = 1; n < 100; n++) {
 8007f3a:	3701      	adds	r7, #1
 8007f3c:	2f64      	cmp	r7, #100	; 0x64
 8007f3e:	f000 8096 	beq.w	800806e <dir_register+0x5e6>
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	e685      	b.n	8007c54 <dir_register+0x1cc>
 8007f48:	463a      	mov	r2, r7
 8007f4a:	e743      	b.n	8007dd4 <dir_register+0x34c>
	ns[i] = '~';
 8007f4c:	237e      	movs	r3, #126	; 0x7e
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007f54:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f56:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8007f5a:	1c59      	adds	r1, r3, #1
 8007f5c:	1c50      	adds	r0, r2, #1
 8007f5e:	4494      	add	ip, r2
	} while (j < 8);
 8007f60:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f62:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8007f66:	f80a c003 	strb.w	ip, [sl, r3]
	} while (j < 8);
 8007f6a:	d8e1      	bhi.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f6c:	2807      	cmp	r0, #7
 8007f6e:	d8b5      	bhi.n	8007edc <dir_register+0x454>
 8007f70:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
	} while (j < 8);
 8007f74:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f76:	4460      	add	r0, ip
 8007f78:	f102 0c02 	add.w	ip, r2, #2
 8007f7c:	f810 ec14 	ldrb.w	lr, [r0, #-20]
 8007f80:	f103 0002 	add.w	r0, r3, #2
 8007f84:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8007f88:	d0d2      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f8a:	f1bc 0f08 	cmp.w	ip, #8
 8007f8e:	d0ab      	beq.n	8007ee8 <dir_register+0x460>
 8007f90:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8007f92:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007f94:	f102 0e03 	add.w	lr, r2, #3
 8007f98:	448c      	add	ip, r1
 8007f9a:	f103 0103 	add.w	r1, r3, #3
 8007f9e:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8007fa2:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 8007fa6:	d0c3      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fa8:	f1be 0f07 	cmp.w	lr, #7
 8007fac:	d8a2      	bhi.n	8007ef4 <dir_register+0x46c>
 8007fae:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 8007fb0:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fb2:	f102 0c04 	add.w	ip, r2, #4
 8007fb6:	4486      	add	lr, r0
 8007fb8:	f103 0004 	add.w	r0, r3, #4
 8007fbc:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8007fc0:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8007fc4:	d0b4      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fc6:	f1bc 0f08 	cmp.w	ip, #8
 8007fca:	d099      	beq.n	8007f00 <dir_register+0x478>
 8007fcc:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8007fce:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fd0:	f102 0e05 	add.w	lr, r2, #5
 8007fd4:	448c      	add	ip, r1
 8007fd6:	f103 0105 	add.w	r1, r3, #5
 8007fda:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8007fde:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 8007fe2:	d0a5      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fe4:	f1be 0f07 	cmp.w	lr, #7
 8007fe8:	d890      	bhi.n	8007f0c <dir_register+0x484>
 8007fea:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 8007fec:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007fee:	f102 0c06 	add.w	ip, r2, #6
 8007ff2:	4486      	add	lr, r0
 8007ff4:	f103 0006 	add.w	r0, r3, #6
 8007ff8:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8007ffc:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8008000:	d096      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008002:	f1bc 0f08 	cmp.w	ip, #8
 8008006:	d087      	beq.n	8007f18 <dir_register+0x490>
 8008008:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 800800a:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800800c:	448c      	add	ip, r1
 800800e:	f103 0107 	add.w	r1, r3, #7
 8008012:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8008016:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 800801a:	d089      	beq.n	8007f30 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800801c:	2a00      	cmp	r2, #0
 800801e:	d181      	bne.n	8007f24 <dir_register+0x49c>
 8008020:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	} while (j < 8);
 8008024:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008026:	f80a 3001 	strb.w	r3, [sl, r1]
	} while (j < 8);
 800802a:	f43f af7f 	beq.w	8007f2c <dir_register+0x4a4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800802e:	4648      	mov	r0, r9
 8008030:	f7ff f8f4 	bl	800721c <dir_find>
			if (res != FR_OK) break;
 8008034:	2800      	cmp	r0, #0
 8008036:	d080      	beq.n	8007f3a <dir_register+0x4b2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008038:	2804      	cmp	r0, #4
 800803a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800803c:	4683      	mov	fp, r0
 800803e:	d118      	bne.n	8008072 <dir_register+0x5ea>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008040:	9b08      	ldr	r3, [sp, #32]
 8008042:	f8d9 7000 	ldr.w	r7, [r9]
 8008046:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800804a:	f013 0302 	ands.w	r3, r3, #2
 800804e:	f47f ad46 	bne.w	8007ade <dir_register+0x56>
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8008056:	2100      	movs	r1, #0
 8008058:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800805a:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 800805c:	f7ff f818 	bl	8007090 <dir_sdi>
	if (res == FR_OK) {
 8008060:	4683      	mov	fp, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	f43f ad4b 	beq.w	8007afe <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008068:	f1bb 0f04 	cmp.w	fp, #4
 800806c:	d101      	bne.n	8008072 <dir_register+0x5ea>
 800806e:	f04f 0b07 	mov.w	fp, #7
}
 8008072:	4658      	mov	r0, fp
 8008074:	b011      	add	sp, #68	; 0x44
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 800807a:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 800807c:	2206      	movs	r2, #6
	ns[i] = '~';
 800807e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008082:	e719      	b.n	8007eb8 <dir_register+0x430>
	ns[i] = '~';
 8008084:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8008086:	2205      	movs	r2, #5
	ns[i] = '~';
 8008088:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800808c:	e714      	b.n	8007eb8 <dir_register+0x430>
	ns[i] = '~';
 800808e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8008090:	2204      	movs	r2, #4
	ns[i] = '~';
 8008092:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008096:	e70f      	b.n	8007eb8 <dir_register+0x430>
	ns[i] = '~';
 8008098:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 800809a:	2203      	movs	r2, #3
	ns[i] = '~';
 800809c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080a0:	e70a      	b.n	8007eb8 <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080a2:	8972      	ldrh	r2, [r6, #10]
 80080a4:	3a01      	subs	r2, #1
 80080a6:	ea12 2254 	ands.w	r2, r2, r4, lsr #9
 80080aa:	f47f ad54 	bne.w	8007b56 <dir_register+0xce>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080ae:	4619      	mov	r1, r3
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7fe f93f 	bl	8006334 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080b6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080b8:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080ba:	f240 822b 	bls.w	8008514 <dir_register+0xa8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80080be:	1c42      	adds	r2, r0, #1
 80080c0:	d034      	beq.n	800812c <dir_register+0x6a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80080c2:	69f3      	ldr	r3, [r6, #28]
 80080c4:	4298      	cmp	r0, r3
 80080c6:	d23e      	bcs.n	8008146 <dir_register+0x6be>
 80080c8:	1e82      	subs	r2, r0, #2
 80080ca:	3b02      	subs	r3, #2
 80080cc:	f106 0538 	add.w	r5, r6, #56	; 0x38
 80080d0:	9205      	str	r2, [sp, #20]
				dp->clust = clst;		/* Initialize data for new cluster */
 80080d2:	9a04      	ldr	r2, [sp, #16]
 80080d4:	f8c9 2018 	str.w	r2, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080d8:	9a05      	ldr	r2, [sp, #20]
 80080da:	4293      	cmp	r3, r2
 80080dc:	f240 81fe 	bls.w	80084dc <dir_register+0xa54>
	return clst * fs->csize + fs->database;
 80080e0:	8971      	ldrh	r1, [r6, #10]
 80080e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80080e4:	fb02 3101 	mla	r1, r2, r1, r3
				dp->sect = clust2sect(fs, clst);
 80080e8:	f8c9 101c 	str.w	r1, [r9, #28]
 80080ec:	e535      	b.n	8007b5a <dir_register+0xd2>
	ns[i] = '~';
 80080ee:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80080f0:	2202      	movs	r2, #2
	ns[i] = '~';
 80080f2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080f6:	e6df      	b.n	8007eb8 <dir_register+0x430>
	ns[i] = '~';
 80080f8:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80080fa:	2201      	movs	r2, #1
	ns[i] = '~';
 80080fc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008100:	e6da      	b.n	8007eb8 <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008102:	f04f 0b06 	mov.w	fp, #6
}
 8008106:	4658      	mov	r0, fp
 8008108:	b011      	add	sp, #68	; 0x44
 800810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800810e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8008112:	4648      	mov	r0, r9
 8008114:	461e      	mov	r6, r3
 8008116:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800811a:	f7fe ffb9 	bl	8007090 <dir_sdi>
		if (res == FR_OK) {
 800811e:	2800      	cmp	r0, #0
 8008120:	d074      	beq.n	800820c <dir_register+0x784>
 8008122:	4683      	mov	fp, r0
}
 8008124:	4658      	mov	r0, fp
 8008126:	b011      	add	sp, #68	; 0x44
 8008128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800812c:	f04f 0b01 	mov.w	fp, #1
}
 8008130:	4658      	mov	r0, fp
 8008132:	b011      	add	sp, #68	; 0x44
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 8008138:	f8c9 301c 	str.w	r3, [r9, #28]
 800813c:	e797      	b.n	800806e <dir_register+0x5e6>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800813e:	461d      	mov	r5, r3
 8008140:	e4bb      	b.n	8007aba <dir_register+0x32>
 8008142:	4683      	mov	fp, r0
 8008144:	e790      	b.n	8008068 <dir_register+0x5e0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008146:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800814a:	4648      	mov	r0, r9
 800814c:	f7fe fc84 	bl	8006a58 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008150:	4603      	mov	r3, r0
 8008152:	9004      	str	r0, [sp, #16]
 8008154:	2800      	cmp	r0, #0
 8008156:	d08a      	beq.n	800806e <dir_register+0x5e6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008158:	2801      	cmp	r0, #1
 800815a:	f000 81db 	beq.w	8008514 <dir_register+0xa8c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800815e:	3301      	adds	r3, #1
 8008160:	d0e4      	beq.n	800812c <dir_register+0x6a4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008162:	78f3      	ldrb	r3, [r6, #3]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 81e7 	bne.w	8008538 <dir_register+0xab0>
 800816a:	f106 0538 	add.w	r5, r6, #56	; 0x38
	clst -= 2;
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008174:	2100      	movs	r1, #0
 8008176:	4628      	mov	r0, r5
 8008178:	3b02      	subs	r3, #2
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f001 f9e8 	bl	8009550 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008180:	69f3      	ldr	r3, [r6, #28]
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	3b02      	subs	r3, #2
 8008186:	429a      	cmp	r2, r3
 8008188:	f080 8203 	bcs.w	8008592 <dir_register+0xb0a>
	return clst * fs->csize + fs->database;
 800818c:	4610      	mov	r0, r2
 800818e:	8971      	ldrh	r1, [r6, #10]
 8008190:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8008192:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008196:	6372      	str	r2, [r6, #52]	; 0x34
 8008198:	2900      	cmp	r1, #0
 800819a:	f000 81cb 	beq.w	8008534 <dir_register+0xaac>
 800819e:	2300      	movs	r3, #0
 80081a0:	9708      	str	r7, [sp, #32]
 80081a2:	462f      	mov	r7, r5
 80081a4:	4615      	mov	r5, r2
 80081a6:	e9cd b406 	strd	fp, r4, [sp, #24]
 80081aa:	461c      	mov	r4, r3
						fs->wflag = 1;
 80081ac:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80081b0:	462a      	mov	r2, r5
 80081b2:	4639      	mov	r1, r7
 80081b4:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 80081b6:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80081b8:	2301      	movs	r3, #1
 80081ba:	f7fd ff41 	bl	8006040 <disk_write>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d1b4      	bne.n	800812c <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081c2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80081c4:	6a33      	ldr	r3, [r6, #32]
 80081c6:	eba5 0c02 	sub.w	ip, r5, r2
			fs->wflag = 0;
 80081ca:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081cc:	459c      	cmp	ip, r3
 80081ce:	d212      	bcs.n	80081f6 <dir_register+0x76e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081d0:	f896 b002 	ldrb.w	fp, [r6, #2]
 80081d4:	f1bb 0f01 	cmp.w	fp, #1
 80081d8:	d801      	bhi.n	80081de <dir_register+0x756>
 80081da:	e00c      	b.n	80081f6 <dir_register+0x76e>
 80081dc:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
 80081de:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081e0:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80081e4:	2301      	movs	r3, #1
 80081e6:	4639      	mov	r1, r7
 80081e8:	462a      	mov	r2, r5
 80081ea:	7870      	ldrb	r0, [r6, #1]
 80081ec:	f7fd ff28 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081f0:	f1bb 0f01 	cmp.w	fp, #1
 80081f4:	d1f2      	bne.n	80081dc <dir_register+0x754>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081f6:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80081f8:	1c63      	adds	r3, r4, #1
 80081fa:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 80081fe:	1c45      	adds	r5, r0, #1
 8008200:	4563      	cmp	r3, ip
 8008202:	6375      	str	r5, [r6, #52]	; 0x34
 8008204:	f080 818d 	bcs.w	8008522 <dir_register+0xa9a>
 8008208:	461c      	mov	r4, r3
 800820a:	e7cf      	b.n	80081ac <dir_register+0x724>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800820c:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8008210:	4604      	mov	r4, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008212:	f899 1025 	ldrb.w	r1, [r9, #37]	; 0x25
 8008216:	01d3      	lsls	r3, r2, #7
 8008218:	f899 5026 	ldrb.w	r5, [r9, #38]	; 0x26
 800821c:	f899 0027 	ldrb.w	r0, [r9, #39]	; 0x27
 8008220:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8008224:	9f00      	ldr	r7, [sp, #0]
 8008226:	185a      	adds	r2, r3, r1
 8008228:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800822c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008230:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008234:	fa55 f283 	uxtab	r2, r5, r3
 8008238:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 800823c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008240:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008244:	fa50 f283 	uxtab	r2, r0, r3
 8008248:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 800824c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008250:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008254:	fa51 f283 	uxtab	r2, r1, r3
 8008258:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
 800825c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008260:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008264:	fa55 f283 	uxtab	r2, r5, r3
 8008268:	f899 502c 	ldrb.w	r5, [r9, #44]	; 0x2c
 800826c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008270:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008274:	fa50 f283 	uxtab	r2, r0, r3
 8008278:	f899 002d 	ldrb.w	r0, [r9, #45]	; 0x2d
 800827c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008280:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008284:	fa51 f283 	uxtab	r2, r1, r3
 8008288:	f899 102e 	ldrb.w	r1, [r9, #46]	; 0x2e
 800828c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008290:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008294:	fa55 f283 	uxtab	r2, r5, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8008298:	25ff      	movs	r5, #255	; 0xff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800829a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800829e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80082a2:	fa50 f383 	uxtab	r3, r0, r3
 80082a6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80082aa:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80082ae:	fa51 f183 	uxtab	r1, r1, r3
 80082b2:	e9cd ba01 	strd	fp, sl, [sp, #4]
 80082b6:	fa5f f881 	uxtb.w	r8, r1
	} while (--n);
 80082ba:	e025      	b.n	8008308 <dir_register+0x880>
	*ptr++ = (BYTE)val; val >>= 8;
 80082bc:	70dd      	strb	r5, [r3, #3]
	*ptr++ = (BYTE)val;
 80082be:	711d      	strb	r5, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80082c0:	715d      	strb	r5, [r3, #5]
	*ptr++ = (BYTE)val;
 80082c2:	719d      	strb	r5, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80082c4:	71dd      	strb	r5, [r3, #7]
	*ptr++ = (BYTE)val;
 80082c6:	721d      	strb	r5, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80082c8:	725d      	strb	r5, [r3, #9]
	*ptr++ = (BYTE)val;
 80082ca:	729d      	strb	r5, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80082cc:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val;
 80082ce:	73dd      	strb	r5, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80082d0:	741d      	strb	r5, [r3, #16]
	*ptr++ = (BYTE)val;
 80082d2:	745d      	strb	r5, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80082d4:	749d      	strb	r5, [r3, #18]
	*ptr++ = (BYTE)val;
 80082d6:	74dd      	strb	r5, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 80082d8:	751d      	strb	r5, [r3, #20]
	*ptr++ = (BYTE)val;
 80082da:	755d      	strb	r5, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80082dc:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val;
 80082de:	75dd      	strb	r5, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80082e0:	761d      	strb	r5, [r3, #24]
	*ptr++ = (BYTE)val;
 80082e2:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80082e4:	771d      	strb	r5, [r3, #28]
	*ptr++ = (BYTE)val;
 80082e6:	775d      	strb	r5, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80082e8:	779d      	strb	r5, [r3, #30]
	*ptr++ = (BYTE)val;
 80082ea:	77dd      	strb	r5, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80082ec:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 80082f0:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80082f2:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80082f4:	4648      	mov	r0, r9
				fs->wflag = 1;
 80082f6:	70fa      	strb	r2, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80082f8:	f7fe f888 	bl	800640c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f47f af10 	bne.w	8008122 <dir_register+0x69a>
 8008302:	3e01      	subs	r6, #1
 8008304:	f000 8109 	beq.w	800851a <dir_register+0xa92>
				res = move_window(fs, dp->sect);
 8008308:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800830c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830e:	4299      	cmp	r1, r3
 8008310:	d005      	beq.n	800831e <dir_register+0x896>
 8008312:	4638      	mov	r0, r7
 8008314:	f7fd ff36 	bl	8006184 <move_window.part.0>
				if (res != FR_OK) break;
 8008318:	2800      	cmp	r0, #0
 800831a:	f47f af02 	bne.w	8008122 <dir_register+0x69a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800831e:	b2f0      	uxtb	r0, r6
 8008320:	68f9      	ldr	r1, [r7, #12]
 8008322:	f8d9 3020 	ldr.w	r3, [r9, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008326:	f04f 0e0f 	mov.w	lr, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800832a:	1e42      	subs	r2, r0, #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800832c:	f883 e00b 	strb.w	lr, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008330:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008334:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 8008338:	731c      	strb	r4, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800833a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 800833e:	769c      	strb	r4, [r3, #26]
	*ptr++ = (BYTE)val;
 8008340:	76dc      	strb	r4, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008342:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8008346:	ea4f 0e42 	mov.w	lr, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 800834a:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 800834e:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8008352:	f883 a002 	strb.w	sl, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008356:	f1bc 0f00 	cmp.w	ip, #0
 800835a:	d0af      	beq.n	80082bc <dir_register+0x834>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800835c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8008360:	45d4      	cmp	ip, sl
 8008362:	d0ab      	beq.n	80082bc <dir_register+0x834>
 8008364:	3201      	adds	r2, #1
 8008366:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800836a:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800836c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8008370:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8008374:	f883 b004 	strb.w	fp, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008378:	f1bc 0f00 	cmp.w	ip, #0
 800837c:	d0a0      	beq.n	80082c0 <dir_register+0x838>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800837e:	45d4      	cmp	ip, sl
 8008380:	d09e      	beq.n	80082c0 <dir_register+0x838>
 8008382:	440a      	add	r2, r1
 8008384:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008388:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 800838c:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 8008390:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008394:	f1bc 0f00 	cmp.w	ip, #0
 8008398:	d094      	beq.n	80082c4 <dir_register+0x83c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800839a:	45d4      	cmp	ip, sl
 800839c:	d092      	beq.n	80082c4 <dir_register+0x83c>
 800839e:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80083a2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80083a6:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 80083aa:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80083ae:	f1bc 0f00 	cmp.w	ip, #0
 80083b2:	d089      	beq.n	80082c8 <dir_register+0x840>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80083b4:	45d4      	cmp	ip, sl
 80083b6:	d087      	beq.n	80082c8 <dir_register+0x840>
 80083b8:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80083bc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80083c0:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 80083c4:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80083c8:	f1bc 0f00 	cmp.w	ip, #0
 80083cc:	f43f af7e 	beq.w	80082cc <dir_register+0x844>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80083d0:	45d4      	cmp	ip, sl
 80083d2:	f43f af7b 	beq.w	80082cc <dir_register+0x844>
 80083d6:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80083da:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 80083de:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 80083e2:	f883 a00f 	strb.w	sl, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80083e6:	f1bc 0f00 	cmp.w	ip, #0
 80083ea:	f43f af71 	beq.w	80082d0 <dir_register+0x848>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80083ee:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80083f2:	45d4      	cmp	ip, sl
 80083f4:	f43f af6c 	beq.w	80082d0 <dir_register+0x848>
 80083f8:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80083fc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8008400:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 8008404:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008408:	f1bc 0f00 	cmp.w	ip, #0
 800840c:	f43f af62 	beq.w	80082d4 <dir_register+0x84c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008410:	45d4      	cmp	ip, sl
 8008412:	f43f af5f 	beq.w	80082d4 <dir_register+0x84c>
 8008416:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800841a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 800841e:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 8008422:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008426:	f1bc 0f00 	cmp.w	ip, #0
 800842a:	f43f af55 	beq.w	80082d8 <dir_register+0x850>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800842e:	45d4      	cmp	ip, sl
 8008430:	f43f af52 	beq.w	80082d8 <dir_register+0x850>
 8008434:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8008438:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 800843c:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 8008440:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008444:	f1bc 0f00 	cmp.w	ip, #0
 8008448:	f43f af48 	beq.w	80082dc <dir_register+0x854>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800844c:	45d4      	cmp	ip, sl
 800844e:	f43f af45 	beq.w	80082dc <dir_register+0x854>
 8008452:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8008456:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 800845a:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 800845e:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008462:	f1bc 0f00 	cmp.w	ip, #0
 8008466:	f43f af3b 	beq.w	80082e0 <dir_register+0x858>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800846a:	45d4      	cmp	ip, sl
 800846c:	f43f af38 	beq.w	80082e0 <dir_register+0x858>
 8008470:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8008474:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8008478:	f883 c018 	strb.w	ip, [r3, #24]
	*ptr++ = (BYTE)val;
 800847c:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008480:	f1bc 0f00 	cmp.w	ip, #0
 8008484:	f43f af2e 	beq.w	80082e4 <dir_register+0x85c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008488:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800848c:	45dc      	cmp	ip, fp
 800848e:	f43f af29 	beq.w	80082e4 <dir_register+0x85c>
 8008492:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008496:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 800849a:	f883 c01c 	strb.w	ip, [r3, #28]
	*ptr++ = (BYTE)val;
 800849e:	f883 a01d 	strb.w	sl, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084a2:	f1bc 0f00 	cmp.w	ip, #0
 80084a6:	f43f af1f 	beq.w	80082e8 <dir_register+0x860>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80084aa:	45dc      	cmp	ip, fp
 80084ac:	f43f af1c 	beq.w	80082e8 <dir_register+0x860>
 80084b0:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084b4:	f64f 7afd 	movw	sl, #65533	; 0xfffd
 80084b8:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80084bc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80084c0:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084c4:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 80084c6:	f883 b01f 	strb.w	fp, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084ca:	4552      	cmp	r2, sl
 80084cc:	f63f af0e 	bhi.w	80082ec <dir_register+0x864>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80084d0:	4471      	add	r1, lr
 80084d2:	8b4a      	ldrh	r2, [r1, #26]
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f47f af0b 	bne.w	80082f0 <dir_register+0x868>
 80084da:	e707      	b.n	80082ec <dir_register+0x864>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084dc:	2100      	movs	r1, #0
 80084de:	e603      	b.n	80080e8 <dir_register+0x660>
			*d++ = *s++;
 80084e0:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
 80084ea:	705a      	strb	r2, [r3, #1]
 80084ec:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
 80084f0:	709a      	strb	r2, [r3, #2]
 80084f2:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
 80084f6:	70da      	strb	r2, [r3, #3]
 80084f8:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 80084fc:	711a      	strb	r2, [r3, #4]
 80084fe:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8008502:	715a      	strb	r2, [r3, #5]
 8008504:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
 8008508:	719a      	strb	r2, [r3, #6]
 800850a:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
 800850e:	71da      	strb	r2, [r3, #7]
 8008510:	f7ff bb63 	b.w	8007bda <dir_register+0x152>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008514:	f04f 0b02 	mov.w	fp, #2
 8008518:	e5ab      	b.n	8008072 <dir_register+0x5ea>
 800851a:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
 800851e:	f7ff bb3a 	b.w	8007b96 <dir_register+0x10e>
 8008522:	4622      	mov	r2, r4
 8008524:	69f3      	ldr	r3, [r6, #28]
 8008526:	463d      	mov	r5, r7
 8008528:	f8dd b018 	ldr.w	fp, [sp, #24]
 800852c:	9f08      	ldr	r7, [sp, #32]
 800852e:	1a82      	subs	r2, r0, r2
 8008530:	9c07      	ldr	r4, [sp, #28]
 8008532:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8008534:	6372      	str	r2, [r6, #52]	; 0x34
 8008536:	e5cc      	b.n	80080d2 <dir_register+0x64a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008538:	f106 0538 	add.w	r5, r6, #56	; 0x38
		wsect = fs->winsect;	/* Current sector number */
 800853c:	6b72      	ldr	r2, [r6, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800853e:	2301      	movs	r3, #1
 8008540:	7870      	ldrb	r0, [r6, #1]
 8008542:	4629      	mov	r1, r5
 8008544:	9205      	str	r2, [sp, #20]
 8008546:	f7fd fd7b 	bl	8006040 <disk_write>
 800854a:	2800      	cmp	r0, #0
 800854c:	f47f adee 	bne.w	800812c <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008550:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	6a33      	ldr	r3, [r6, #32]
 8008556:	1a51      	subs	r1, r2, r1
			fs->wflag = 0;
 8008558:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800855a:	4299      	cmp	r1, r3
 800855c:	f4bf ae07 	bcs.w	800816e <dir_register+0x6e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008560:	78b1      	ldrb	r1, [r6, #2]
 8008562:	2901      	cmp	r1, #1
 8008564:	f67f ae03 	bls.w	800816e <dir_register+0x6e6>
 8008568:	e9cd 4705 	strd	r4, r7, [sp, #20]
 800856c:	462f      	mov	r7, r5
 800856e:	460c      	mov	r4, r1
 8008570:	4615      	mov	r5, r2
 8008572:	e000      	b.n	8008576 <dir_register+0xaee>
 8008574:	6a33      	ldr	r3, [r6, #32]
					wsect += fs->fsize;
 8008576:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008578:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800857a:	2301      	movs	r3, #1
 800857c:	4639      	mov	r1, r7
 800857e:	462a      	mov	r2, r5
 8008580:	7870      	ldrb	r0, [r6, #1]
 8008582:	f7fd fd5d 	bl	8006040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008586:	2c01      	cmp	r4, #1
 8008588:	d1f4      	bne.n	8008574 <dir_register+0xaec>
 800858a:	463d      	mov	r5, r7
 800858c:	9c05      	ldr	r4, [sp, #20]
 800858e:	9f06      	ldr	r7, [sp, #24]
 8008590:	e5ed      	b.n	800816e <dir_register+0x6e6>
 8008592:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008594:	2200      	movs	r2, #0
 8008596:	e5fe      	b.n	8008196 <dir_register+0x70e>

08008598 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008598:	b510      	push	{r4, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80085a0:	b181      	cbz	r1, 80085c4 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085a2:	780c      	ldrb	r4, [r1, #0]
 80085a4:	2c1f      	cmp	r4, #31
 80085a6:	d910      	bls.n	80085ca <f_mount+0x32>
 80085a8:	2c3a      	cmp	r4, #58	; 0x3a
 80085aa:	d00e      	beq.n	80085ca <f_mount+0x32>
 80085ac:	4608      	mov	r0, r1
 80085ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80085b2:	2b1f      	cmp	r3, #31
 80085b4:	d90b      	bls.n	80085ce <f_mount+0x36>
 80085b6:	2b3a      	cmp	r3, #58	; 0x3a
 80085b8:	d1f9      	bne.n	80085ae <f_mount+0x16>
			i = *tp++ - '0';
 80085ba:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085bc:	4288      	cmp	r0, r1
 80085be:	d101      	bne.n	80085c4 <f_mount+0x2c>
 80085c0:	2c30      	cmp	r4, #48	; 0x30
 80085c2:	d006      	beq.n	80085d2 <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80085c4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80085c6:	b002      	add	sp, #8
 80085c8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085ca:	4623      	mov	r3, r4
 80085cc:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80085ce:	2b3a      	cmp	r3, #58	; 0x3a
 80085d0:	d0f3      	beq.n	80085ba <f_mount+0x22>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085d2:	4913      	ldr	r1, [pc, #76]	; (8008620 <f_mount+0x88>)
 80085d4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 80085d6:	b143      	cbz	r3, 80085ea <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80085d8:	4812      	ldr	r0, [pc, #72]	; (8008624 <f_mount+0x8c>)
 80085da:	6804      	ldr	r4, [r0, #0]
 80085dc:	42a3      	cmp	r3, r4
 80085de:	d019      	beq.n	8008614 <f_mount+0x7c>
 80085e0:	6904      	ldr	r4, [r0, #16]
 80085e2:	429c      	cmp	r4, r3
 80085e4:	d013      	beq.n	800860e <f_mount+0x76>
		cfs->fs_type = 0;				/* Clear old fs object */
 80085e6:	2000      	movs	r0, #0
 80085e8:	7018      	strb	r0, [r3, #0]
	if (fs) {
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	b15b      	cbz	r3, 8008606 <f_mount+0x6e>
		fs->fs_type = 0;				/* Clear new fs object */
 80085ee:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085f0:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 80085f2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 80085f4:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085f6:	d1e6      	bne.n	80085c6 <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085f8:	4602      	mov	r2, r0
 80085fa:	a901      	add	r1, sp, #4
 80085fc:	4668      	mov	r0, sp
 80085fe:	f7fe fb5b 	bl	8006cb8 <find_volume>
}
 8008602:	b002      	add	sp, #8
 8008604:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008606:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8008608:	600b      	str	r3, [r1, #0]
}
 800860a:	b002      	add	sp, #8
 800860c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800860e:	2400      	movs	r4, #0
 8008610:	6104      	str	r4, [r0, #16]
 8008612:	e7e8      	b.n	80085e6 <f_mount+0x4e>
 8008614:	2400      	movs	r4, #0
 8008616:	6004      	str	r4, [r0, #0]
 8008618:	6904      	ldr	r4, [r0, #16]
 800861a:	429c      	cmp	r4, r3
 800861c:	d1e3      	bne.n	80085e6 <f_mount+0x4e>
 800861e:	e7f6      	b.n	800860e <f_mount+0x76>
 8008620:	24000594 	.word	0x24000594
 8008624:	24000598 	.word	0x24000598

08008628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8008630:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008632:	2800      	cmp	r0, #0
 8008634:	f000 80c7 	beq.w	80087c6 <f_open+0x19e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008638:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800863c:	4616      	mov	r6, r2
 800863e:	4604      	mov	r4, r0
 8008640:	a902      	add	r1, sp, #8
 8008642:	a801      	add	r0, sp, #4
 8008644:	463a      	mov	r2, r7
 8008646:	f7fe fb37 	bl	8006cb8 <find_volume>
	if (res == FR_OK) {
 800864a:	4605      	mov	r5, r0
 800864c:	b130      	cbz	r0, 800865c <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800864e:	2300      	movs	r3, #0
 8008650:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008652:	4628      	mov	r0, r5
 8008654:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800865c:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 800865e:	aa10      	add	r2, sp, #64	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 8008660:	9901      	ldr	r1, [sp, #4]
 8008662:	a803      	add	r0, sp, #12
		INIT_NAMBUF(fs);
 8008664:	60da      	str	r2, [r3, #12]
		dj.obj.fs = fs;
 8008666:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008668:	f7fe ff8e 	bl	8007588 <follow_path>
		if (res == FR_OK) {
 800866c:	bb00      	cbnz	r0, 80086b0 <f_open+0x88>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800866e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8008672:	2b00      	cmp	r3, #0
 8008674:	f2c0 80af 	blt.w	80087d6 <f_open+0x1ae>
		if (Files[i].fs) {	/* Existing entry */
 8008678:	f8df 83c4 	ldr.w	r8, [pc, #964]	; 8008a40 <f_open+0x418>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800867c:	f027 0c01 	bic.w	ip, r7, #1
				Files[i].clu == dp->obj.sclust &&
 8008680:	9805      	ldr	r0, [sp, #20]
		if (Files[i].fs) {	/* Existing entry */
 8008682:	f8d8 1000 	ldr.w	r1, [r8]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008686:	4662      	mov	r2, ip
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008688:	9b03      	ldr	r3, [sp, #12]
				Files[i].ofs == dp->dptr) break;
 800868a:	f8dd 9020 	ldr.w	r9, [sp, #32]
				Files[i].clu == dp->obj.sclust &&
 800868e:	9000      	str	r0, [sp, #0]
		if (Files[i].fs) {	/* Existing entry */
 8008690:	2900      	cmp	r1, #0
 8008692:	f000 816c 	beq.w	800896e <f_open+0x346>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008696:	428b      	cmp	r3, r1
 8008698:	f000 810c 	beq.w	80088b4 <f_open+0x28c>
		if (Files[i].fs) {	/* Existing entry */
 800869c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80086a0:	2900      	cmp	r1, #0
 80086a2:	f000 8126 	beq.w	80088f2 <f_open+0x2ca>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086a6:	4299      	cmp	r1, r3
 80086a8:	f000 810e 	beq.w	80088c8 <f_open+0x2a0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80086ac:	2512      	movs	r5, #18
 80086ae:	e7ce      	b.n	800864e <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80086b0:	f016 0f1c 	tst.w	r6, #28
 80086b4:	f000 808d 	beq.w	80087d2 <f_open+0x1aa>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80086b8:	2804      	cmp	r0, #4
 80086ba:	f040 808a 	bne.w	80087d2 <f_open+0x1aa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086be:	f8df 8380 	ldr.w	r8, [pc, #896]	; 8008a40 <f_open+0x418>
 80086c2:	f8d8 3000 	ldr.w	r3, [r8]
 80086c6:	b11b      	cbz	r3, 80086d0 <f_open+0xa8>
 80086c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ed      	bne.n	80086ac <f_open+0x84>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086d0:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086d2:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086d6:	f7ff f9d7 	bl	8007a88 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086da:	2800      	cmp	r0, #0
 80086dc:	d179      	bne.n	80087d2 <f_open+0x1aa>
				dw = GET_FATTIME();
 80086de:	f7fd fbaf 	bl	8005e40 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80086e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80086e8:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80086ec:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086f0:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 80086f4:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80086f6:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80086f8:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80086fc:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 80086fe:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008702:	9e02      	ldr	r6, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8008704:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008708:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800870a:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800870c:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800870e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008710:	f883 e00b 	strb.w	lr, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8008716:	7831      	ldrb	r1, [r6, #0]
	rv = rv << 8 | ptr[0];
 8008718:	f892 901b 	ldrb.w	r9, [r2, #27]
 800871c:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800871e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008720:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008724:	d105      	bne.n	8008732 <f_open+0x10a>
	rv = rv << 8 | ptr[0];
 8008726:	7d51      	ldrb	r1, [r2, #21]
 8008728:	7d13      	ldrb	r3, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800872a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800872e:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008732:	2300      	movs	r3, #0
 8008734:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8008736:	76d3      	strb	r3, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8008738:	7831      	ldrb	r1, [r6, #0]
 800873a:	2903      	cmp	r1, #3
 800873c:	d101      	bne.n	8008742 <f_open+0x11a>
	*ptr++ = (BYTE)val; val >>= 8;
 800873e:	7513      	strb	r3, [r2, #20]
	*ptr++ = (BYTE)val;
 8008740:	7553      	strb	r3, [r2, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 8008742:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008744:	2200      	movs	r2, #0
					fs->wflag = 1;
 8008746:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8008748:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 800874a:	70f3      	strb	r3, [r6, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	d016      	beq.n	8008780 <f_open+0x158>
						dw = fs->winsect;
 8008752:	6b73      	ldr	r3, [r6, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8008754:	4649      	mov	r1, r9
 8008756:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8008758:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800875a:	f7ff f8ed 	bl	8007938 <remove_chain>
						if (res == FR_OK) {
 800875e:	2800      	cmp	r0, #0
 8008760:	d137      	bne.n	80087d2 <f_open+0x1aa>
							res = move_window(fs, dw);
 8008762:	9e02      	ldr	r6, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008764:	9b00      	ldr	r3, [sp, #0]
 8008766:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8008768:	4293      	cmp	r3, r2
 800876a:	f000 8156 	beq.w	8008a1a <f_open+0x3f2>
 800876e:	4619      	mov	r1, r3
 8008770:	4630      	mov	r0, r6
 8008772:	f7fd fd07 	bl	8006184 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008776:	f109 33ff 	add.w	r3, r9, #4294967295
 800877a:	9e02      	ldr	r6, [sp, #8]
 800877c:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 800877e:	bb40      	cbnz	r0, 80087d2 <f_open+0x1aa>
 8008780:	9a05      	ldr	r2, [sp, #20]
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008788:	9200      	str	r2, [sp, #0]
				mode |= FA_MODIFIED;
 800878a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800878e:	f027 0201 	bic.w	r2, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 8008792:	f8d8 e000 	ldr.w	lr, [r8]
			fp->dir_ptr = dj.dir;
 8008796:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800879a:	6b71      	ldr	r1, [r6, #52]	; 0x34
		if (Files[i].fs == dp->obj.fs &&
 800879c:	4573      	cmp	r3, lr
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800879e:	e9c4 1c09 	strd	r1, ip, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 80087a2:	f000 80cd 	beq.w	8008940 <f_open+0x318>
 80087a6:	f8d8 a010 	ldr.w	sl, [r8, #16]
 80087aa:	4553      	cmp	r3, sl
 80087ac:	d015      	beq.n	80087da <f_open+0x1b2>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087ae:	f1be 0f00 	cmp.w	lr, #0
 80087b2:	f000 80ed 	beq.w	8008990 <f_open+0x368>
 80087b6:	f1ba 0f00 	cmp.w	sl, #0
 80087ba:	f000 8129 	beq.w	8008a10 <f_open+0x3e8>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087be:	2300      	movs	r3, #0
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087c0:	2502      	movs	r5, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087c2:	6123      	str	r3, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087c4:	e743      	b.n	800864e <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 80087c6:	2509      	movs	r5, #9
}
 80087c8:	4628      	mov	r0, r5
 80087ca:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	4605      	mov	r5, r0
 80087d4:	e73b      	b.n	800864e <f_open+0x26>
				res = FR_INVALID_NAME;
 80087d6:	2506      	movs	r5, #6
 80087d8:	e739      	b.n	800864e <f_open+0x26>
		if (Files[i].fs == dp->obj.fs &&
 80087da:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80087de:	9900      	ldr	r1, [sp, #0]
 80087e0:	4288      	cmp	r0, r1
 80087e2:	d1e4      	bne.n	80087ae <f_open+0x186>
			Files[i].clu == dp->obj.sclust &&
 80087e4:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80087e8:	4581      	cmp	r9, r0
 80087ea:	d1e0      	bne.n	80087ae <f_open+0x186>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087ec:	f04f 0e01 	mov.w	lr, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087f0:	eb08 130e 	add.w	r3, r8, lr, lsl #4
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f040 8098 	bne.w	800892a <f_open+0x302>
 80087fa:	8999      	ldrh	r1, [r3, #12]
 80087fc:	f10e 0a01 	add.w	sl, lr, #1
 8008800:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8008804:	3101      	adds	r1, #1
 8008806:	b289      	uxth	r1, r1
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008808:	f8c4 a010 	str.w	sl, [r4, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800880c:	4442      	add	r2, r8
	if (fs->fs_type == FS_FAT32) {
 800880e:	7833      	ldrb	r3, [r6, #0]
	rv = rv << 8 | ptr[0];
 8008810:	f89c 001b 	ldrb.w	r0, [ip, #27]
 8008814:	f89c 801a 	ldrb.w	r8, [ip, #26]
	if (fs->fs_type == FS_FAT32) {
 8008818:	2b03      	cmp	r3, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800881a:	8191      	strh	r1, [r2, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 800881c:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008820:	d107      	bne.n	8008832 <f_open+0x20a>
	rv = rv << 8 | ptr[0];
 8008822:	f89c 2015 	ldrb.w	r2, [ip, #21]
 8008826:	f89c 3014 	ldrb.w	r3, [ip, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800882a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800882e:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008832:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008836:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[2];
 8008838:	f8bc 201e 	ldrh.w	r2, [ip, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800883c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 8008840:	f89c 301d 	ldrb.w	r3, [ip, #29]
	rv = rv << 8 | ptr[0];
 8008844:	f89c 901c 	ldrb.w	r9, [ip, #28]
 8008848:	4650      	mov	r0, sl
	rv = rv << 8 | ptr[1];
 800884a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			fp->obj.id = fs->id;
 800884e:	88f2      	ldrh	r2, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008850:	6026      	str	r6, [r4, #0]
	rv = rv << 8 | ptr[0];
 8008852:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			fp->obj.id = fs->id;
 8008856:	80a2      	strh	r2, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008858:	62e1      	str	r1, [r4, #44]	; 0x2c
 800885a:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
 800885e:	7561      	strb	r1, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008860:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 8008864:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008866:	61a1      	str	r1, [r4, #24]
			fp->flag = mode;		/* Set file access mode */
 8008868:	7527      	strb	r7, [r4, #20]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800886a:	f000 fe71 	bl	8009550 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800886e:	06b8      	lsls	r0, r7, #26
 8008870:	f57f aeef 	bpl.w	8008652 <f_open+0x2a>
 8008874:	f1b9 0f00 	cmp.w	r9, #0
 8008878:	f43f aeeb 	beq.w	8008652 <f_open+0x2a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800887c:	8973      	ldrh	r3, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800887e:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008882:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008886:	ea4f 2643 	mov.w	r6, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800888a:	d807      	bhi.n	800889c <f_open+0x274>
 800888c:	e09d      	b.n	80089ca <f_open+0x3a2>
 800888e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008892:	f000 80cb 	beq.w	8008a2c <f_open+0x404>
 8008896:	454e      	cmp	r6, r9
 8008898:	f080 80c8 	bcs.w	8008a2c <f_open+0x404>
					clst = get_fat(&fp->obj, clst);
 800889c:	4641      	mov	r1, r8
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	f7fd fd48 	bl	8006334 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80088a4:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088a6:	eba9 0906 	sub.w	r9, r9, r6
					clst = get_fat(&fp->obj, clst);
 80088aa:	4680      	mov	r8, r0
					if (clst <= 1) res = FR_INT_ERR;
 80088ac:	d8ef      	bhi.n	800888e <f_open+0x266>
				fp->clust = clst;
 80088ae:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 80088b0:	2502      	movs	r5, #2
 80088b2:	e6cc      	b.n	800864e <f_open+0x26>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088b8:	4288      	cmp	r0, r1
 80088ba:	d07f      	beq.n	80089bc <f_open+0x394>
		if (Files[i].fs) {	/* Existing entry */
 80088bc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80088c0:	b1b9      	cbz	r1, 80088f2 <f_open+0x2ca>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088c2:	428b      	cmp	r3, r1
 80088c4:	f47f aef2 	bne.w	80086ac <f_open+0x84>
 80088c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80088cc:	9800      	ldr	r0, [sp, #0]
 80088ce:	4288      	cmp	r0, r1
 80088d0:	f47f aeec 	bne.w	80086ac <f_open+0x84>
				Files[i].clu == dp->obj.sclust &&
 80088d4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80088d8:	4549      	cmp	r1, r9
 80088da:	f47f aee7 	bne.w	80086ac <f_open+0x84>
 80088de:	2101      	movs	r1, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088e0:	f1bc 0f00 	cmp.w	ip, #0
 80088e4:	d13a      	bne.n	800895c <f_open+0x334>
 80088e6:	eb08 1101 	add.w	r1, r8, r1, lsl #4
 80088ea:	8989      	ldrh	r1, [r1, #12]
 80088ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80088f0:	d034      	beq.n	800895c <f_open+0x334>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088f2:	f016 0f1c 	tst.w	r6, #28
 80088f6:	d008      	beq.n	800890a <f_open+0x2e2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088f8:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80088fc:	f011 0f11 	tst.w	r1, #17
 8008900:	d133      	bne.n	800896a <f_open+0x342>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008902:	0771      	lsls	r1, r6, #29
 8008904:	d52c      	bpl.n	8008960 <f_open+0x338>
 8008906:	2508      	movs	r5, #8
 8008908:	e6a1      	b.n	800864e <f_open+0x26>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800890a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800890e:	06d1      	lsls	r1, r2, #27
 8008910:	d43c      	bmi.n	800898c <f_open+0x364>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008912:	07b1      	lsls	r1, r6, #30
 8008914:	d501      	bpl.n	800891a <f_open+0x2f2>
 8008916:	07d2      	lsls	r2, r2, #31
 8008918:	d427      	bmi.n	800896a <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800891a:	f006 0208 	and.w	r2, r6, #8
 800891e:	9e02      	ldr	r6, [sp, #8]
 8008920:	2a00      	cmp	r2, #0
 8008922:	f47f af32 	bne.w	800878a <f_open+0x162>
 8008926:	4662      	mov	r2, ip
 8008928:	e733      	b.n	8008792 <f_open+0x16a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800892a:	899b      	ldrh	r3, [r3, #12]
 800892c:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8008930:	2b00      	cmp	r3, #0
 8008932:	f47f af44 	bne.w	80087be <f_open+0x196>
 8008936:	f10e 0a01 	add.w	sl, lr, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800893a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800893e:	e763      	b.n	8008808 <f_open+0x1e0>
		if (Files[i].fs == dp->obj.fs &&
 8008940:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008944:	9800      	ldr	r0, [sp, #0]
 8008946:	4281      	cmp	r1, r0
 8008948:	f47f af2d 	bne.w	80087a6 <f_open+0x17e>
			Files[i].clu == dp->obj.sclust &&
 800894c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8008950:	4589      	cmp	r9, r1
 8008952:	f47f af28 	bne.w	80087a6 <f_open+0x17e>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008956:	f04f 0e00 	mov.w	lr, #0
 800895a:	e749      	b.n	80087f0 <f_open+0x1c8>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800895c:	2510      	movs	r5, #16
 800895e:	e676      	b.n	800864e <f_open+0x26>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008960:	0730      	lsls	r0, r6, #28
 8008962:	f53f aebc 	bmi.w	80086de <f_open+0xb6>
 8008966:	9e02      	ldr	r6, [sp, #8]
 8008968:	e713      	b.n	8008792 <f_open+0x16a>
						res = FR_DENIED;
 800896a:	2507      	movs	r5, #7
 800896c:	e66f      	b.n	800864e <f_open+0x26>
		if (Files[i].fs) {	/* Existing entry */
 800896e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008972:	2900      	cmp	r1, #0
 8008974:	d0bd      	beq.n	80088f2 <f_open+0x2ca>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008976:	428b      	cmp	r3, r1
 8008978:	d1bb      	bne.n	80088f2 <f_open+0x2ca>
 800897a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800897e:	4281      	cmp	r1, r0
 8008980:	d1b7      	bne.n	80088f2 <f_open+0x2ca>
				Files[i].clu == dp->obj.sclust &&
 8008982:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008986:	4549      	cmp	r1, r9
 8008988:	d1b3      	bne.n	80088f2 <f_open+0x2ca>
 800898a:	e7a8      	b.n	80088de <f_open+0x2b6>
					res = FR_NO_FILE;
 800898c:	2504      	movs	r5, #4
 800898e:	e65e      	b.n	800864e <f_open+0x26>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008990:	f04f 0a01 	mov.w	sl, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008994:	2a00      	cmp	r2, #0
		Files[i].fs = dp->obj.fs;
 8008996:	ea4f 120e 	mov.w	r2, lr, lsl #4
		Files[i].ctr = 0;
 800899a:	f04f 0b00 	mov.w	fp, #0
		Files[i].fs = dp->obj.fs;
 800899e:	eb08 1e0e 	add.w	lr, r8, lr, lsl #4
 80089a2:	f848 3002 	str.w	r3, [r8, r2]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80089a6:	bf18      	it	ne
 80089a8:	f44f 7180 	movne.w	r1, #256	; 0x100
		Files[i].clu = dp->obj.sclust;
 80089ac:	9b00      	ldr	r3, [sp, #0]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80089ae:	bf08      	it	eq
 80089b0:	2101      	moveq	r1, #1
		Files[i].ctr = 0;
 80089b2:	f8ae b00c 	strh.w	fp, [lr, #12]
		Files[i].ofs = dp->dptr;
 80089b6:	e9ce 3901 	strd	r3, r9, [lr, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80089ba:	e725      	b.n	8008808 <f_open+0x1e0>
				Files[i].clu == dp->obj.sclust &&
 80089bc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80089c0:	4589      	cmp	r9, r1
 80089c2:	f47f ae6b 	bne.w	800869c <f_open+0x74>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089c6:	4629      	mov	r1, r5
 80089c8:	e78a      	b.n	80088e0 <f_open+0x2b8>
				fp->clust = clst;
 80089ca:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089ce:	f3c9 0308 	ubfx	r3, r9, #0, #9
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f43f ae3d 	beq.w	8008652 <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089d8:	9802      	ldr	r0, [sp, #8]
	clst -= 2;
 80089da:	f1a8 0802 	sub.w	r8, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089de:	69c3      	ldr	r3, [r0, #28]
 80089e0:	3b02      	subs	r3, #2
 80089e2:	4598      	cmp	r8, r3
 80089e4:	f4bf af64 	bcs.w	80088b0 <f_open+0x288>
	return clst * fs->csize + fs->database;
 80089e8:	8943      	ldrh	r3, [r0, #10]
 80089ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80089ec:	fb08 2203 	mla	r2, r8, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089f0:	2a00      	cmp	r2, #0
 80089f2:	f43f af5d 	beq.w	80088b0 <f_open+0x288>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089f6:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089fa:	4651      	mov	r1, sl
 80089fc:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089fe:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a00:	7840      	ldrb	r0, [r0, #1]
 8008a02:	f7fd fb0f 	bl	8006024 <disk_read>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f43f ae23 	beq.w	8008652 <f_open+0x2a>
 8008a0c:	2501      	movs	r5, #1
 8008a0e:	e61e      	b.n	800864e <f_open+0x26>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a10:	f04f 0a02 	mov.w	sl, #2
 8008a14:	f04f 0e01 	mov.w	lr, #1
 8008a18:	e7bc      	b.n	8008994 <f_open+0x36c>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a1a:	f109 32ff 	add.w	r2, r9, #4294967295
 8008a1e:	9905      	ldr	r1, [sp, #20]
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a26:	9100      	str	r1, [sp, #0]
 8008a28:	6132      	str	r2, [r6, #16]
		if (res == FR_OK) {
 8008a2a:	e6ae      	b.n	800878a <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a2c:	f1b8 3fff 	cmp.w	r8, #4294967295
				fp->clust = clst;
 8008a30:	f8c4 801c 	str.w	r8, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a3a:	d1c8      	bne.n	80089ce <f_open+0x3a6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	e606      	b.n	800864e <f_open+0x26>
 8008a40:	24000598 	.word	0x24000598

08008a44 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8008a4a:	2300      	movs	r3, #0
{
 8008a4c:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8008a4e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a50:	b150      	cbz	r0, 8008a68 <f_read+0x24>
 8008a52:	6803      	ldr	r3, [r0, #0]
 8008a54:	4604      	mov	r4, r0
 8008a56:	b13b      	cbz	r3, 8008a68 <f_read+0x24>
 8008a58:	4690      	mov	r8, r2
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	b122      	cbz	r2, 8008a68 <f_read+0x24>
 8008a5e:	460e      	mov	r6, r1
 8008a60:	88da      	ldrh	r2, [r3, #6]
 8008a62:	8881      	ldrh	r1, [r0, #4]
 8008a64:	4291      	cmp	r1, r2
 8008a66:	d005      	beq.n	8008a74 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8008a68:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	b005      	add	sp, #20
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a74:	7858      	ldrb	r0, [r3, #1]
 8008a76:	f7fd fab7 	bl	8005fe8 <disk_status>
 8008a7a:	07c2      	lsls	r2, r0, #31
 8008a7c:	d4f4      	bmi.n	8008a68 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a7e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008a82:	f1b9 0f00 	cmp.w	r9, #0
 8008a86:	d1f1      	bne.n	8008a6c <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a88:	7d23      	ldrb	r3, [r4, #20]
 8008a8a:	f013 0301 	ands.w	r3, r3, #1
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	f000 80d3 	beq.w	8008c3a <f_read+0x1f6>
	remain = fp->obj.objsize - fp->fptr;
 8008a94:	69a1      	ldr	r1, [r4, #24]
 8008a96:	68e2      	ldr	r2, [r4, #12]
 8008a98:	1a52      	subs	r2, r2, r1
 8008a9a:	4590      	cmp	r8, r2
 8008a9c:	bf28      	it	cs
 8008a9e:	4690      	movcs	r8, r2
	for ( ;  btr;								/* Repeat until all data read */
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	d0e2      	beq.n	8008a6c <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008aa6:	46a3      	mov	fp, r4
 8008aa8:	f104 0334 	add.w	r3, r4, #52	; 0x34
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008aac:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ab0:	f85b ab30 	ldr.w	sl, [fp], #48
 8008ab4:	9302      	str	r3, [sp, #8]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	d13f      	bne.n	8008b3a <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008aba:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8008abe:	0a4b      	lsrs	r3, r1, #9
 8008ac0:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8008ac2:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8008ac6:	d06a      	beq.n	8008b9e <f_read+0x15a>
 8008ac8:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008aca:	f8da 301c 	ldr.w	r3, [sl, #28]
	clst -= 2;
 8008ace:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ad0:	3b02      	subs	r3, #2
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	d270      	bcs.n	8008bb8 <f_read+0x174>
	return clst * fs->csize + fs->database;
 8008ad6:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8008ada:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8008ade:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	d068      	beq.n	8008bb8 <f_read+0x174>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008ae6:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
			sect += csect;
 8008aea:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008aec:	d36c      	bcc.n	8008bc8 <f_read+0x184>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008aee:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008af2:	ea4f 2358 	mov.w	r3, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008af6:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008af8:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 8008afc:	bf88      	it	hi
 8008afe:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b00:	462a      	mov	r2, r5
 8008b02:	4631      	mov	r1, r6
 8008b04:	9303      	str	r3, [sp, #12]
 8008b06:	f7fd fa8d 	bl	8006024 <disk_read>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f040 8084 	bne.w	8008c18 <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b10:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	f2c0 80a6 	blt.w	8008c68 <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b1c:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b1e:	69a1      	ldr	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8008b20:	ebb8 0803 	subs.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	441e      	add	r6, r3
 8008b28:	4419      	add	r1, r3
 8008b2a:	441a      	add	r2, r3
 8008b2c:	61a1      	str	r1, [r4, #24]
 8008b2e:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8008b30:	d09c      	beq.n	8008a6c <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008b32:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	d0bf      	beq.n	8008aba <f_read+0x76>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b3a:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b3e:	1d10      	adds	r0, r2, #4
 8008b40:	1d31      	adds	r1, r6, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b42:	445a      	add	r2, fp
 8008b44:	4543      	cmp	r3, r8
 8008b46:	4458      	add	r0, fp
 8008b48:	bf28      	it	cs
 8008b4a:	4643      	movcs	r3, r8
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	bf38      	it	cc
 8008b50:	4286      	cmpcc	r6, r0
 8008b52:	f103 3cff 	add.w	ip, r3, #4294967295
 8008b56:	d367      	bcc.n	8008c28 <f_read+0x1e4>
 8008b58:	f1bc 0f07 	cmp.w	ip, #7
 8008b5c:	d964      	bls.n	8008c28 <f_read+0x1e4>
 8008b5e:	f023 0003 	bic.w	r0, r3, #3
 8008b62:	4631      	mov	r1, r6
 8008b64:	4615      	mov	r5, r2
 8008b66:	4430      	add	r0, r6
			*d++ = *s++;
 8008b68:	f855 eb04 	ldr.w	lr, [r5], #4
 8008b6c:	f841 eb04 	str.w	lr, [r1], #4
		} while (--cnt);
 8008b70:	4288      	cmp	r0, r1
 8008b72:	d1f9      	bne.n	8008b68 <f_read+0x124>
 8008b74:	f023 0103 	bic.w	r1, r3, #3
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	eb06 0001 	add.w	r0, r6, r1
 8008b7e:	eb02 0501 	add.w	r5, r2, r1
 8008b82:	d0cc      	beq.n	8008b1e <f_read+0xda>
			*d++ = *s++;
 8008b84:	5c52      	ldrb	r2, [r2, r1]
		} while (--cnt);
 8008b86:	ebbc 0c01 	subs.w	ip, ip, r1
			*d++ = *s++;
 8008b8a:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 8008b8c:	d0c7      	beq.n	8008b1e <f_read+0xda>
			*d++ = *s++;
 8008b8e:	786a      	ldrb	r2, [r5, #1]
		} while (--cnt);
 8008b90:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8008b94:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 8008b96:	d0c2      	beq.n	8008b1e <f_read+0xda>
			*d++ = *s++;
 8008b98:	78aa      	ldrb	r2, [r5, #2]
 8008b9a:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 8008b9c:	e7bf      	b.n	8008b1e <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008b9e:	bb39      	cbnz	r1, 8008bf0 <f_read+0x1ac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ba0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ba2:	2801      	cmp	r0, #1
 8008ba4:	d908      	bls.n	8008bb8 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	d036      	beq.n	8008c18 <f_read+0x1d4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008baa:	f8da 301c 	ldr.w	r3, [sl, #28]
				fp->clust = clst;				/* Update current cluster */
 8008bae:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8008bb0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bb2:	3b02      	subs	r3, #2
 8008bb4:	4298      	cmp	r0, r3
 8008bb6:	d38e      	bcc.n	8008ad6 <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008bb8:	f04f 0902 	mov.w	r9, #2
}
 8008bbc:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008bbe:	f884 9015 	strb.w	r9, [r4, #21]
}
 8008bc2:	b005      	add	sp, #20
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008bc8:	6a22      	ldr	r2, [r4, #32]
 8008bca:	42aa      	cmp	r2, r5
 8008bcc:	d00b      	beq.n	8008be6 <f_read+0x1a2>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008bce:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	db3b      	blt.n	8008c4e <f_read+0x20a>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4659      	mov	r1, fp
 8008bdc:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008be0:	f7fd fa20 	bl	8006024 <disk_read>
 8008be4:	b9c0      	cbnz	r0, 8008c18 <f_read+0x1d4>
			fp->sect = sect;
 8008be6:	69a2      	ldr	r2, [r4, #24]
 8008be8:	6225      	str	r5, [r4, #32]
 8008bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bee:	e7a4      	b.n	8008b3a <f_read+0xf6>
					if (fp->cltbl) {
 8008bf0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008bf2:	b329      	cbz	r1, 8008c40 <f_read+0x1fc>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008bf4:	6825      	ldr	r5, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008bf6:	1d08      	adds	r0, r1, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bf8:	6849      	ldr	r1, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008bfa:	896d      	ldrh	r5, [r5, #10]
 8008bfc:	fbb3 f3f5 	udiv	r3, r3, r5
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c00:	b929      	cbnz	r1, 8008c0e <f_read+0x1ca>
 8008c02:	e7d9      	b.n	8008bb8 <f_read+0x174>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c04:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c06:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d0d4      	beq.n	8008bb8 <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	d9f8      	bls.n	8008c04 <f_read+0x1c0>
	return cl + *tbl;	/* Return the cluster number */
 8008c12:	6840      	ldr	r0, [r0, #4]
 8008c14:	4418      	add	r0, r3
 8008c16:	e7c4      	b.n	8008ba2 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c1c:	2301      	movs	r3, #1
}
 8008c1e:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c20:	7563      	strb	r3, [r4, #21]
}
 8008c22:	b005      	add	sp, #20
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	1e71      	subs	r1, r6, #1
 8008c2a:	18d5      	adds	r5, r2, r3
			*d++ = *s++;
 8008c2c:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8008c30:	42aa      	cmp	r2, r5
			*d++ = *s++;
 8008c32:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 8008c36:	d1f9      	bne.n	8008c2c <f_read+0x1e8>
 8008c38:	e771      	b.n	8008b1e <f_read+0xda>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008c3a:	f04f 0907 	mov.w	r9, #7
 8008c3e:	e715      	b.n	8008a6c <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008c40:	69e1      	ldr	r1, [r4, #28]
 8008c42:	6820      	ldr	r0, [r4, #0]
 8008c44:	9203      	str	r2, [sp, #12]
 8008c46:	f7fd fb75 	bl	8006334 <get_fat.isra.0>
 8008c4a:	9a03      	ldr	r2, [sp, #12]
 8008c4c:	e7a9      	b.n	8008ba2 <f_read+0x15e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4659      	mov	r1, fp
 8008c52:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008c56:	f7fd f9f3 	bl	8006040 <disk_write>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d1dc      	bne.n	8008c18 <f_read+0x1d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c5e:	7d23      	ldrb	r3, [r4, #20]
 8008c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c64:	7523      	strb	r3, [r4, #20]
 8008c66:	e7b6      	b.n	8008bd6 <f_read+0x192>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008c68:	6a22      	ldr	r2, [r4, #32]
 8008c6a:	1b55      	subs	r5, r2, r5
 8008c6c:	429d      	cmp	r5, r3
 8008c6e:	f4bf af55 	bcs.w	8008b1c <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008c72:	eb06 2045 	add.w	r0, r6, r5, lsl #9
 8008c76:	4659      	mov	r1, fp
 8008c78:	4602      	mov	r2, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c7a:	3004      	adds	r0, #4
 8008c7c:	4583      	cmp	fp, r0
 8008c7e:	d202      	bcs.n	8008c86 <f_read+0x242>
 8008c80:	9802      	ldr	r0, [sp, #8]
 8008c82:	4282      	cmp	r2, r0
 8008c84:	d309      	bcc.n	8008c9a <f_read+0x256>
 8008c86:	4659      	mov	r1, fp
 8008c88:	f502 7500 	add.w	r5, r2, #512	; 0x200
			*d++ = *s++;
 8008c8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008c90:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8008c94:	42aa      	cmp	r2, r5
 8008c96:	d1f9      	bne.n	8008c8c <f_read+0x248>
 8008c98:	e740      	b.n	8008b1c <f_read+0xd8>
 8008c9a:	3a01      	subs	r2, #1
 8008c9c:	f504 750c 	add.w	r5, r4, #560	; 0x230
			*d++ = *s++;
 8008ca0:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8008ca4:	428d      	cmp	r5, r1
			*d++ = *s++;
 8008ca6:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8008caa:	d1f9      	bne.n	8008ca0 <f_read+0x25c>
 8008cac:	e736      	b.n	8008b1c <f_read+0xd8>
 8008cae:	bf00      	nop

08008cb0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008cb0:	b158      	cbz	r0, 8008cca <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008cb4:	6803      	ldr	r3, [r0, #0]
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	b12b      	cbz	r3, 8008cc6 <f_close+0x16>
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	b11a      	cbz	r2, 8008cc6 <f_close+0x16>
 8008cbe:	8881      	ldrh	r1, [r0, #4]
 8008cc0:	88da      	ldrh	r2, [r3, #6]
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	d003      	beq.n	8008cce <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8008cc6:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8008cca:	2009      	movs	r0, #9
}
 8008ccc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008cce:	7858      	ldrb	r0, [r3, #1]
 8008cd0:	f7fd f98a 	bl	8005fe8 <disk_status>
 8008cd4:	07c1      	lsls	r1, r0, #31
 8008cd6:	d4f6      	bmi.n	8008cc6 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008cd8:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008cda:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008cdc:	065a      	lsls	r2, r3, #25
 8008cde:	d53d      	bpl.n	8008d5c <f_close+0xac>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ce0:	061b      	lsls	r3, r3, #24
 8008ce2:	d45e      	bmi.n	8008da2 <f_close+0xf2>
			tm = GET_FATTIME();				/* Modified time */
 8008ce4:	f7fd f8ac 	bl	8005e40 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8008ce8:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008cea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			tm = GET_FATTIME();				/* Modified time */
 8008cec:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	d004      	beq.n	8008cfc <f_close+0x4c>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f7fd fa46 	bl	8006184 <move_window.part.0>
				if (res == FR_OK) {
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d1e5      	bne.n	8008cc8 <f_close+0x18>
					dir = fp->dir_ptr;
 8008cfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cfe:	7acb      	ldrb	r3, [r1, #11]
 8008d00:	f043 0320 	orr.w	r3, r3, #32
 8008d04:	72cb      	strb	r3, [r1, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	6822      	ldr	r2, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d0a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008d0e:	768b      	strb	r3, [r1, #26]
	*ptr++ = (BYTE)val;
 8008d10:	76c8      	strb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	2a03      	cmp	r2, #3
 8008d16:	d103      	bne.n	8008d20 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d18:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008d1a:	0a1a      	lsrs	r2, r3, #8
 8008d1c:	750b      	strb	r3, [r1, #20]
	*ptr++ = (BYTE)val;
 8008d1e:	754a      	strb	r2, [r1, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d20:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d22:	0a37      	lsrs	r7, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008d24:	0c32      	lsrs	r2, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008d26:	758e      	strb	r6, [r1, #22]
 8008d28:	0a18      	lsrs	r0, r3, #8
 8008d2a:	770b      	strb	r3, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d2c:	75cf      	strb	r7, [r1, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d2e:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008d30:	7748      	strb	r0, [r1, #29]
					fs->wflag = 1;
 8008d32:	2701      	movs	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8008d34:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008d36:	760a      	strb	r2, [r1, #24]
 8008d38:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008d3a:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8008d3c:	7788      	strb	r0, [r1, #30]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d3e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 8008d40:	77cb      	strb	r3, [r1, #31]
 8008d42:	764e      	strb	r6, [r1, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d44:	748a      	strb	r2, [r1, #18]
	*ptr++ = (BYTE)val;
 8008d46:	74ca      	strb	r2, [r1, #19]
					fs->wflag = 1;
 8008d48:	70ef      	strb	r7, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d4a:	f7fd fe13 	bl	8006974 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d4e:	7d23      	ldrb	r3, [r4, #20]
 8008d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d54:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1b6      	bne.n	8008cc8 <f_close+0x18>
 8008d5a:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	d0b2      	beq.n	8008cc6 <f_close+0x16>
 8008d60:	782b      	ldrb	r3, [r5, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0af      	beq.n	8008cc6 <f_close+0x16>
 8008d66:	88a2      	ldrh	r2, [r4, #4]
 8008d68:	88eb      	ldrh	r3, [r5, #6]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d1ab      	bne.n	8008cc6 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d6e:	7868      	ldrb	r0, [r5, #1]
 8008d70:	f7fd f93a 	bl	8005fe8 <disk_status>
 8008d74:	f010 0001 	ands.w	r0, r0, #1
 8008d78:	d1a5      	bne.n	8008cc6 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d81c      	bhi.n	8008dbc <f_close+0x10c>
		n = Files[i].ctr;
 8008d82:	4912      	ldr	r1, [pc, #72]	; (8008dcc <f_close+0x11c>)
 8008d84:	011d      	lsls	r5, r3, #4
 8008d86:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8008d8a:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008d90:	d016      	beq.n	8008dc0 <f_close+0x110>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d92:	b1b2      	cbz	r2, 8008dc2 <f_close+0x112>
 8008d94:	3a01      	subs	r2, #1
 8008d96:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8008d98:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d9a:	b192      	cbz	r2, 8008dc2 <f_close+0x112>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6023      	str	r3, [r4, #0]
}
 8008da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008da2:	2301      	movs	r3, #1
 8008da4:	6a22      	ldr	r2, [r4, #32]
 8008da6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008daa:	7868      	ldrb	r0, [r5, #1]
 8008dac:	f7fd f948 	bl	8006040 <disk_write>
 8008db0:	b950      	cbnz	r0, 8008dc8 <f_close+0x118>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008db2:	7d23      	ldrb	r3, [r4, #20]
 8008db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db8:	7523      	strb	r3, [r4, #20]
 8008dba:	e793      	b.n	8008ce4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008dbc:	2002      	movs	r0, #2
}
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Files[i].ctr = n;
 8008dc0:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8008dc6:	e7e9      	b.n	8008d9c <f_close+0xec>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dc8:	2001      	movs	r0, #1
}
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dcc:	24000598 	.word	0x24000598

08008dd0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008dd0:	b530      	push	{r4, r5, lr}
 8008dd2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008dd6:	2200      	movs	r2, #0
{
 8008dd8:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, 0);
 8008dda:	a902      	add	r1, sp, #8
 8008ddc:	a801      	add	r0, sp, #4
 8008dde:	f7fd ff6b 	bl	8006cb8 <find_volume>
	if (res == FR_OK) {
 8008de2:	b110      	cbz	r0, 8008dea <f_chdir+0x1a>
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(fs, res);
}
 8008de4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008de8:	bd30      	pop	{r4, r5, pc}
		dj.obj.fs = fs;
 8008dea:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 8008dec:	aa10      	add	r2, sp, #64	; 0x40
		res = follow_path(&dj, path);		/* Follow the path */
 8008dee:	9901      	ldr	r1, [sp, #4]
 8008df0:	a803      	add	r0, sp, #12
		INIT_NAMBUF(fs);
 8008df2:	60da      	str	r2, [r3, #12]
		dj.obj.fs = fs;
 8008df4:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the path */
 8008df6:	f7fe fbc7 	bl	8007588 <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 8008dfa:	b990      	cbnz	r0, 8008e22 <f_chdir+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008dfc:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db14      	blt.n	8008e2e <f_chdir+0x5e>
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8008e04:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8008e08:	06db      	lsls	r3, r3, #27
 8008e0a:	d51b      	bpl.n	8008e44 <f_chdir+0x74>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8008e0c:	9902      	ldr	r1, [sp, #8]
 8008e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8008e10:	780c      	ldrb	r4, [r1, #0]
	rv = rv << 8 | ptr[0];
 8008e12:	7ed5      	ldrb	r5, [r2, #27]
 8008e14:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8008e16:	2c03      	cmp	r4, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008e18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008e1c:	d00b      	beq.n	8008e36 <f_chdir+0x66>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8008e1e:	618b      	str	r3, [r1, #24]
 8008e20:	e7e0      	b.n	8008de4 <f_chdir+0x14>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008e22:	2804      	cmp	r0, #4
					res = FR_NO_PATH;		/* Reached but a file */
 8008e24:	bf08      	it	eq
 8008e26:	2005      	moveq	r0, #5
}
 8008e28:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008e2c:	bd30      	pop	{r4, r5, pc}
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	9a05      	ldr	r2, [sp, #20]
 8008e32:	619a      	str	r2, [r3, #24]
 8008e34:	e7d6      	b.n	8008de4 <f_chdir+0x14>
	rv = rv << 8 | ptr[0];
 8008e36:	7d54      	ldrb	r4, [r2, #21]
 8008e38:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e3a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8008e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e42:	e7ec      	b.n	8008e1e <f_chdir+0x4e>
					res = FR_NO_PATH;		/* Reached but a file */
 8008e44:	2005      	movs	r0, #5
 8008e46:	e7cd      	b.n	8008de4 <f_chdir+0x14>

08008e48 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e4e:	b148      	cbz	r0, 8008e64 <f_lseek+0x1c>
 8008e50:	6803      	ldr	r3, [r0, #0]
 8008e52:	4604      	mov	r4, r0
 8008e54:	b133      	cbz	r3, 8008e64 <f_lseek+0x1c>
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	b122      	cbz	r2, 8008e64 <f_lseek+0x1c>
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	88da      	ldrh	r2, [r3, #6]
 8008e5e:	8881      	ldrh	r1, [r0, #4]
 8008e60:	4291      	cmp	r1, r2
 8008e62:	d004      	beq.n	8008e6e <f_lseek+0x26>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8008e64:	2609      	movs	r6, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8008e66:	4630      	mov	r0, r6
 8008e68:	b005      	add	sp, #20
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008e6e:	7858      	ldrb	r0, [r3, #1]
 8008e70:	f7fd f8ba 	bl	8005fe8 <disk_status>
 8008e74:	07c3      	lsls	r3, r0, #31
 8008e76:	d4f5      	bmi.n	8008e64 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008e78:	7d66      	ldrb	r6, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008e7a:	f8d4 a000 	ldr.w	sl, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	d1f1      	bne.n	8008e66 <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 8008e82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d049      	beq.n	8008f1c <f_lseek+0xd4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008e88:	1c6f      	adds	r7, r5, #1
 8008e8a:	f000 8097 	beq.w	8008fbc <f_lseek+0x174>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008e8e:	68e1      	ldr	r1, [r4, #12]
 8008e90:	428d      	cmp	r5, r1
 8008e92:	bf28      	it	cs
 8008e94:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 8008e96:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	d0e4      	beq.n	8008e66 <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008e9c:	1e69      	subs	r1, r5, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e9e:	f8ba 700a 	ldrh.w	r7, [sl, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ea2:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ea4:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ea6:	0a49      	lsrs	r1, r1, #9
 8008ea8:	fbb1 f0f7 	udiv	r0, r1, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008eac:	b933      	cbnz	r3, 8008ebc <f_lseek+0x74>
 8008eae:	e11e      	b.n	80090ee <f_lseek+0x2a6>
		cl -= ncl; tbl++;		/* Next fragment */
 8008eb0:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eb2:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8119 	beq.w	80090ee <f_lseek+0x2a6>
		if (cl < ncl) break;	/* In this fragment? */
 8008ebc:	4298      	cmp	r0, r3
 8008ebe:	d2f7      	bcs.n	8008eb0 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 8008ec0:	6853      	ldr	r3, [r2, #4]
 8008ec2:	4403      	add	r3, r0
 8008ec4:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ec6:	f8da 001c 	ldr.w	r0, [sl, #28]
				fp->clust = clmt_clust(fp, ofs - 1);
 8008eca:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ecc:	1e83      	subs	r3, r0, #2
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	f240 80cf 	bls.w	8009072 <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8008ed4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8008ed8:	fb02 3307 	mla	r3, r2, r7, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80c8 	beq.w	8009072 <f_lseek+0x22a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008ee2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	d0bd      	beq.n	8008e66 <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008eea:	3f01      	subs	r7, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008eec:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008eee:	4039      	ands	r1, r7
 8008ef0:	18cf      	adds	r7, r1, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008ef2:	42ba      	cmp	r2, r7
 8008ef4:	d0b7      	beq.n	8008e66 <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008ef6:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008efa:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f2c0 8142 	blt.w	8009188 <f_lseek+0x340>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008f04:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	f7fd f88a 	bl	8006024 <disk_read>
 8008f10:	4606      	mov	r6, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f040 80aa 	bne.w	800906c <f_lseek+0x224>
			fp->sect = nsect;
 8008f18:	6227      	str	r7, [r4, #32]
 8008f1a:	e7a4      	b.n	8008e66 <f_lseek+0x1e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	42ab      	cmp	r3, r5
 8008f20:	d204      	bcs.n	8008f2c <f_lseek+0xe4>
 8008f22:	7d22      	ldrb	r2, [r4, #20]
 8008f24:	f012 0f02 	tst.w	r2, #2
 8008f28:	bf08      	it	eq
 8008f2a:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8008f2c:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8008f2e:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8008f30:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	d097      	beq.n	8008e66 <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008f36:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 8008f3a:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d035      	beq.n	8008fae <f_lseek+0x166>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008f42:	3b01      	subs	r3, #1
 8008f44:	1e6a      	subs	r2, r5, #1
 8008f46:	fbb3 f1f8 	udiv	r1, r3, r8
 8008f4a:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 8008f4e:	428a      	cmp	r2, r1
 8008f50:	d32d      	bcc.n	8008fae <f_lseek+0x166>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008f52:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 8008f56:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008f58:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8008f5a:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008f5c:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8008f5e:	2f00      	cmp	r7, #0
 8008f60:	f000 80ec 	beq.w	800913c <f_lseek+0x2f4>
				while (ofs > bcs) {						/* Cluster following loop */
 8008f64:	4545      	cmp	r5, r8
 8008f66:	f240 80d3 	bls.w	8009110 <f_lseek+0x2c8>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	e012      	b.n	8008f94 <f_lseek+0x14c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008f6e:	f7fd fd73 	bl	8006a58 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008f72:	4601      	mov	r1, r0
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f000 8126 	beq.w	80091c6 <f_lseek+0x37e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f7a:	1c4b      	adds	r3, r1, #1
 8008f7c:	d076      	beq.n	800906c <f_lseek+0x224>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008f7e:	2901      	cmp	r1, #1
 8008f80:	d977      	bls.n	8009072 <f_lseek+0x22a>
 8008f82:	f8da 301c 	ldr.w	r3, [sl, #28]
 8008f86:	428b      	cmp	r3, r1
 8008f88:	d973      	bls.n	8009072 <f_lseek+0x22a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008f8a:	45a8      	cmp	r8, r5
					fp->clust = clst;
 8008f8c:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008f8e:	f080 80bd 	bcs.w	800910c <f_lseek+0x2c4>
 8008f92:	69a3      	ldr	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008f94:	7d22      	ldrb	r2, [r4, #20]
					ofs -= bcs; fp->fptr += bcs;
 8008f96:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008f98:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 8008f9a:	eba5 0508 	sub.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008f9e:	0792      	lsls	r2, r2, #30
					ofs -= bcs; fp->fptr += bcs;
 8008fa0:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008fa2:	d4e4      	bmi.n	8008f6e <f_lseek+0x126>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008fa4:	6820      	ldr	r0, [r4, #0]
 8008fa6:	f7fd f9c5 	bl	8006334 <get_fat.isra.0>
 8008faa:	4601      	mov	r1, r0
 8008fac:	e7e5      	b.n	8008f7a <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008fae:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 809f 	beq.w	80090f4 <f_lseek+0x2ac>
 8008fb6:	2300      	movs	r3, #0
				fp->clust = clst;
 8008fb8:	61e7      	str	r7, [r4, #28]
 8008fba:	e7d0      	b.n	8008f5e <f_lseek+0x116>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fbc:	4683      	mov	fp, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008fbe:	68a3      	ldr	r3, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fc0:	f85b 2b04 	ldr.w	r2, [fp], #4
 8008fc4:	9200      	str	r2, [sp, #0]
			if (cl) {
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 8088 	beq.w	80090dc <f_lseek+0x294>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fcc:	2202      	movs	r2, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008fce:	4657      	mov	r7, sl
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fd0:	4699      	mov	r9, r3
 8008fd2:	9603      	str	r6, [sp, #12]
 8008fd4:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8008fd8:	4692      	mov	sl, r2
 8008fda:	46a3      	mov	fp, r4
 8008fdc:	464d      	mov	r5, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008fde:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fe0:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 8008fe2:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fe6:	d902      	bls.n	8008fee <f_lseek+0x1a6>
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	429d      	cmp	r5, r3
 8008fec:	d303      	bcc.n	8008ff6 <f_lseek+0x1ae>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008fee:	2602      	movs	r6, #2
 8008ff0:	f88b 6015 	strb.w	r6, [fp, #21]
 8008ff4:	e737      	b.n	8008e66 <f_lseek+0x1e>
		switch (fs->fs_type) {
 8008ff6:	783b      	ldrb	r3, [r7, #0]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d02c      	beq.n	8009056 <f_lseek+0x20e>
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d03e      	beq.n	800907e <f_lseek+0x236>
 8009000:	2b01      	cmp	r3, #1
 8009002:	d1f4      	bne.n	8008fee <f_lseek+0x1a6>
			bc = (UINT)clst; bc += bc / 2;
 8009004:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800900a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800900c:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009010:	4291      	cmp	r1, r2
 8009012:	d005      	beq.n	8009020 <f_lseek+0x1d8>
 8009014:	4638      	mov	r0, r7
 8009016:	f7fd f8b5 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800901a:	bb30      	cbnz	r0, 800906a <f_lseek+0x222>
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8009020:	f3c6 0008 	ubfx	r0, r6, #0, #9
 8009024:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009026:	eb03 2156 	add.w	r1, r3, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800902a:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800902c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800902e:	f890 8038 	ldrb.w	r8, [r0, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009032:	d003      	beq.n	800903c <f_lseek+0x1f4>
 8009034:	4638      	mov	r0, r7
 8009036:	f7fd f8a5 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800903a:	b9b0      	cbnz	r0, 800906a <f_lseek+0x222>
			wc |= fs->win[bc % SS(fs)] << 8;
 800903c:	f3c6 0608 	ubfx	r6, r6, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009040:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8009042:	4437      	add	r7, r6
 8009044:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009048:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800904c:	f140 80ad 	bpl.w	80091aa <f_lseek+0x362>
 8009050:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009054:	e02d      	b.n	80090b2 <f_lseek+0x26a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800905a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800905e:	4299      	cmp	r1, r3
 8009060:	d031      	beq.n	80090c6 <f_lseek+0x27e>
 8009062:	4638      	mov	r0, r7
 8009064:	f7fd f88e 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009068:	b368      	cbz	r0, 80090c6 <f_lseek+0x27e>
 800906a:	465c      	mov	r4, fp
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800906c:	2601      	movs	r6, #1
 800906e:	7566      	strb	r6, [r4, #21]
 8009070:	e6f9      	b.n	8008e66 <f_lseek+0x1e>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009072:	2602      	movs	r6, #2
}
 8009074:	4630      	mov	r0, r6
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009076:	7566      	strb	r6, [r4, #21]
}
 8009078:	b005      	add	sp, #20
 800907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800907e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009082:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009086:	4299      	cmp	r1, r3
 8009088:	d004      	beq.n	8009094 <f_lseek+0x24c>
 800908a:	4638      	mov	r0, r7
 800908c:	f7fd f87a 	bl	8006184 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009090:	2800      	cmp	r0, #0
 8009092:	d1ea      	bne.n	800906a <f_lseek+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009094:	00ab      	lsls	r3, r5, #2
 8009096:	3738      	adds	r7, #56	; 0x38
 8009098:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800909c:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 800909e:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 80090a2:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80090a4:	7853      	ldrb	r3, [r2, #1]
 80090a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80090aa:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090ae:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80090b2:	f1b8 0f01 	cmp.w	r8, #1
 80090b6:	d99a      	bls.n	8008fee <f_lseek+0x1a6>
					} while (cl == pcl + 1);
 80090b8:	3501      	adds	r5, #1
 80090ba:	4545      	cmp	r5, r8
 80090bc:	d150      	bne.n	8009160 <f_lseek+0x318>
 80090be:	4645      	mov	r5, r8
 80090c0:	f8db 7000 	ldr.w	r7, [fp]
 80090c4:	e78c      	b.n	8008fe0 <f_lseek+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80090c6:	006b      	lsls	r3, r5, #1
 80090c8:	3738      	adds	r7, #56	; 0x38
 80090ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80090ce:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 80090d0:	f817 8003 	ldrb.w	r8, [r7, r3]
 80090d4:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80090d6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 80090da:	e7ea      	b.n	80090b2 <f_lseek+0x26a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80090dc:	2202      	movs	r2, #2
			if (ulen <= tlen) {
 80090de:	9b00      	ldr	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 80090e0:	6002      	str	r2, [r0, #0]
			if (ulen <= tlen) {
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d85f      	bhi.n	80091a6 <f_lseek+0x35e>
				*tbl = 0;		/* Terminate table */
 80090e6:	2300      	movs	r3, #0
 80090e8:	f8cb 3000 	str.w	r3, [fp]
 80090ec:	e6bb      	b.n	8008e66 <f_lseek+0x1e>
 80090ee:	f06f 0201 	mvn.w	r2, #1
 80090f2:	e6e8      	b.n	8008ec6 <f_lseek+0x7e>
					clst = create_chain(&fp->obj, 0);
 80090f4:	4639      	mov	r1, r7
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fd fcae 	bl	8006a58 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80090fc:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80090fe:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009100:	d0b7      	beq.n	8009072 <f_lseek+0x22a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009102:	1c41      	adds	r1, r0, #1
 8009104:	d0b2      	beq.n	800906c <f_lseek+0x224>
					fp->obj.sclust = clst;
 8009106:	69a3      	ldr	r3, [r4, #24]
 8009108:	60a0      	str	r0, [r4, #8]
 800910a:	e755      	b.n	8008fb8 <f_lseek+0x170>
 800910c:	460f      	mov	r7, r1
 800910e:	69a3      	ldr	r3, [r4, #24]
				fp->fptr += ofs;
 8009110:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 8009112:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 8009116:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8009118:	2a00      	cmp	r2, #0
 800911a:	d057      	beq.n	80091cc <f_lseek+0x384>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800911c:	f8da 201c 	ldr.w	r2, [sl, #28]
	clst -= 2;
 8009120:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009122:	3a02      	subs	r2, #2
 8009124:	4291      	cmp	r1, r2
 8009126:	d2a4      	bcs.n	8009072 <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8009128:	f8ba 700a 	ldrh.w	r7, [sl, #10]
 800912c:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8009130:	fb01 2707 	mla	r7, r1, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009134:	2f00      	cmp	r7, #0
 8009136:	d09c      	beq.n	8009072 <f_lseek+0x22a>
					nsect += (DWORD)(ofs / SS(fs));
 8009138:	eb07 2755 	add.w	r7, r7, r5, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800913c:	68e2      	ldr	r2, [r4, #12]
 800913e:	429a      	cmp	r2, r3
 8009140:	d204      	bcs.n	800914c <f_lseek+0x304>
			fp->flag |= FA_MODIFIED;
 8009142:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8009144:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8009146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800914a:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	2b00      	cmp	r3, #0
 8009152:	f43f ae88 	beq.w	8008e66 <f_lseek+0x1e>
 8009156:	6a22      	ldr	r2, [r4, #32]
 8009158:	42ba      	cmp	r2, r7
 800915a:	f47f aecc 	bne.w	8008ef6 <f_lseek+0xae>
 800915e:	e682      	b.n	8008e66 <f_lseek+0x1e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009160:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	4553      	cmp	r3, sl
 8009168:	d322      	bcc.n	80091b0 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	4618      	mov	r0, r3
 800916e:	f840 4b08 	str.w	r4, [r0], #8
 8009172:	f8c3 9004 	str.w	r9, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	69da      	ldr	r2, [r3, #28]
 800917a:	4590      	cmp	r8, r2
 800917c:	d228      	bcs.n	80091d0 <f_lseek+0x388>
						*tbl++ = ncl; *tbl++ = tcl;
 800917e:	9001      	str	r0, [sp, #4]
{
 8009180:	46c1      	mov	r9, r8
 8009182:	f8db 7000 	ldr.w	r7, [fp]
 8009186:	e729      	b.n	8008fdc <f_lseek+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009188:	2301      	movs	r3, #1
 800918a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800918e:	9100      	str	r1, [sp, #0]
 8009190:	f7fc ff56 	bl	8006040 <disk_write>
 8009194:	2800      	cmp	r0, #0
 8009196:	f47f af69 	bne.w	800906c <f_lseek+0x224>
				fp->flag &= (BYTE)~FA_DIRTY;
 800919a:	7d23      	ldrb	r3, [r4, #20]
 800919c:	9900      	ldr	r1, [sp, #0]
 800919e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a2:	7523      	strb	r3, [r4, #20]
 80091a4:	e6ae      	b.n	8008f04 <f_lseek+0xbc>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80091a6:	2611      	movs	r6, #17
 80091a8:	e65d      	b.n	8008e66 <f_lseek+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80091aa:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80091ae:	e780      	b.n	80090b2 <f_lseek+0x26a>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	4542      	cmp	r2, r8
 80091b6:	d8e3      	bhi.n	8009180 <f_lseek+0x338>
 80091b8:	465c      	mov	r4, fp
 80091ba:	4652      	mov	r2, sl
 80091bc:	9e03      	ldr	r6, [sp, #12]
 80091be:	f8dd b004 	ldr.w	fp, [sp, #4]
 80091c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091c4:	e78b      	b.n	80090de <f_lseek+0x296>
 80091c6:	4607      	mov	r7, r0
 80091c8:	69a3      	ldr	r3, [r4, #24]
 80091ca:	e7b7      	b.n	800913c <f_lseek+0x2f4>
		fp->fptr = nsect = 0;
 80091cc:	4617      	mov	r7, r2
 80091ce:	e7b5      	b.n	800913c <f_lseek+0x2f4>
 80091d0:	465c      	mov	r4, fp
 80091d2:	4652      	mov	r2, sl
 80091d4:	9e03      	ldr	r6, [sp, #12]
						*tbl++ = ncl; *tbl++ = tcl;
 80091d6:	4683      	mov	fp, r0
 80091d8:	e7f3      	b.n	80091c2 <f_lseek+0x37a>
 80091da:	bf00      	nop

080091dc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80091dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091de:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80091e2:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d03a      	beq.n	800925e <f_opendir+0x82>

	/* Get logical drive */
	obj = &dp->obj;
 80091e8:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 80091ea:	2200      	movs	r2, #0
 80091ec:	a801      	add	r0, sp, #4
 80091ee:	a903      	add	r1, sp, #12
 80091f0:	f7fd fd62 	bl	8006cb8 <find_volume>
	if (res == FR_OK) {
 80091f4:	b120      	cbz	r0, 8009200 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80091f6:	2300      	movs	r3, #0
 80091f8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80091fa:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 80091fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		obj->fs = fs;
 8009200:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8009202:	aa04      	add	r2, sp, #16
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009204:	9901      	ldr	r1, [sp, #4]
 8009206:	4620      	mov	r0, r4
		obj->fs = fs;
 8009208:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 800920a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800920c:	f7fe f9bc 	bl	8007588 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8009210:	bb08      	cbnz	r0, 8009256 <f_opendir+0x7a>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009212:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8009216:	2b00      	cmp	r3, #0
 8009218:	db25      	blt.n	8009266 <f_opendir+0x8a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800921a:	79a3      	ldrb	r3, [r4, #6]
 800921c:	06db      	lsls	r3, r3, #27
 800921e:	d51c      	bpl.n	800925a <f_opendir+0x7e>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009220:	9a03      	ldr	r2, [sp, #12]
 8009222:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 8009224:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 8009226:	7ecd      	ldrb	r5, [r1, #27]
 8009228:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800922a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800922c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8009230:	d105      	bne.n	800923e <f_opendir+0x62>
	rv = rv << 8 | ptr[0];
 8009232:	7d48      	ldrb	r0, [r1, #21]
 8009234:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009236:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800923a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800923e:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8009240:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009242:	2100      	movs	r1, #0
 8009244:	4620      	mov	r0, r4
				obj->id = fs->id;
 8009246:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009248:	f7fd ff22 	bl	8007090 <dir_sdi>
				if (res == FR_OK) {
 800924c:	b918      	cbnz	r0, 8009256 <f_opendir+0x7a>
					if (obj->sclust) {
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	b95b      	cbnz	r3, 800926a <f_opendir+0x8e>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009252:	6120      	str	r0, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009254:	e7d1      	b.n	80091fa <f_opendir+0x1e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009256:	2804      	cmp	r0, #4
 8009258:	d1cd      	bne.n	80091f6 <f_opendir+0x1a>
 800925a:	2005      	movs	r0, #5
 800925c:	e7cb      	b.n	80091f6 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 800925e:	2009      	movs	r0, #9
}
 8009260:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8009264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009266:	9a03      	ldr	r2, [sp, #12]
 8009268:	e7ea      	b.n	8009240 <f_opendir+0x64>
		if (Files[i].fs == dp->obj.fs &&
 800926a:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <f_opendir+0x104>)
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	6811      	ldr	r1, [r2, #0]
 8009270:	428d      	cmp	r5, r1
 8009272:	d01e      	beq.n	80092b2 <f_opendir+0xd6>
 8009274:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8009278:	45ac      	cmp	ip, r5
 800927a:	d007      	beq.n	800928c <f_opendir+0xb0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800927c:	b319      	cbz	r1, 80092c6 <f_opendir+0xea>
 800927e:	f1bc 0f00 	cmp.w	ip, #0
 8009282:	d01f      	beq.n	80092c4 <f_opendir+0xe8>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009284:	2300      	movs	r3, #0
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009286:	2012      	movs	r0, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009288:	6123      	str	r3, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800928a:	e7b4      	b.n	80091f6 <f_opendir+0x1a>
		if (Files[i].fs == dp->obj.fs &&
 800928c:	6957      	ldr	r7, [r2, #20]
 800928e:	42bb      	cmp	r3, r7
 8009290:	d1f4      	bne.n	800927c <f_opendir+0xa0>
			Files[i].clu == dp->obj.sclust &&
 8009292:	6996      	ldr	r6, [r2, #24]
 8009294:	6967      	ldr	r7, [r4, #20]
 8009296:	42be      	cmp	r6, r7
 8009298:	d1f0      	bne.n	800927c <f_opendir+0xa0>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800929a:	2101      	movs	r1, #1
 800929c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 80092a0:	010f      	lsls	r7, r1, #4
 80092a2:	899d      	ldrh	r5, [r3, #12]
 80092a4:	3501      	adds	r5, #1
 80092a6:	b2ad      	uxth	r5, r5
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092a8:	443a      	add	r2, r7
	return i + 1;
 80092aa:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092ac:	8195      	strh	r5, [r2, #12]
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80092ae:	6121      	str	r1, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80092b0:	e7a3      	b.n	80091fa <f_opendir+0x1e>
		if (Files[i].fs == dp->obj.fs &&
 80092b2:	6856      	ldr	r6, [r2, #4]
 80092b4:	42b3      	cmp	r3, r6
 80092b6:	d1dd      	bne.n	8009274 <f_opendir+0x98>
			Files[i].clu == dp->obj.sclust &&
 80092b8:	6897      	ldr	r7, [r2, #8]
 80092ba:	6966      	ldr	r6, [r4, #20]
 80092bc:	42b7      	cmp	r7, r6
 80092be:	d1d9      	bne.n	8009274 <f_opendir+0x98>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092c0:	4601      	mov	r1, r0
 80092c2:	e7eb      	b.n	800929c <f_opendir+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092c4:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 80092c6:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
		Files[i].ofs = dp->dptr;
 80092ca:	6966      	ldr	r6, [r4, #20]
		Files[i].fs = dp->obj.fs;
 80092cc:	010f      	lsls	r7, r1, #4
		Files[i].ctr = 0;
 80092ce:	f04f 0e00 	mov.w	lr, #0
		Files[i].fs = dp->obj.fs;
 80092d2:	51d5      	str	r5, [r2, r7]
		Files[i].ctr = 0;
 80092d4:	2501      	movs	r5, #1
 80092d6:	f8ac e00c 	strh.w	lr, [ip, #12]
		Files[i].ofs = dp->dptr;
 80092da:	e9cc 3601 	strd	r3, r6, [ip, #4]
		Files[i].ctr = 0;
 80092de:	e7e3      	b.n	80092a8 <f_opendir+0xcc>
 80092e0:	24000598 	.word	0x24000598

080092e4 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092e4:	b320      	cbz	r0, 8009330 <f_closedir+0x4c>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80092e6:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092e8:	6803      	ldr	r3, [r0, #0]
 80092ea:	4604      	mov	r4, r0
 80092ec:	b12b      	cbz	r3, 80092fa <f_closedir+0x16>
 80092ee:	781a      	ldrb	r2, [r3, #0]
 80092f0:	b11a      	cbz	r2, 80092fa <f_closedir+0x16>
 80092f2:	8881      	ldrh	r1, [r0, #4]
 80092f4:	88da      	ldrh	r2, [r3, #6]
 80092f6:	4291      	cmp	r1, r2
 80092f8:	d001      	beq.n	80092fe <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 80092fa:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80092fe:	7858      	ldrb	r0, [r3, #1]
 8009300:	f7fc fe72 	bl	8005fe8 <disk_status>
 8009304:	f010 0001 	ands.w	r0, r0, #1
 8009308:	d1f7      	bne.n	80092fa <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	b16b      	cbz	r3, 800932a <f_closedir+0x46>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800930e:	3b01      	subs	r3, #1
 8009310:	2b01      	cmp	r3, #1
 8009312:	d80f      	bhi.n	8009334 <f_closedir+0x50>
		n = Files[i].ctr;
 8009314:	490c      	ldr	r1, [pc, #48]	; (8009348 <f_closedir+0x64>)
 8009316:	011d      	lsls	r5, r3, #4
 8009318:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800931c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800931e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009322:	d00f      	beq.n	8009344 <f_closedir+0x60>
		if (n > 0) n--;				/* Decrement read mode open count */
 8009324:	b942      	cbnz	r2, 8009338 <f_closedir+0x54>
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009326:	2300      	movs	r3, #0
 8009328:	514b      	str	r3, [r1, r5]
			dp->obj.fs = 0;			/* Invalidate directory object */
 800932a:	2300      	movs	r3, #0
 800932c:	6023      	str	r3, [r4, #0]
}
 800932e:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8009330:	2009      	movs	r0, #9
}
 8009332:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009334:	2002      	movs	r0, #2
}
 8009336:	bd38      	pop	{r3, r4, r5, pc}
		if (n > 0) n--;				/* Decrement read mode open count */
 8009338:	3a01      	subs	r2, #1
 800933a:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800933c:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800933e:	2a00      	cmp	r2, #0
 8009340:	d1f3      	bne.n	800932a <f_closedir+0x46>
 8009342:	e7f0      	b.n	8009326 <f_closedir+0x42>
		Files[i].ctr = n;
 8009344:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009346:	e7ee      	b.n	8009326 <f_closedir+0x42>
 8009348:	24000598 	.word	0x24000598

0800934c <f_readdir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800934c:	b360      	cbz	r0, 80093a8 <f_readdir+0x5c>
 800934e:	6803      	ldr	r3, [r0, #0]

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009350:	b530      	push	{r4, r5, lr}
 8009352:	4604      	mov	r4, r0
 8009354:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009358:	b133      	cbz	r3, 8009368 <f_readdir+0x1c>
 800935a:	781a      	ldrb	r2, [r3, #0]
 800935c:	b122      	cbz	r2, 8009368 <f_readdir+0x1c>
 800935e:	460d      	mov	r5, r1
 8009360:	88da      	ldrh	r2, [r3, #6]
 8009362:	8881      	ldrh	r1, [r0, #4]
 8009364:	4291      	cmp	r1, r2
 8009366:	d003      	beq.n	8009370 <f_readdir+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 8009368:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800936a:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 800936e:	bd30      	pop	{r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009370:	7858      	ldrb	r0, [r3, #1]
 8009372:	f7fc fe39 	bl	8005fe8 <disk_status>
 8009376:	07c3      	lsls	r3, r0, #31
 8009378:	d4f6      	bmi.n	8009368 <f_readdir+0x1c>
		if (!fno) {
 800937a:	b1bd      	cbz	r5, 80093ac <f_readdir+0x60>
			INIT_NAMBUF(fs);
 800937c:	6823      	ldr	r3, [r4, #0]
			res = dir_read(dp, 0);			/* Read an item */
 800937e:	4620      	mov	r0, r4
			INIT_NAMBUF(fs);
 8009380:	f8c3 d00c 	str.w	sp, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8009384:	f7fd f886 	bl	8006494 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8009388:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 800938c:	d1ed      	bne.n	800936a <f_readdir+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 800938e:	4629      	mov	r1, r5
 8009390:	4620      	mov	r0, r4
 8009392:	f7fc fe71 	bl	8006078 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009396:	4620      	mov	r0, r4
 8009398:	f7fd f838 	bl	800640c <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800939c:	2804      	cmp	r0, #4
 800939e:	bf08      	it	eq
 80093a0:	2000      	moveq	r0, #0
}
 80093a2:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80093a6:	bd30      	pop	{r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80093a8:	2009      	movs	r0, #9
}
 80093aa:	4770      	bx	lr
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80093ac:	4629      	mov	r1, r5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7fd fe6e 	bl	8007090 <dir_sdi>
}
 80093b4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80093b8:	bd30      	pop	{r4, r5, pc}
 80093ba:	bf00      	nop

080093bc <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093be:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 80093c0:	7a5c      	ldrb	r4, [r3, #9]
 80093c2:	b9dc      	cbnz	r4, 80093fc <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 80093c4:	f893 e009 	ldrb.w	lr, [r3, #9]
 80093c8:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 80093ca:	7a5e      	ldrb	r6, [r3, #9]
 80093cc:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 80093d0:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 80093d2:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 80093d6:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80093d8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 80093dc:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 80093de:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 80093e0:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 80093e2:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 80093e4:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 80093e6:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 80093e8:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 80093ea:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 80093ee:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 80093f0:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 80093f2:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 80093f4:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 80093f8:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80093fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 80093fc:	2001      	movs	r0, #1
}
 80093fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009400:	240005bc 	.word	0x240005bc

08009404 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009404:	287f      	cmp	r0, #127	; 0x7f
 8009406:	d911      	bls.n	800942c <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009408:	b989      	cbnz	r1, 800942e <ff_convert+0x2a>
 800940a:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <ff_convert+0x40>)
{
 800940c:	b410      	push	{r4}
 800940e:	e001      	b.n	8009414 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009410:	2980      	cmp	r1, #128	; 0x80
 8009412:	d015      	beq.n	8009440 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 8009414:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009418:	b28c      	uxth	r4, r1
 800941a:	3101      	adds	r1, #1
 800941c:	4282      	cmp	r2, r0
 800941e:	d1f7      	bne.n	8009410 <ff_convert+0xc>
 8009420:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8009424:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8009426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800942e:	28ff      	cmp	r0, #255	; 0xff
 8009430:	d804      	bhi.n	800943c <ff_convert+0x38>
 8009432:	4b04      	ldr	r3, [pc, #16]	; (8009444 <ff_convert+0x40>)
 8009434:	3880      	subs	r0, #128	; 0x80
 8009436:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800943a:	4770      	bx	lr
 800943c:	2000      	movs	r0, #0
 800943e:	4770      	bx	lr
 8009440:	2000      	movs	r0, #0
 8009442:	e7f0      	b.n	8009426 <ff_convert+0x22>
 8009444:	08011124 	.word	0x08011124

08009448 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009448:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <ff_wtoupper+0x8c>)
 800944a:	4a23      	ldr	r2, [pc, #140]	; (80094d8 <ff_wtoupper+0x90>)
 800944c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009450:	bf28      	it	cs
 8009452:	4613      	movcs	r3, r2
{
 8009454:	b470      	push	{r4, r5, r6}
 8009456:	3304      	adds	r3, #4
 8009458:	e001      	b.n	800945e <ff_wtoupper+0x16>
 800945a:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800945c:	b1d2      	cbz	r2, 8009494 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 800945e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8009462:	461e      	mov	r6, r3
 8009464:	b1a1      	cbz	r1, 8009490 <ff_wtoupper+0x48>
 8009466:	4288      	cmp	r0, r1
 8009468:	d312      	bcc.n	8009490 <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800946a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800946e:	b2d4      	uxtb	r4, r2
 8009470:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8009472:	1865      	adds	r5, r4, r1
 8009474:	42a8      	cmp	r0, r5
 8009476:	daf0      	bge.n	800945a <ff_wtoupper+0x12>
			switch (cmd) {
 8009478:	2a08      	cmp	r2, #8
 800947a:	d809      	bhi.n	8009490 <ff_wtoupper+0x48>
 800947c:	e8df f002 	tbb	[pc, r2]
 8009480:	1a171105 	.word	0x1a171105
 8009484:	2623201d 	.word	0x2623201d
 8009488:	0d          	.byte	0x0d
 8009489:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800948a:	1a41      	subs	r1, r0, r1
 800948c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8009490:	bc70      	pop	{r4, r5, r6}
 8009492:	4770      	bx	lr
		if (!cmd) p += nc;
 8009494:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8009498:	e7dd      	b.n	8009456 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800949a:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800949e:	b280      	uxth	r0, r0
 80094a0:	e7f6      	b.n	8009490 <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80094a2:	1a41      	subs	r1, r0, r1
 80094a4:	f001 0301 	and.w	r3, r1, #1
 80094a8:	1ac0      	subs	r0, r0, r3
 80094aa:	b280      	uxth	r0, r0
 80094ac:	e7f0      	b.n	8009490 <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 80094ae:	3810      	subs	r0, #16
 80094b0:	b280      	uxth	r0, r0
 80094b2:	e7ed      	b.n	8009490 <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80094b4:	3820      	subs	r0, #32
 80094b6:	b280      	uxth	r0, r0
 80094b8:	e7ea      	b.n	8009490 <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80094ba:	3830      	subs	r0, #48	; 0x30
 80094bc:	b280      	uxth	r0, r0
 80094be:	e7e7      	b.n	8009490 <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80094c0:	381a      	subs	r0, #26
 80094c2:	b280      	uxth	r0, r0
 80094c4:	e7e4      	b.n	8009490 <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 80094c6:	3008      	adds	r0, #8
 80094c8:	b280      	uxth	r0, r0
 80094ca:	e7e1      	b.n	8009490 <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 80094cc:	3850      	subs	r0, #80	; 0x50
 80094ce:	b280      	uxth	r0, r0
 80094d0:	e7de      	b.n	8009490 <ff_wtoupper+0x48>
 80094d2:	bf00      	nop
 80094d4:	08011224 	.word	0x08011224
 80094d8:	08011418 	.word	0x08011418

080094dc <__errno>:
 80094dc:	4b01      	ldr	r3, [pc, #4]	; (80094e4 <__errno+0x8>)
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	24000034 	.word	0x24000034

080094e8 <__libc_init_array>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	4d0d      	ldr	r5, [pc, #52]	; (8009520 <__libc_init_array+0x38>)
 80094ec:	4c0d      	ldr	r4, [pc, #52]	; (8009524 <__libc_init_array+0x3c>)
 80094ee:	1b64      	subs	r4, r4, r5
 80094f0:	10a4      	asrs	r4, r4, #2
 80094f2:	2600      	movs	r6, #0
 80094f4:	42a6      	cmp	r6, r4
 80094f6:	d109      	bne.n	800950c <__libc_init_array+0x24>
 80094f8:	4d0b      	ldr	r5, [pc, #44]	; (8009528 <__libc_init_array+0x40>)
 80094fa:	4c0c      	ldr	r4, [pc, #48]	; (800952c <__libc_init_array+0x44>)
 80094fc:	f000 f93c 	bl	8009778 <_init>
 8009500:	1b64      	subs	r4, r4, r5
 8009502:	10a4      	asrs	r4, r4, #2
 8009504:	2600      	movs	r6, #0
 8009506:	42a6      	cmp	r6, r4
 8009508:	d105      	bne.n	8009516 <__libc_init_array+0x2e>
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009510:	4798      	blx	r3
 8009512:	3601      	adds	r6, #1
 8009514:	e7ee      	b.n	80094f4 <__libc_init_array+0xc>
 8009516:	f855 3b04 	ldr.w	r3, [r5], #4
 800951a:	4798      	blx	r3
 800951c:	3601      	adds	r6, #1
 800951e:	e7f2      	b.n	8009506 <__libc_init_array+0x1e>
 8009520:	080114d4 	.word	0x080114d4
 8009524:	080114d4 	.word	0x080114d4
 8009528:	080114d4 	.word	0x080114d4
 800952c:	080114d8 	.word	0x080114d8

08009530 <malloc>:
 8009530:	4b02      	ldr	r3, [pc, #8]	; (800953c <malloc+0xc>)
 8009532:	4601      	mov	r1, r0
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	f000 b863 	b.w	8009600 <_malloc_r>
 800953a:	bf00      	nop
 800953c:	24000034 	.word	0x24000034

08009540 <free>:
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <free+0xc>)
 8009542:	4601      	mov	r1, r0
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	f000 b80b 	b.w	8009560 <_free_r>
 800954a:	bf00      	nop
 800954c:	24000034 	.word	0x24000034

08009550 <memset>:
 8009550:	4402      	add	r2, r0
 8009552:	4603      	mov	r3, r0
 8009554:	4293      	cmp	r3, r2
 8009556:	d100      	bne.n	800955a <memset+0xa>
 8009558:	4770      	bx	lr
 800955a:	f803 1b01 	strb.w	r1, [r3], #1
 800955e:	e7f9      	b.n	8009554 <memset+0x4>

08009560 <_free_r>:
 8009560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009562:	2900      	cmp	r1, #0
 8009564:	d048      	beq.n	80095f8 <_free_r+0x98>
 8009566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956a:	9001      	str	r0, [sp, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f1a1 0404 	sub.w	r4, r1, #4
 8009572:	bfb8      	it	lt
 8009574:	18e4      	addlt	r4, r4, r3
 8009576:	f000 f8e3 	bl	8009740 <__malloc_lock>
 800957a:	4a20      	ldr	r2, [pc, #128]	; (80095fc <_free_r+0x9c>)
 800957c:	9801      	ldr	r0, [sp, #4]
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	4615      	mov	r5, r2
 8009582:	b933      	cbnz	r3, 8009592 <_free_r+0x32>
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	6014      	str	r4, [r2, #0]
 8009588:	b003      	add	sp, #12
 800958a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800958e:	f000 b8dd 	b.w	800974c <__malloc_unlock>
 8009592:	42a3      	cmp	r3, r4
 8009594:	d90b      	bls.n	80095ae <_free_r+0x4e>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	1862      	adds	r2, r4, r1
 800959a:	4293      	cmp	r3, r2
 800959c:	bf04      	itt	eq
 800959e:	681a      	ldreq	r2, [r3, #0]
 80095a0:	685b      	ldreq	r3, [r3, #4]
 80095a2:	6063      	str	r3, [r4, #4]
 80095a4:	bf04      	itt	eq
 80095a6:	1852      	addeq	r2, r2, r1
 80095a8:	6022      	streq	r2, [r4, #0]
 80095aa:	602c      	str	r4, [r5, #0]
 80095ac:	e7ec      	b.n	8009588 <_free_r+0x28>
 80095ae:	461a      	mov	r2, r3
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b10b      	cbz	r3, 80095b8 <_free_r+0x58>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d9fa      	bls.n	80095ae <_free_r+0x4e>
 80095b8:	6811      	ldr	r1, [r2, #0]
 80095ba:	1855      	adds	r5, r2, r1
 80095bc:	42a5      	cmp	r5, r4
 80095be:	d10b      	bne.n	80095d8 <_free_r+0x78>
 80095c0:	6824      	ldr	r4, [r4, #0]
 80095c2:	4421      	add	r1, r4
 80095c4:	1854      	adds	r4, r2, r1
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	d1dd      	bne.n	8009588 <_free_r+0x28>
 80095cc:	681c      	ldr	r4, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	6053      	str	r3, [r2, #4]
 80095d2:	4421      	add	r1, r4
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	e7d7      	b.n	8009588 <_free_r+0x28>
 80095d8:	d902      	bls.n	80095e0 <_free_r+0x80>
 80095da:	230c      	movs	r3, #12
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	e7d3      	b.n	8009588 <_free_r+0x28>
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf04      	itt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	bf04      	itt	eq
 80095f0:	1949      	addeq	r1, r1, r5
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	6054      	str	r4, [r2, #4]
 80095f6:	e7c7      	b.n	8009588 <_free_r+0x28>
 80095f8:	b003      	add	sp, #12
 80095fa:	bd30      	pop	{r4, r5, pc}
 80095fc:	240005c8 	.word	0x240005c8

08009600 <_malloc_r>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	1ccd      	adds	r5, r1, #3
 8009604:	f025 0503 	bic.w	r5, r5, #3
 8009608:	3508      	adds	r5, #8
 800960a:	2d0c      	cmp	r5, #12
 800960c:	bf38      	it	cc
 800960e:	250c      	movcc	r5, #12
 8009610:	2d00      	cmp	r5, #0
 8009612:	4606      	mov	r6, r0
 8009614:	db01      	blt.n	800961a <_malloc_r+0x1a>
 8009616:	42a9      	cmp	r1, r5
 8009618:	d903      	bls.n	8009622 <_malloc_r+0x22>
 800961a:	230c      	movs	r3, #12
 800961c:	6033      	str	r3, [r6, #0]
 800961e:	2000      	movs	r0, #0
 8009620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009622:	f000 f88d 	bl	8009740 <__malloc_lock>
 8009626:	4921      	ldr	r1, [pc, #132]	; (80096ac <_malloc_r+0xac>)
 8009628:	680a      	ldr	r2, [r1, #0]
 800962a:	4614      	mov	r4, r2
 800962c:	b99c      	cbnz	r4, 8009656 <_malloc_r+0x56>
 800962e:	4f20      	ldr	r7, [pc, #128]	; (80096b0 <_malloc_r+0xb0>)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	b923      	cbnz	r3, 800963e <_malloc_r+0x3e>
 8009634:	4621      	mov	r1, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f000 f83c 	bl	80096b4 <_sbrk_r>
 800963c:	6038      	str	r0, [r7, #0]
 800963e:	4629      	mov	r1, r5
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f837 	bl	80096b4 <_sbrk_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d123      	bne.n	8009692 <_malloc_r+0x92>
 800964a:	230c      	movs	r3, #12
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	4630      	mov	r0, r6
 8009650:	f000 f87c 	bl	800974c <__malloc_unlock>
 8009654:	e7e3      	b.n	800961e <_malloc_r+0x1e>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	1b5b      	subs	r3, r3, r5
 800965a:	d417      	bmi.n	800968c <_malloc_r+0x8c>
 800965c:	2b0b      	cmp	r3, #11
 800965e:	d903      	bls.n	8009668 <_malloc_r+0x68>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	441c      	add	r4, r3
 8009664:	6025      	str	r5, [r4, #0]
 8009666:	e004      	b.n	8009672 <_malloc_r+0x72>
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	42a2      	cmp	r2, r4
 800966c:	bf0c      	ite	eq
 800966e:	600b      	streq	r3, [r1, #0]
 8009670:	6053      	strne	r3, [r2, #4]
 8009672:	4630      	mov	r0, r6
 8009674:	f000 f86a 	bl	800974c <__malloc_unlock>
 8009678:	f104 000b 	add.w	r0, r4, #11
 800967c:	1d23      	adds	r3, r4, #4
 800967e:	f020 0007 	bic.w	r0, r0, #7
 8009682:	1ac2      	subs	r2, r0, r3
 8009684:	d0cc      	beq.n	8009620 <_malloc_r+0x20>
 8009686:	1a1b      	subs	r3, r3, r0
 8009688:	50a3      	str	r3, [r4, r2]
 800968a:	e7c9      	b.n	8009620 <_malloc_r+0x20>
 800968c:	4622      	mov	r2, r4
 800968e:	6864      	ldr	r4, [r4, #4]
 8009690:	e7cc      	b.n	800962c <_malloc_r+0x2c>
 8009692:	1cc4      	adds	r4, r0, #3
 8009694:	f024 0403 	bic.w	r4, r4, #3
 8009698:	42a0      	cmp	r0, r4
 800969a:	d0e3      	beq.n	8009664 <_malloc_r+0x64>
 800969c:	1a21      	subs	r1, r4, r0
 800969e:	4630      	mov	r0, r6
 80096a0:	f000 f808 	bl	80096b4 <_sbrk_r>
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1dd      	bne.n	8009664 <_malloc_r+0x64>
 80096a8:	e7cf      	b.n	800964a <_malloc_r+0x4a>
 80096aa:	bf00      	nop
 80096ac:	240005c8 	.word	0x240005c8
 80096b0:	240005cc 	.word	0x240005cc

080096b4 <_sbrk_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_sbrk_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f7 fa1a 	bl	8000af8 <_sbrk>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_sbrk_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_sbrk_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	24001100 	.word	0x24001100

080096d4 <strcat>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	4602      	mov	r2, r0
 80096d8:	7814      	ldrb	r4, [r2, #0]
 80096da:	4613      	mov	r3, r2
 80096dc:	3201      	adds	r2, #1
 80096de:	2c00      	cmp	r4, #0
 80096e0:	d1fa      	bne.n	80096d8 <strcat+0x4>
 80096e2:	3b01      	subs	r3, #1
 80096e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d1f9      	bne.n	80096e4 <strcat+0x10>
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <strncmp>:
 80096f2:	b510      	push	{r4, lr}
 80096f4:	b16a      	cbz	r2, 8009712 <strncmp+0x20>
 80096f6:	3901      	subs	r1, #1
 80096f8:	1884      	adds	r4, r0, r2
 80096fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80096fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009702:	4293      	cmp	r3, r2
 8009704:	d103      	bne.n	800970e <strncmp+0x1c>
 8009706:	42a0      	cmp	r0, r4
 8009708:	d001      	beq.n	800970e <strncmp+0x1c>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1f5      	bne.n	80096fa <strncmp+0x8>
 800970e:	1a98      	subs	r0, r3, r2
 8009710:	bd10      	pop	{r4, pc}
 8009712:	4610      	mov	r0, r2
 8009714:	e7fc      	b.n	8009710 <strncmp+0x1e>

08009716 <strrchr>:
 8009716:	b538      	push	{r3, r4, r5, lr}
 8009718:	4603      	mov	r3, r0
 800971a:	460c      	mov	r4, r1
 800971c:	b969      	cbnz	r1, 800973a <strrchr+0x24>
 800971e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009722:	f000 b819 	b.w	8009758 <strchr>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	4605      	mov	r5, r0
 800972a:	4621      	mov	r1, r4
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f813 	bl	8009758 <strchr>
 8009732:	2800      	cmp	r0, #0
 8009734:	d1f7      	bne.n	8009726 <strrchr+0x10>
 8009736:	4628      	mov	r0, r5
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	2500      	movs	r5, #0
 800973c:	e7f5      	b.n	800972a <strrchr+0x14>
	...

08009740 <__malloc_lock>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__malloc_lock+0x8>)
 8009742:	f000 b816 	b.w	8009772 <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	24001108 	.word	0x24001108

0800974c <__malloc_unlock>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__malloc_unlock+0x8>)
 800974e:	f000 b811 	b.w	8009774 <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	24001108 	.word	0x24001108

08009758 <strchr>:
 8009758:	b2c9      	uxtb	r1, r1
 800975a:	4603      	mov	r3, r0
 800975c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009760:	b11a      	cbz	r2, 800976a <strchr+0x12>
 8009762:	428a      	cmp	r2, r1
 8009764:	d1f9      	bne.n	800975a <strchr+0x2>
 8009766:	4618      	mov	r0, r3
 8009768:	4770      	bx	lr
 800976a:	2900      	cmp	r1, #0
 800976c:	bf18      	it	ne
 800976e:	2300      	movne	r3, #0
 8009770:	e7f9      	b.n	8009766 <strchr+0xe>

08009772 <__retarget_lock_acquire_recursive>:
 8009772:	4770      	bx	lr

08009774 <__retarget_lock_release_recursive>:
 8009774:	4770      	bx	lr
	...

08009778 <_init>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr

08009784 <_fini>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr
